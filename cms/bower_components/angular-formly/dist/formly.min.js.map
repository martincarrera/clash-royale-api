{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///dist/formly.min.js","webpack:///webpack/bootstrap 5e78927df9b823f08754","webpack:///./index.js","webpack:///./index.js?b4fb","webpack:///./angular-fix/index.js","webpack:///./angular-fix/index.js?cf45","webpack:///./other/utils.js","webpack:///./other/utils.js?ffaa","webpack:///./other/docsBaseUrl.js","webpack:///external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-custom-validation.js?5e8e","webpack:///./directives/formly-field.js","webpack:///./directives/formly-field.js?ac8b","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-focus.js?b982","webpack:///./directives/formly-form.controller.js","webpack:///./directives/formly-form.controller.js?13bb","webpack:///./directives/formly-form.js","webpack:///./directives/formly-form.js?e613","webpack:///./index.common.js","webpack:///./index.common.js?62bb","webpack:///./providers/formlyApiCheck.js","webpack:///./providers/formlyApiCheck.js?16e7","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyConfig.js?4bad","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyUsability.js?e7dc","webpack:///./providers/formlyValidationMessages.js","webpack:///./providers/formlyValidationMessages.js?429b","webpack:///./run/formlyCustomTags.js","webpack:///./run/formlyCustomTags.js?dc71","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./run/formlyNgModelAttrsManipulator.js?7577","webpack:///./services/formlyUtil.js","webpack:///./services/formlyUtil.js?e034","webpack:///./services/formlyWarn.js","webpack:///./services/formlyWarn.js?08b5","webpack:///external \"angular\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_19__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_indexCommon","_indexCommon2","angular","version","window","containsSelector","string","containsSpecialChar","a","b","indexOf","formlyEval","scope","expression","$modelValue","$viewValue","extraLocals","_angularFix2","isFunction","$eval","extend","getFieldId","formId","options","index","type","template","templateUrl","key","join","reverseDeepMerge","dest","forEach","arguments","src","val","prop","isDefined","objAndSameType","copy","obj1","obj2","isObject","getPrototypeOf","findByNodeName","el","nodeName","element","toUpperCase","children","i","length","node","arrayify","isArray","extendFunction","_len","fns","Array","_key","args","fn","apply","extendArray","primary","secondary","property","item","push","startsWith","str","search","isString","substring","contains","_angularFix","formlyCustomValidation","formlyUtil","restrict","link","attrs","ctrl","addValidatorToPipeline","isAsync","validator","name","setupMessage","useNewValidatorsApi","setupWithValidators","setupWithParsers","message","opts","validation","messages","validatorCollection","modelValue","viewValue","inFlightValidator","undefined","$parsers","unshift","isValid","$pending","then","$setValidity","keys","hasOwnProperty","validators","bind","asyncValidators","$inject","_toConsumableArray","arr","arr2","from","formlyField","$http","$q","$compile","$templateCache","$interpolate","formlyConfig","formlyApiCheck","formlyUsability","formlyWarn","FormlyFieldController","$scope","$timeout","$parse","$controller","formlyValidationMessages","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","when","watchExpressions","formOptions","watchAllExpressions","$watch","newVal","model","parseSet","parseGet","shouldNotUseParseKey","isNumber","simplifyLife","originalModel","extras","data","templateOptions","to","setFieldIdAndName","formName","form","$name","setDefaultValue","defaultValue","setInitialValue","initialValue","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","reverse","typeName","getType","extraOptions","extendOptionsWithDefaults","resetModel","updateInitialValue","formControl","resetFormControl","$setUntouched","$setPristine","isMultiNgModel","$setViewValue","$render","$root","$$phase","$digest","addValidationMessages","invokeControllers","controller","setupFieldGroup","formState","fieldGroup","fieldType","getFieldType","checkApi","fieldLink","formlyFormCtrl","setFieldGroupTemplate","checkFieldGroupApi","addClass","extraAttributes","elementAttributes","map","getTemplate","className","transcludeInWrappers","setElementTemplate","addAttributes","attr","addClasses","templateString","html","asHtml","contents","watchFormControl","watchFieldNameOrExistence","nameExpressionRegex","nameExpression","exec","watchFieldExistence","fieldCount","fc","stopWatchingShowError","addShowMessagesWatcher","addParsers","addFormatters","customExpression","errorExistsAndShouldBeVisibleExpression","formControls","some","$invalid","show","noTouchedButDirty","isUndefined","$touched","$dirty","errorExistsAndShouldBeVisible","showError","setParsersOrFormatters","formWasPristine","$pristine","formatters","$formatters","formatter","which","getThingsFromType","theType","typeThings","getDefaultOptionsProperty","getThingsFromOptionsTypes","getDefaultOptionsOptionsTypes","optionsTypesThings","optionsTypeName","getFormlyExpressionThing","thing","formlyExpressionParserOrFormatterFunction","originalThingProp","things","ngModelCtrls","ngModelCtrl","_ngModelCtrl","concat","noop","noFormControl","templateEl","ngModelNodes","querySelectorAll","ngModelNode","getAttribute","callLinkFunctions","thusly","runManipulators","manipulators","templateToManipulate","chain","manipulator","newTemplate","fieldManipulators","getManipulators","getFieldTemplate","preWrapper","postWrapper","error","wrapper","append","addManipulators","_ref","_ref$preWrapper","pre","_ref$postWrapper","post","templateManipulators","fromOptionsOrType","getFieldError","isUrl","templatePromise","_ret3","httpOptions","cache","v","url","get","response","getWrapperOption","aWrapper","checkWrapper","runApiCheck","promises","w","all","wrappersTemplates","wrapperTemplate","checkWrapperTemplate","totalWrapper","shift","doTransclusion","superWrapper","transcludeEl","find","replaceWith","getWrapper","getWrapperByType","typeWrappers","formWrappers","defaultWrapper","formlyFieldOptions","prefix","hide","_ref2","forType","apiCheck","apiCheckInstance","apiCheckFunction","apiCheckOptions","runApiCheckForType","getTypeHeritage","instance","config","disabled","_apiCheck2","globalConfig","checkerObjects","shape","checker","checkOptions","output","docsBaseUrl","transclude","fields","_apiCheck","formlyFocus","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","isFieldGroup","FormlyFormController","onModelOrFormStateChange","runFieldExpressionProperties","validateFormControl","validate","$validate","hideExpression","evalCloseToFormlyExpression","validateOnModelChange","setupFields","checkDeprecatedOptions","fieldTransforms","fieldTransform","getFormlyError","setupModels","setupHideExpressionWatcher","attachKey","setupWatchers","setupOptions","formOptionsApi","optional","watchedModels","manualModelWatcher","isNewModel","initModel","resolveStringModel","referencesCurrentlyWatchedModel","watcher","watchers","listener","runFieldExpressions","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","toString","split","originalExpression","modifyArgs","_slice","displayName","originalListener","originalArgs","getFormlyFieldLikeLocals","prototype","slice","formlyForm","formlyFormGetTemplate","getRootEl","rootEl","getFieldRootEl","fieldRootEl","getHideDirective","hideDirective","defaultHideDirective","getTrackBy","trackBy","getFormName","bindName","minor","startSymbol","endSymbol","getTranscludeClass","transcludeClass","copyAttributes","attributes","excluded","arrayAttrs","toKebabCase","currentFormId","parentFormAttributes","parent","hasClass","formlyFormLink","setFormController","theFormlyForm","getter","parentForm","$parent","$removeControl","removeData","disableWarnings","fixChromeAutocomplete","global","removeChromeAutoComplete","offInstance","onInstance","input","document","createElement","setAttribute","appendChild","replace","$1","toLowerCase","_providersFormlyApiCheck","_providersFormlyApiCheck2","_otherDocsBaseUrl","_otherDocsBaseUrl2","_providersFormlyUsability","_providersFormlyUsability2","_providersFormlyConfig","_providersFormlyConfig2","_providersFormlyValidationMessages","_providersFormlyValidationMessages2","_servicesFormlyUtil","_servicesFormlyUtil2","_servicesFormlyWarn","_servicesFormlyWarn2","_directivesFormlyCustomValidation","_directivesFormlyCustomValidation2","_directivesFormlyField","_directivesFormlyField2","_directivesFormlyFocus","_directivesFormlyFocus2","_directivesFormlyForm","_directivesFormlyForm2","_directivesFormlyFormController","_directivesFormlyFormController2","_runFormlyNgModelAttrsManipulator","_runFormlyNgModelAttrsManipulator2","_runFormlyCustomTags","_runFormlyCustomTags2","ngModuleName","ngModule","constant","provider","directive","run","shapeRequiredIfNot","otherProps","propChecker","shapeRequiredIfNotDefinition","propName","location","propExists","otherPropsExist","otherProp","utils","getError","checkerHelpers","setupChecker","formlyExpression","oneOfType","func","specifyWrapperType","typeOrArrayOf","nullable","apiCheckProperty","apiCheckInstanceProperty","onlyIf","withProperties","warn","throw","apiCheckFunctionProperty","oneOf","formlyWrapperType","ifNot","types","overwriteOk","bool","object","strict","objectOf","modelChecker","arrayOf","validatorChecker","watcherChecker","fieldOptionsApiShape","$$hashKey","any","number","skipNgModelAttrsManipulator","modelOptions","updateOn","debounce","allowInvalid","getterSetter","timezone","parsers","ngModelElAttrs","ngModelAttrs","statement","attribute","bound","boolean","array","typeOptionsDefaultOptions","formlyTypeOptions","extends","formlyUsabilityProvider","formlyErrorAndWarningsUrlPrefix","setType","checkType","extendTypeOptions","typeMap","JSON","stringify","_ret","allTypes","checkOverwrite","extendsType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeDefaultOptions","_otherUtils2","extendTemplate","extendsCtrl","optionsCtrl","extendsFn","optionsFn","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","mergedDefaultOptions","extenderOptionsDefaultOptions","newDefaultOptions","throwError","errorContext","getTypes","heritage","setWrapper","_x","_x2","_again","wrapperOptions","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","newValue","objectName","wrappers","_name","removeWrapperByName","removeWrappersForType","_this","console","warnInfoSlug","_this2","disableNgModelAttrsManipulator","ngModelAttrsManipulatorPreferUnbound","$get","_otherUtils","errorInfoSlug","Error","getErrorMessage","toJson","urlSuffix","additionalInfo","formlyTransclude","addTemplateOptionValueMessage","suffix","alternate","validationMessages","templateOptionValue","addStringMessage","addCustomTags","documentMode","customElements","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addValidation","addIfNotPresent","modelNodes","alterNgModelAttr","isPropertyAccessor","addRegardlessOfPresence","addModelOptions","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltInAttributes","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","addNgModelElAttrs","skip","innerHTML","getNgModelNodes","selectorNot","skipNot","query","e","getNgModelNodesFallback","allNgModelNodes","matchingNgModelNodes","hasAttribute","nodeMatches","selector","div","outerHTML","querySelector","boundOnly","bothBooleanAndBound","bothAttributeAndBound","statementOnly","attributeOnly","substr","nodes","$log"],"mappings":"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","file":"dist/formly.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"api-check\"), require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"api-check\", \"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"api-check\"), require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"apiCheck\"], root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_19__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","/*! angular-formly v8.2.1 | MIT | built with ♥ by Astrism <astrisms@gmail.com>, Kent C. Dodds <kent@doddsfamily.us> (ó ì_í)=óò=(ì_í ò) */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"api-check\"), require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"api-check\", \"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"api-check\"), require(\"angular\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"apiCheck\"], root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_19__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _indexCommon = __webpack_require__(10);\n\t\n\tvar _indexCommon2 = _interopRequireDefault(_indexCommon);\n\t\n\texports['default'] = _indexCommon2['default'];\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar angular = __webpack_require__(19);\n\t\n\t/* istanbul ignore next */\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\texports['default'] = angular;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = {\n\t  containsSelector: containsSelector, containsSpecialChar: containsSpecialChar, formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName,\n\t  arrayify: arrayify, extendFunction: extendFunction, extendArray: extendArray, startsWith: startsWith, contains: contains\n\t};\n\t\n\tfunction containsSelector(string) {\n\t  return containsSpecialChar(string, '.') || containsSpecialChar(string, '[') && containsSpecialChar(string, ']');\n\t}\n\t\n\tfunction containsSpecialChar(a, b) {\n\t  if (!a || !a.indexOf) {\n\t    return false;\n\t  }\n\t  return a.indexOf(b) !== -1;\n\t}\n\t\n\tfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n\t  if (_angularFix2['default'].isFunction(expression)) {\n\t    return expression($viewValue, $modelValue, scope, extraLocals);\n\t  } else {\n\t    return scope.$eval(expression, _angularFix2['default'].extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n\t  }\n\t}\n\t\n\tfunction getFieldId(formId, options, index) {\n\t  if (options.id) {\n\t    return options.id;\n\t  }\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = 'template';\n\t  } else if (!type && options.templateUrl) {\n\t    type = 'templateUrl';\n\t  }\n\t\n\t  return [formId, type, options.key, index].join('_');\n\t}\n\t\n\tfunction reverseDeepMerge(dest) {\n\t  _angularFix2['default'].forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    _angularFix2['default'].forEach(src, function (val, prop) {\n\t      if (!_angularFix2['default'].isDefined(dest[prop])) {\n\t        dest[prop] = _angularFix2['default'].copy(val);\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t  return dest;\n\t}\n\t\n\tfunction objAndSameType(obj1, obj2) {\n\t  return _angularFix2['default'].isObject(obj1) && _angularFix2['default'].isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\t\n\t// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\tfunction findByNodeName(el, nodeName) {\n\t  if (!el.prop) {\n\t    // not a jQuery or jqLite object -> wrap it\n\t    el = _angularFix2['default'].element(el);\n\t  }\n\t\n\t  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n\t    return el;\n\t  }\n\t\n\t  var c = el.children();\n\t  for (var i = 0; c && i < c.length; i++) {\n\t    var node = findByNodeName(c[i], nodeName);\n\t    if (node) {\n\t      return node;\n\t    }\n\t  }\n\t}\n\t\n\tfunction arrayify(obj) {\n\t  if (obj && !_angularFix2['default'].isArray(obj)) {\n\t    obj = [obj];\n\t  } else if (!obj) {\n\t    obj = [];\n\t  }\n\t  return obj;\n\t}\n\t\n\tfunction extendFunction() {\n\t  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n\t    fns[_key] = arguments[_key];\n\t  }\n\t\n\t  return function extendedFunction() {\n\t    var args = arguments;\n\t    fns.forEach(function (fn) {\n\t      return fn.apply(null, args);\n\t    });\n\t  };\n\t}\n\t\n\tfunction extendArray(primary, secondary, property) {\n\t  if (property) {\n\t    primary = primary[property];\n\t    secondary = secondary[property];\n\t  }\n\t  if (secondary && primary) {\n\t    _angularFix2['default'].forEach(secondary, function (item) {\n\t      if (primary.indexOf(item) === -1) {\n\t        primary.push(item);\n\t      }\n\t    });\n\t    return primary;\n\t  } else if (secondary) {\n\t    return secondary;\n\t  } else {\n\t    return primary;\n\t  }\n\t}\n\t\n\tfunction startsWith(str, search) {\n\t  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n\t    return str.length >= search.length && str.substring(0, search.length) === search;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\t\n\tfunction contains(str, search) {\n\t  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n\t    return str.length >= search.length && str.indexOf(search) !== -1;\n\t  } else {\n\t    return false;\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports[\"default\"] = \"https://github.com/formly-js/angular-formly/blob/\" + (\"8.2.1\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\tmodule.exports = exports[\"default\"];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyCustomValidation.$inject = [\"formlyUtil\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyCustomValidation;\n\t\n\t// @ngInject\n\tfunction formlyCustomValidation(formlyUtil) {\n\t  return {\n\t    restrict: 'A',\n\t    require: 'ngModel',\n\t    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n\t      var opts = scope.options;\n\t      opts.validation.messages = opts.validation.messages || {};\n\t      _angularFix2['default'].forEach(opts.validation.messages, function (message, key) {\n\t        opts.validation.messages[key] = function () {\n\t          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t        };\n\t      });\n\t\n\t      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n\t      _angularFix2['default'].forEach(opts.validators, _angularFix2['default'].bind(null, addValidatorToPipeline, false));\n\t      _angularFix2['default'].forEach(opts.asyncValidators, _angularFix2['default'].bind(null, addValidatorToPipeline, true));\n\t\n\t      function addValidatorToPipeline(isAsync, validator, name) {\n\t        setupMessage(validator, name);\n\t        validator = _angularFix2['default'].isObject(validator) ? validator.expression : validator;\n\t        if (useNewValidatorsApi) {\n\t          setupWithValidators(validator, name, isAsync);\n\t        } else {\n\t          setupWithParsers(validator, name, isAsync);\n\t        }\n\t      }\n\t\n\t      function setupMessage(validator, name) {\n\t        var message = validator.message;\n\t        if (message) {\n\t          opts.validation.messages[name] = function () {\n\t            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t          };\n\t        }\n\t      }\n\t\n\t      function setupWithValidators(validator, name, isAsync) {\n\t        var validatorCollection = isAsync ? '$asyncValidators' : '$validators';\n\t\n\t        ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n\t          return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t        };\n\t      }\n\t\n\t      function setupWithParsers(validator, name, isAsync) {\n\t        var inFlightValidator = undefined;\n\t        ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n\t          var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t          if (isAsync) {\n\t            ctrl.$pending = ctrl.$pending || {};\n\t            ctrl.$pending[name] = true;\n\t            inFlightValidator = isValid;\n\t            isValid.then(function () {\n\t              if (inFlightValidator === isValid) {\n\t                ctrl.$setValidity(name, true);\n\t              }\n\t            })['catch'](function () {\n\t              if (inFlightValidator === isValid) {\n\t                ctrl.$setValidity(name, false);\n\t              }\n\t            })['finally'](function () {\n\t              var $pending = ctrl.$pending || {};\n\t              if (Object.keys($pending).length === 1) {\n\t                delete ctrl.$pending;\n\t              } else {\n\t                delete ctrl.$pending[name];\n\t              }\n\t            });\n\t          } else {\n\t            ctrl.$setValidity(name, isValid);\n\t          }\n\t          return viewValue;\n\t        });\n\t      }\n\t    }\n\t  };\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"$interpolate\", \"formlyConfig\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _apiCheck = __webpack_require__(4);\n\t\n\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\t\n\texports['default'] = formlyField;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyField\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t  FormlyFieldController.$inject = [\"$scope\", \"$timeout\", \"$parse\", \"$controller\", \"formlyValidationMessages\"];\n\t  var arrayify = formlyUtil.arrayify;\n\t\n\t  return {\n\t    restrict: 'AE',\n\t    transclude: true,\n\t    require: '?^formlyForm',\n\t    scope: {\n\t      options: '=',\n\t      model: '=',\n\t      originalModel: '=?',\n\t      formId: '@', // TODO remove formId in a breaking release\n\t      index: '=?',\n\t      fields: '=?',\n\t      formState: '=?',\n\t      formOptions: '=?',\n\t      form: '=?' },\n\t    // TODO require form in a breaking release\n\t    controller: FormlyFieldController,\n\t    link: fieldLink\n\t  };\n\t\n\t  // @ngInject\n\t  function FormlyFieldController($scope, $timeout, $parse, $controller, formlyValidationMessages) {\n\t    /* eslint max-statements:[2, 34] */\n\t    if ($scope.options.fieldGroup) {\n\t      setupFieldGroup();\n\t      return;\n\t    }\n\t\n\t    var fieldType = getFieldType($scope.options);\n\t    simplifyLife($scope.options);\n\t    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n\t    extendOptionsWithDefaults($scope.options, $scope.index);\n\t    checkApi($scope.options);\n\t    // set field id to link labels and fields\n\t\n\t    // initalization\n\t    setFieldIdAndName();\n\t    setDefaultValue();\n\t    setInitialValue();\n\t    runExpressions();\n\t    watchExpressions();\n\t    addValidationMessages($scope.options);\n\t    invokeControllers($scope, $scope.options, fieldType);\n\t\n\t    // function definitions\n\t    function runExpressions() {\n\t      // must run on next tick to make sure that the current value is correct.\n\t      return $timeout(function runExpressionsOnNextTick() {\n\t        var field = $scope.options;\n\t        var currentValue = valueGetterSetter();\n\t        _angularFix2['default'].forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t          var setter = $parse(prop).assign;\n\t          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue));\n\t          promise.then(function setFieldValue(value) {\n\t            setter(field, value);\n\t          });\n\t        });\n\t      }, 0, false);\n\t    }\n\t\n\t    function watchExpressions() {\n\t      if ($scope.formOptions.watchAllExpressions) {\n\t        (function () {\n\t          var field = $scope.options;\n\t          var currentValue = valueGetterSetter();\n\t          _angularFix2['default'].forEach(field.expressionProperties, function watchExpression(expression, prop) {\n\t            var setter = $parse(prop).assign;\n\t            $scope.$watch(function expressionPropertyWatcher() {\n\t              return formlyUtil.formlyEval($scope, expression, currentValue, currentValue);\n\t            }, function expressionPropertyListener(value) {\n\t              setter(field, value);\n\t            }, true);\n\t          });\n\t        })();\n\t      }\n\t    }\n\t\n\t    function valueGetterSetter(newVal) {\n\t      if (!$scope.model || !$scope.options.key) {\n\t        return undefined;\n\t      }\n\t      if (_angularFix2['default'].isDefined(newVal)) {\n\t        parseSet($scope.options.key, $scope.model, newVal);\n\t      }\n\t      return parseGet($scope.options.key, $scope.model);\n\t    }\n\t\n\t    function shouldNotUseParseKey(key) {\n\t      return _angularFix2['default'].isNumber(key) || !formlyUtil.containsSelector(key);\n\t    }\n\t\n\t    function parseSet(key, model, newVal) {\n\t      // If either of these are null/undefined then just return undefined\n\t      if (!key && key !== 0 || !model) {\n\t        return;\n\t      }\n\t      // If we are working with a number then $parse wont work, default back to the old way for now\n\t      if (shouldNotUseParseKey(key)) {\n\t        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n\t        model[key] = newVal;\n\t      } else {\n\t        var setter = $parse($scope.options.key).assign;\n\t        if (setter) {\n\t          setter($scope.model, newVal);\n\t        }\n\t      }\n\t    }\n\t\n\t    function parseGet(key, model) {\n\t      // If either of these are null/undefined then just return undefined\n\t      if (!key && key !== 0 || !model) {\n\t        return undefined;\n\t      }\n\t\n\t      // If we are working with a number then $parse wont work, default back to the old way for now\n\t      if (shouldNotUseParseKey(key)) {\n\t        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n\t        return model[key];\n\t      } else {\n\t        return $parse(key)(model);\n\t      }\n\t    }\n\t\n\t    function simplifyLife(options) {\n\t      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t      formlyUtil.reverseDeepMerge(options, {\n\t        originalModel: options.model,\n\t        extras: {},\n\t        data: {},\n\t        templateOptions: {},\n\t        validation: {}\n\t      });\n\t      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t      $scope.to = $scope.options.templateOptions;\n\t      $scope.formOptions = $scope.formOptions || {};\n\t    }\n\t\n\t    function setFieldIdAndName() {\n\t      if (_angularFix2['default'].isFunction(formlyConfig.extras.getFieldId)) {\n\t        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n\t      } else {\n\t        var formName = $scope.form && $scope.form.$name || $scope.formId;\n\t        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n\t      }\n\t      $scope.options.id = $scope.id;\n\t      $scope.name = $scope.options.name || $scope.options.id;\n\t      $scope.options.name = $scope.name;\n\t    }\n\t\n\t    function setDefaultValue() {\n\t      if (_angularFix2['default'].isDefined($scope.options.defaultValue) && !_angularFix2['default'].isDefined(parseGet($scope.options.key, $scope.model))) {\n\t        parseSet($scope.options.key, $scope.model, $scope.options.defaultValue);\n\t      }\n\t    }\n\t\n\t    function setInitialValue() {\n\t      $scope.options.initialValue = $scope.model && parseGet($scope.options.key, $scope.model);\n\t    }\n\t\n\t    function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t      if (type) {\n\t        mergeOptions(options, type.defaultOptions);\n\t      }\n\t      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t      _angularFix2['default'].forEach(properOrder, function (typeName) {\n\t        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t      });\n\t    }\n\t\n\t    function mergeOptions(options, extraOptions) {\n\t      if (extraOptions) {\n\t        if (_angularFix2['default'].isFunction(extraOptions)) {\n\t          extraOptions = extraOptions(options, $scope);\n\t        }\n\t        formlyUtil.reverseDeepMerge(options, extraOptions);\n\t      }\n\t    }\n\t\n\t    function extendOptionsWithDefaults(options, index) {\n\t      var key = options.key || index || 0;\n\t      _angularFix2['default'].extend(options, {\n\t        // attach the key in case the formly-field directive is used directly\n\t        key: key,\n\t        value: options.value || valueGetterSetter,\n\t        runExpressions: runExpressions,\n\t        resetModel: resetModel,\n\t        updateInitialValue: updateInitialValue\n\t      });\n\t    }\n\t\n\t    function resetModel() {\n\t      parseSet($scope.options.key, $scope.model, $scope.options.initialValue);\n\t      if ($scope.options.formControl) {\n\t        if (_angularFix2['default'].isArray($scope.options.formControl)) {\n\t          _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n\t            resetFormControl(formControl, true);\n\t          });\n\t        } else {\n\t          resetFormControl($scope.options.formControl);\n\t        }\n\t      }\n\t      if ($scope.form) {\n\t        $scope.form.$setUntouched && $scope.form.$setUntouched();\n\t        $scope.form.$setPristine();\n\t      }\n\t    }\n\t\n\t    function resetFormControl(formControl, isMultiNgModel) {\n\t      if (!isMultiNgModel) {\n\t        formControl.$setViewValue(parseGet($scope.options.key, $scope.model));\n\t      }\n\t\n\t      formControl.$render();\n\t      formControl.$setUntouched && formControl.$setUntouched();\n\t      formControl.$setPristine();\n\t\n\t      // To prevent breaking change requiring a digest to reset $viewModel\n\t      if (!$scope.$root.$$phase) {\n\t        $scope.$digest();\n\t      }\n\t    }\n\t\n\t    function updateInitialValue() {\n\t      $scope.options.initialValue = parseGet($scope.options.key, $scope.model);\n\t    }\n\t\n\t    function addValidationMessages(options) {\n\t      options.validation.messages = options.validation.messages || {};\n\t      _angularFix2['default'].forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n\t        if (!options.validation.messages[name]) {\n\t          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n\t            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t          };\n\t        }\n\t      });\n\t    }\n\t\n\t    function invokeControllers(scope) {\n\t      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t      var type = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\t\n\t      _angularFix2['default'].forEach([type.controller, options.controller], function (controller) {\n\t        if (controller) {\n\t          $controller(controller, { $scope: scope });\n\t        }\n\t      });\n\t    }\n\t\n\t    function setupFieldGroup() {\n\t      $scope.options.options = $scope.options.options || {};\n\t      $scope.options.options.formState = $scope.formState;\n\t      $scope.to = $scope.options.templateOptions;\n\t    }\n\t  }\n\t\n\t  // link function\n\t  function fieldLink(scope, el, attrs, formlyFormCtrl) {\n\t    if (scope.options.fieldGroup) {\n\t      setFieldGroupTemplate();\n\t      return;\n\t    }\n\t\n\t    // watch the field model (if exists) if there is no parent formly-form directive (that would watch it instead)\n\t    if (!formlyFormCtrl && scope.options.model) {\n\t      scope.$watch('options.model', function () {\n\t        return scope.options.runExpressions();\n\t      }, true);\n\t    }\n\t\n\t    addAttributes();\n\t    addClasses();\n\t\n\t    var type = getFieldType(scope.options);\n\t    var args = arguments;\n\t    var thusly = this;\n\t    var fieldCount = 0;\n\t    var fieldManipulators = getManipulators(scope.options, scope.formOptions);\n\t    getFieldTemplate(scope.options).then(runManipulators(fieldManipulators.preWrapper)).then(transcludeInWrappers(scope.options, scope.formOptions)).then(runManipulators(fieldManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)['catch'](function (error) {\n\t      formlyWarn('there-was-a-problem-setting-the-template-for-this-field', 'There was a problem setting the template for this field ', scope.options, error);\n\t    });\n\t\n\t    function setFieldGroupTemplate() {\n\t      checkFieldGroupApi(scope.options);\n\t      el.addClass('formly-field-group');\n\t      var extraAttributes = '';\n\t      if (scope.options.elementAttributes) {\n\t        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n\t          return key + '=\"' + scope.options.elementAttributes[key] + '\"';\n\t        }).join(' ');\n\t      }\n\t      var modelValue = 'model';\n\t      scope.options.form = scope.form;\n\t      if (scope.options.key) {\n\t        modelValue = 'model[\\'' + scope.options.key + '\\']';\n\t      }\n\t      getTemplate('\\n          <formly-form model=\"' + modelValue + '\"\\n                       fields=\"options.fieldGroup\"\\n                       options=\"options.options\"\\n                       form=\"options.form\"\\n                       class=\"' + scope.options.className + '\"\\n                       ' + extraAttributes + '\\n                       is-field-group>\\n          </formly-form>\\n        ').then(transcludeInWrappers(scope.options, scope.formOptions)).then(setElementTemplate);\n\t    }\n\t\n\t    function addAttributes() {\n\t      if (scope.options.elementAttributes) {\n\t        el.attr(scope.options.elementAttributes);\n\t      }\n\t    }\n\t\n\t    function addClasses() {\n\t      if (scope.options.className) {\n\t        el.addClass(scope.options.className);\n\t      }\n\t      if (scope.options.type) {\n\t        el.addClass('formly-field-' + scope.options.type);\n\t      }\n\t    }\n\t\n\t    function setElementTemplate(templateString) {\n\t      el.html(asHtml(templateString));\n\t      $compile(el.contents())(scope);\n\t      return templateString;\n\t    }\n\t\n\t    function watchFormControl(templateString) {\n\t      var stopWatchingShowError = _angularFix2['default'].noop;\n\t      if (scope.options.noFormControl) {\n\t        return;\n\t      }\n\t      var templateEl = _angularFix2['default'].element('<div>' + templateString + '</div>');\n\t      var ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\t\n\t      if (ngModelNodes.length) {\n\t        _angularFix2['default'].forEach(ngModelNodes, function (ngModelNode) {\n\t          fieldCount++;\n\t          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n\t        });\n\t      }\n\t\n\t      function watchFieldNameOrExistence(name) {\n\t        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n\t        var nameExpression = nameExpressionRegex.exec(name);\n\t        if (nameExpression) {\n\t          name = $interpolate(name)(scope);\n\t        }\n\t        watchFieldExistence(name);\n\t      }\n\t\n\t      function watchFieldExistence(name) {\n\t        scope.$watch('form[\"' + name + '\"]', function formControlChange(formControl) {\n\t          if (formControl) {\n\t            if (fieldCount > 1) {\n\t              if (!scope.options.formControl) {\n\t                scope.options.formControl = [];\n\t              }\n\t              scope.options.formControl.push(formControl);\n\t            } else {\n\t              scope.options.formControl = formControl;\n\t            }\n\t            scope.fc = scope.options.formControl; // shortcut for template authors\n\t            stopWatchingShowError();\n\t            addShowMessagesWatcher();\n\t            addParsers();\n\t            addFormatters();\n\t          }\n\t        });\n\t      }\n\t\n\t      function addShowMessagesWatcher() {\n\t        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n\t          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n\t          var options = scope.options;\n\t          var formControls = arrayify(scope.fc);\n\t          if (!formControls.some(function (fc) {\n\t            return fc.$invalid;\n\t          })) {\n\t            return false;\n\t          } else if (typeof options.validation.show === 'boolean') {\n\t            return options.validation.show;\n\t          } else if (customExpression) {\n\t            return formControls.some(function (fc) {\n\t              return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n\t            });\n\t          } else {\n\t            return formControls.some(function (fc) {\n\t              var noTouchedButDirty = _angularFix2['default'].isUndefined(fc.$touched) && fc.$dirty;\n\t              return fc.$touched || noTouchedButDirty;\n\t            });\n\t          }\n\t        }, function onShowValidationChange(show) {\n\t          scope.options.validation.errorExistsAndShouldBeVisible = show;\n\t          scope.showError = show; // shortcut for template authors\n\t        });\n\t      }\n\t\n\t      function addParsers() {\n\t        setParsersOrFormatters('parsers');\n\t      }\n\t\n\t      function addFormatters() {\n\t        setParsersOrFormatters('formatters');\n\t        var ctrl = scope.fc;\n\t        var formWasPristine = scope.form.$pristine;\n\t        if (scope.options.formatters) {\n\t          (function () {\n\t            var value = ctrl.$modelValue;\n\t            ctrl.$formatters.forEach(function (formatter) {\n\t              value = formatter(value);\n\t            });\n\t\n\t            ctrl.$setViewValue(value);\n\t            ctrl.$render();\n\t            ctrl.$setPristine();\n\t            if (formWasPristine) {\n\t              scope.form.$setPristine();\n\t            }\n\t          })();\n\t        }\n\t      }\n\t\n\t      function setParsersOrFormatters(which) {\n\t        var originalThingProp = 'originalParser';\n\t        if (which === 'formatters') {\n\t          originalThingProp = 'originalFormatter';\n\t        }\n\t\n\t        // init with type's parsers\n\t        var things = getThingsFromType(type);\n\t\n\t        // get optionsTypes things\n\t        things = formlyUtil.extendArray(things, getThingsFromOptionsTypes(scope.options.optionsTypes));\n\t\n\t        // get field's things\n\t        things = formlyUtil.extendArray(things, scope.options[which]);\n\t\n\t        // convert things into formlyExpression things\n\t        _angularFix2['default'].forEach(things, function (thing, index) {\n\t          things[index] = getFormlyExpressionThing(thing);\n\t        });\n\t\n\t        var ngModelCtrls = scope.fc;\n\t        if (!_angularFix2['default'].isArray(ngModelCtrls)) {\n\t          ngModelCtrls = [ngModelCtrls];\n\t        }\n\t\n\t        _angularFix2['default'].forEach(ngModelCtrls, function (ngModelCtrl) {\n\t          var _ngModelCtrl;\n\t\n\t          ngModelCtrl['$' + which] = (_ngModelCtrl = ngModelCtrl['$' + which]).concat.apply(_ngModelCtrl, _toConsumableArray(things));\n\t        });\n\t\n\t        function getThingsFromType(theType) {\n\t          if (!theType) {\n\t            return [];\n\t          }\n\t          if (_angularFix2['default'].isString(theType)) {\n\t            theType = formlyConfig.getType(theType, true, scope.options);\n\t          }\n\t          var typeThings = [];\n\t\n\t          // get things from parent\n\t          if (theType['extends']) {\n\t            typeThings = formlyUtil.extendArray(typeThings, getThingsFromType(theType['extends']));\n\t          }\n\t\n\t          // get own type's things\n\t          typeThings = formlyUtil.extendArray(typeThings, getDefaultOptionsProperty(theType, which, []));\n\t\n\t          // get things from optionsTypes\n\t          typeThings = formlyUtil.extendArray(typeThings, getThingsFromOptionsTypes(getDefaultOptionsOptionsTypes(theType)));\n\t\n\t          return typeThings;\n\t        }\n\t\n\t        function getThingsFromOptionsTypes() {\n\t          var optionsTypes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\t\n\t          var optionsTypesThings = [];\n\t          _angularFix2['default'].forEach(_angularFix2['default'].copy(arrayify(optionsTypes)).reverse(), function (optionsTypeName) {\n\t            optionsTypesThings = formlyUtil.extendArray(optionsTypesThings, getThingsFromType(optionsTypeName));\n\t          });\n\t          return optionsTypesThings;\n\t        }\n\t\n\t        function getFormlyExpressionThing(thing) {\n\t          formlyExpressionParserOrFormatterFunction[originalThingProp] = thing;\n\t          return formlyExpressionParserOrFormatterFunction;\n\t\n\t          function formlyExpressionParserOrFormatterFunction($viewValue) {\n\t            var $modelValue = scope.options.value();\n\t            return formlyUtil.formlyEval(scope, thing, $modelValue, $viewValue);\n\t          }\n\t        }\n\t      }\n\t    }\n\t\n\t    function callLinkFunctions() {\n\t      if (type && type.link) {\n\t        type.link.apply(thusly, args);\n\t      }\n\t      if (scope.options.link) {\n\t        scope.options.link.apply(thusly, args);\n\t      }\n\t    }\n\t\n\t    function runManipulators(manipulators) {\n\t      return function runManipulatorsOnTemplate(templateToManipulate) {\n\t        var chain = $q.when(templateToManipulate);\n\t        _angularFix2['default'].forEach(manipulators, function (manipulator) {\n\t          chain = chain.then(function (template) {\n\t            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t              return _angularFix2['default'].isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t            });\n\t          });\n\t        });\n\t        return chain;\n\t      };\n\t    }\n\t  }\n\t\n\t  // sort-of stateless util functions\n\t  function asHtml(el) {\n\t    var wrapper = _angularFix2['default'].element('<a></a>');\n\t    return wrapper.append(el).html();\n\t  }\n\t\n\t  function getFieldType(options) {\n\t    return options.type && formlyConfig.getType(options.type);\n\t  }\n\t\n\t  function getManipulators(options, formOptions) {\n\t    var preWrapper = [];\n\t    var postWrapper = [];\n\t    addManipulators(options.templateManipulators);\n\t    addManipulators(formOptions.templateManipulators);\n\t    addManipulators(formlyConfig.templateManipulators);\n\t    return { preWrapper: preWrapper, postWrapper: postWrapper };\n\t\n\t    function addManipulators(manipulators) {\n\t      /* eslint-disable */ // it doesn't understand this :-(\n\t\n\t      var _ref = manipulators || {};\n\t\n\t      var _ref$preWrapper = _ref.preWrapper;\n\t      var pre = _ref$preWrapper === undefined ? [] : _ref$preWrapper;\n\t      var _ref$postWrapper = _ref.postWrapper;\n\t      var post = _ref$postWrapper === undefined ? [] : _ref$postWrapper;\n\t\n\t      preWrapper = preWrapper.concat(pre);\n\t      postWrapper = postWrapper.concat(post);\n\t      /* eslint-enable */\n\t    }\n\t  }\n\t\n\t  function getFieldTemplate(options) {\n\t    function fromOptionsOrType(key, fieldType) {\n\t      if (_angularFix2['default'].isDefined(options[key])) {\n\t        return options[key];\n\t      } else if (fieldType && _angularFix2['default'].isDefined(fieldType[key])) {\n\t        return fieldType[key];\n\t      }\n\t    }\n\t\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    var template = fromOptionsOrType('template', type);\n\t    var templateUrl = fromOptionsOrType('templateUrl', type);\n\t    if (_angularFix2['default'].isUndefined(template) && !templateUrl) {\n\t      throw formlyUsability.getFieldError('type-type-has-no-template', 'Type \\'' + options.type + '\\' has no template. On element:', options);\n\t    }\n\t\n\t    return getTemplate(templateUrl || template, _angularFix2['default'].isUndefined(template), options);\n\t  }\n\t\n\t  function getTemplate(template, isUrl, options) {\n\t    var templatePromise = undefined;\n\t    if (_angularFix2['default'].isFunction(template)) {\n\t      templatePromise = $q.when(template(options));\n\t    } else {\n\t      templatePromise = $q.when(template);\n\t    }\n\t\n\t    if (!isUrl) {\n\t      return templatePromise;\n\t    } else {\n\t      var _ret3 = (function () {\n\t        var httpOptions = { cache: $templateCache };\n\t        return {\n\t          v: templatePromise.then(function (url) {\n\t            return $http.get(url, httpOptions);\n\t          }).then(function (response) {\n\t            return response.data;\n\t          })['catch'](function handleErrorGettingATemplate(error) {\n\t            formlyWarn('problem-loading-template-for-templateurl', 'Problem loading template for ' + template, error);\n\t          })\n\t        };\n\t      })();\n\t\n\t      if (typeof _ret3 === 'object') return _ret3.v;\n\t    }\n\t  }\n\t\n\t  function transcludeInWrappers(options, formOptions) {\n\t    var wrapper = getWrapperOption(options, formOptions);\n\t\n\t    return function transcludeTemplate(template) {\n\t      if (!wrapper.length) {\n\t        return $q.when(template);\n\t      }\n\t\n\t      wrapper.forEach(function (aWrapper) {\n\t        formlyUsability.checkWrapper(aWrapper, options);\n\t        runApiCheck(aWrapper, options);\n\t      });\n\t      var promises = wrapper.map(function (w) {\n\t        return getTemplate(w.template || w.templateUrl, !w.template);\n\t      });\n\t      return $q.all(promises).then(function (wrappersTemplates) {\n\t        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t        });\n\t        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t        var totalWrapper = wrappersTemplates.shift();\n\t        wrappersTemplates.forEach(function (wrapperTemplate) {\n\t          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t        });\n\t        return doTransclusion(totalWrapper, template);\n\t      });\n\t    };\n\t  }\n\t\n\t  function doTransclusion(wrapper, template) {\n\t    var superWrapper = _angularFix2['default'].element('<a></a>'); // this allows people not have to have a single root in wrappers\n\t    superWrapper.append(wrapper);\n\t    var transcludeEl = superWrapper.find('formly-transclude');\n\t    if (!transcludeEl.length) {\n\t      // try it using our custom find function\n\t      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n\t    }\n\t    transcludeEl.replaceWith(template);\n\t    return superWrapper.html();\n\t  }\n\t\n\t  function getWrapperOption(options, formOptions) {\n\t    /* eslint complexity:[2, 6] */\n\t    var wrapper = options.wrapper;\n\t    // explicit null means no wrapper\n\t    if (wrapper === null) {\n\t      return [];\n\t    }\n\t\n\t    // nothing specified means use the default wrapper for the type\n\t    if (!wrapper) {\n\t      // get all wrappers that specify they apply to this type\n\t      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t    } else {\n\t      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t    }\n\t\n\t    // get all wrappers for that the type specified that it uses.\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    if (type && type.wrapper) {\n\t      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(typeWrappers);\n\t    }\n\t\n\t    // add form wrappers\n\t    if (formOptions.wrapper) {\n\t      var formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(formWrappers);\n\t    }\n\t\n\t    // add the default wrapper last\n\t    var defaultWrapper = formlyConfig.getWrapper();\n\t    if (defaultWrapper) {\n\t      wrapper.push(defaultWrapper);\n\t    }\n\t    return wrapper;\n\t  }\n\t\n\t  function checkApi(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyFieldOptions, options, {\n\t      prefix: 'formly-field directive',\n\t      url: 'formly-field-directive-validation-failed'\n\t    });\n\t    // validate with the type\n\t    var type = options.type && formlyConfig.getType(options.type);\n\t    if (type) {\n\t      runApiCheck(type, options, true);\n\t    }\n\t    if (options.expressionProperties && options.expressionProperties.hide) {\n\t      formlyWarn('dont-use-expressionproperties.hide-use-hideexpression-instead', 'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead', options);\n\t    }\n\t  }\n\t\n\t  function checkFieldGroupApi(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.fieldGroup, options, {\n\t      prefix: 'formly-field directive',\n\t      url: 'formly-field-directive-validation-failed'\n\t    });\n\t  }\n\t\n\t  function runApiCheck(_ref2, options, forType) {\n\t    var apiCheck = _ref2.apiCheck;\n\t    var apiCheckInstance = _ref2.apiCheckInstance;\n\t    var apiCheckFunction = _ref2.apiCheckFunction;\n\t    var apiCheckOptions = _ref2.apiCheckOptions;\n\t\n\t    runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options);\n\t    if (forType && options.type) {\n\t      _angularFix2['default'].forEach(formlyConfig.getTypeHeritage(options.type), function (type) {\n\t        runApiCheckForType(type.apiCheck, type.apiCheckInstance, type.apiCheckFunction, type.apiCheckOptions, options);\n\t      });\n\t    }\n\t  }\n\t\n\t  function runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options) {\n\t    /* eslint complexity:[2, 9] */\n\t    if (!apiCheck) {\n\t      return;\n\t    }\n\t    var instance = apiCheckInstance || formlyConfig.extras.apiCheckInstance || formlyApiCheck;\n\t    if (instance.config.disabled || _apiCheck2['default'].globalConfig.disabled) {\n\t      return;\n\t    }\n\t    var fn = apiCheckFunction || 'warn';\n\t    // this is the new API\n\t    var checkerObjects = apiCheck(instance);\n\t    _angularFix2['default'].forEach(checkerObjects, function (shape, name) {\n\t      var checker = instance.shape(shape);\n\t      var checkOptions = _angularFix2['default'].extend({\n\t        prefix: 'formly-field type ' + options.type + ' for property ' + name,\n\t        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n\t      }, apiCheckOptions);\n\t      instance[fn](checker, options[name], checkOptions);\n\t    });\n\t  }\n\t}\n\t\n\t// Stateless util functions\n\tfunction getDefaultOptionsOptionsTypes(type) {\n\t  return getDefaultOptionsProperty(type, 'optionsTypes', []);\n\t}\n\t\n\tfunction getDefaultOptionsProperty(type, prop, defaultValue) {\n\t  return type.defaultOptions && type.defaultOptions[prop] || defaultValue;\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tformlyFocus.$inject = [\"$timeout\", \"$document\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports['default'] = formlyFocus;\n\t\n\t// @ngInject\n\tfunction formlyFocus($timeout, $document) {\n\t  return {\n\t    restrict: 'A',\n\t    link: function formlyFocusLink(scope, element, attrs) {\n\t      var previousEl = null;\n\t      var el = element[0];\n\t      var doc = $document[0];\n\t      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n\t        /* eslint no-bitwise:0 */ // I know what I'm doing. I promise...\n\t        if (value === 'true') {\n\t          $timeout(function setElementFocus() {\n\t            previousEl = doc.activeElement;\n\t            el.focus();\n\t          }, ~ ~attrs.focusWait);\n\t        } else if (value === 'false') {\n\t          if (doc.activeElement === el) {\n\t            el.blur();\n\t            if (attrs.hasOwnProperty('refocus') && previousEl) {\n\t              previousEl.focus();\n\t            }\n\t          }\n\t        }\n\t      });\n\t    }\n\t  };\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tFormlyFormController.$inject = [\"formlyUsability\", \"formlyWarn\", \"formlyConfig\", \"$parse\", \"$scope\", \"formlyApiCheck\", \"formlyUtil\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\tvar _slice = Array.prototype.slice;\n\texports['default'] = FormlyFormController;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tfunction isFieldGroup(field) {\n\t  return field && !!field.fieldGroup;\n\t}\n\t\n\t// @ngInject\n\t\n\tfunction FormlyFormController(formlyUsability, formlyWarn, formlyConfig, $parse, $scope, formlyApiCheck, formlyUtil) {\n\t\n\t  setupOptions();\n\t  $scope.model = $scope.model || {};\n\t  setupFields();\n\t\n\t  // watch the model and evaluate watch expressions that depend on it.\n\t  if (!$scope.options.manualModelWatcher) {\n\t    $scope.$watch('model', onModelOrFormStateChange, true);\n\t  } else if (_angularFix2['default'].isFunction($scope.options.manualModelWatcher)) {\n\t    $scope.$watch($scope.options.manualModelWatcher, onModelOrFormStateChange, true);\n\t  }\n\t\n\t  if ($scope.options.formState) {\n\t    $scope.$watch('options.formState', onModelOrFormStateChange, true);\n\t  }\n\t\n\t  function onModelOrFormStateChange() {\n\t    _angularFix2['default'].forEach($scope.fields, runFieldExpressionProperties);\n\t  }\n\t\n\t  function validateFormControl(formControl, promise) {\n\t    var validate = formControl.$validate;\n\t    if (promise) {\n\t      promise.then(validate);\n\t    } else {\n\t      validate();\n\t    }\n\t  }\n\t\n\t  function runFieldExpressionProperties(field, index) {\n\t    var model = field.model || $scope.model;\n\t    var promise = field.runExpressions && field.runExpressions();\n\t    if (field.hideExpression) {\n\t      // can't use hide with expressionProperties reliably\n\t      var val = model[field.key];\n\t      field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index, { model: model });\n\t    }\n\t    if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n\t      if (_angularFix2['default'].isArray(field.formControl)) {\n\t        _angularFix2['default'].forEach(field.formControl, function (formControl) {\n\t          validateFormControl(formControl, promise);\n\t        });\n\t      } else {\n\t        validateFormControl(field.formControl, promise);\n\t      }\n\t    }\n\t  }\n\t\n\t  function setupFields() {\n\t    $scope.fields = $scope.fields || [];\n\t\n\t    checkDeprecatedOptions($scope.options);\n\t\n\t    var fieldTransforms = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\n\t\n\t    if (!_angularFix2['default'].isArray(fieldTransforms)) {\n\t      fieldTransforms = [fieldTransforms];\n\t    }\n\t\n\t    _angularFix2['default'].forEach(fieldTransforms, function transformFields(fieldTransform) {\n\t      if (fieldTransform) {\n\t        $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form);\n\t        if (!$scope.fields) {\n\t          throw formlyUsability.getFormlyError('fieldTransform must return an array of fields');\n\t        }\n\t      }\n\t    });\n\t\n\t    setupModels();\n\t\n\t    if ($scope.options.watchAllExpressions) {\n\t      _angularFix2['default'].forEach($scope.fields, setupHideExpressionWatcher);\n\t    }\n\t\n\t    _angularFix2['default'].forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t    _angularFix2['default'].forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t  }\n\t\n\t  function checkDeprecatedOptions(options) {\n\t    if (formlyConfig.extras.fieldTransform && _angularFix2['default'].isFunction(formlyConfig.extras.fieldTransform)) {\n\t      formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for formlyConfig.extras: ' + formlyConfig.extras.fieldTransform.name, formlyConfig.extras);\n\t    } else if (options.fieldTransform && _angularFix2['default'].isFunction(options.fieldTransform)) {\n\t      formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for form', options);\n\t    }\n\t  }\n\t\n\t  function setupOptions() {\n\t    formlyApiCheck['throw']([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: 'formly-form options check' });\n\t    $scope.options = $scope.options || {};\n\t    $scope.options.formState = $scope.options.formState || {};\n\t\n\t    _angularFix2['default'].extend($scope.options, {\n\t      updateInitialValue: updateInitialValue,\n\t      resetModel: resetModel\n\t    });\n\t  }\n\t\n\t  function updateInitialValue() {\n\t    _angularFix2['default'].forEach($scope.fields, function (field) {\n\t      if (isFieldGroup(field) && field.options) {\n\t        field.options.updateInitialValue();\n\t      } else {\n\t        field.updateInitialValue();\n\t      }\n\t    });\n\t  }\n\t\n\t  function resetModel() {\n\t    _angularFix2['default'].forEach($scope.fields, function (field) {\n\t      if (isFieldGroup(field) && field.options) {\n\t        field.options.resetModel();\n\t      } else if (field.resetModel) {\n\t        field.resetModel();\n\t      }\n\t    });\n\t  }\n\t\n\t  function setupModels() {\n\t    // a set of field models that are already watched (the $scope.model will have its own watcher)\n\t    var watchedModels = [$scope.model];\n\t    // we will not set up automatic model watchers if manual mode is set\n\t    var manualModelWatcher = $scope.options.manualModelWatcher;\n\t\n\t    if ($scope.options.formState) {\n\t      // $scope.options.formState will have its own watcher\n\t      watchedModels.push($scope.options.formState);\n\t    }\n\t\n\t    _angularFix2['default'].forEach($scope.fields, function (field) {\n\t      var isNewModel = initModel(field);\n\t\n\t      if (field.model && isNewModel && watchedModels.indexOf(field.model) === -1 && !manualModelWatcher) {\n\t        $scope.$watch(function () {\n\t          return field.model;\n\t        }, onModelOrFormStateChange, true);\n\t        watchedModels.push(field.model);\n\t      }\n\t    });\n\t  }\n\t\n\t  function setupHideExpressionWatcher(field, index) {\n\t    if (field.hideExpression) {\n\t      (function () {\n\t        // can't use hide with expressionProperties reliably\n\t        var model = field.model || $scope.model;\n\t        $scope.$watch(function hideExpressionWatcher() {\n\t          var val = model[field.key];\n\t          return evalCloseToFormlyExpression(field.hideExpression, val, field, index, { model: model });\n\t        }, function (hide) {\n\t          return field.hide = hide;\n\t        }, true);\n\t      })();\n\t    }\n\t  }\n\t\n\t  function initModel(field) {\n\t    var isNewModel = true;\n\t\n\t    if (_angularFix2['default'].isString(field.model)) {\n\t      (function () {\n\t        var expression = field.model;\n\t\n\t        isNewModel = !referencesCurrentlyWatchedModel(expression);\n\t\n\t        field.model = resolveStringModel(expression);\n\t\n\t        $scope.$watch(function () {\n\t          return resolveStringModel(expression);\n\t        }, function (model) {\n\t          return field.model = model;\n\t        });\n\t      })();\n\t    }\n\t\n\t    return isNewModel;\n\t\n\t    function resolveStringModel(expression) {\n\t      var index = $scope.fields.indexOf(field);\n\t      var model = evalCloseToFormlyExpression(expression, undefined, field, index, { model: $scope.model });\n\t\n\t      if (!model) {\n\t        throw formlyUsability.getFieldError('field-model-must-be-initialized', 'Field model must be initialized. When specifying a model as a string for a field, the result of the' + ' expression must have been initialized ahead of time.', field);\n\t      }\n\t\n\t      return model;\n\t    }\n\t  }\n\t\n\t  function referencesCurrentlyWatchedModel(expression) {\n\t    return ['model', 'formState'].some(function (item) {\n\t      return formlyUtil.startsWith(expression, item + '.') || formlyUtil.startsWith(expression, item + '[');\n\t    });\n\t  }\n\t\n\t  function attachKey(field, index) {\n\t    if (!isFieldGroup(field)) {\n\t      field.key = field.key || index || 0;\n\t    }\n\t  }\n\t\n\t  function setupWatchers(field, index) {\n\t    if (!_angularFix2['default'].isDefined(field.watcher)) {\n\t      return;\n\t    }\n\t    var watchers = field.watcher;\n\t    if (!_angularFix2['default'].isArray(watchers)) {\n\t      watchers = [watchers];\n\t    }\n\t    _angularFix2['default'].forEach(watchers, function setupWatcher(watcher) {\n\t      if (!_angularFix2['default'].isDefined(watcher.listener) && !watcher.runFieldExpressions) {\n\t        throw formlyUsability.getFieldError('all-field-watchers-must-have-a-listener', 'All field watchers must have a listener', field);\n\t      }\n\t      var watchExpression = getWatchExpression(watcher, field, index);\n\t      var watchListener = getWatchListener(watcher, field, index);\n\t\n\t      var type = watcher.type || '$watch';\n\t      watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t    });\n\t  }\n\t\n\t  function getWatchExpression(watcher, field, index) {\n\t    var watchExpression = undefined;\n\t    if (!_angularFix2['default'].isUndefined(watcher.expression)) {\n\t      watchExpression = watcher.expression;\n\t    } else if (field.key) {\n\t      watchExpression = 'model[\\'' + field.key.toString().split('.').join('\\'][\\'') + '\\']';\n\t    }\n\t    if (_angularFix2['default'].isFunction(watchExpression)) {\n\t      (function () {\n\t        // wrap the field's watch expression so we can call it with the field as the first arg\n\t        // and the stop function as the last arg as a helper\n\t        var originalExpression = watchExpression;\n\t        watchExpression = function formlyWatchExpression() {\n\t          var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t          return originalExpression.apply(undefined, _toConsumableArray(args));\n\t        };\n\t        watchExpression.displayName = 'Formly Watch Expression for field for ' + field.key;\n\t      })();\n\t    } else if (field.model) {\n\t      watchExpression = $parse(watchExpression).bind(null, $scope, { model: field.model });\n\t    }\n\t    return watchExpression;\n\t  }\n\t\n\t  function getWatchListener(watcher, field, index) {\n\t    var watchListener = watcher.listener;\n\t    if (_angularFix2['default'].isFunction(watchListener) || watcher.runFieldExpressions) {\n\t      (function () {\n\t        // wrap the field's watch listener so we can call it with the field as the first arg\n\t        // and the stop function as the last arg as a helper\n\t        var originalListener = watchListener;\n\t        watchListener = function formlyWatchListener() {\n\t          var value = undefined;\n\t          if (originalListener) {\n\t            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t            value = originalListener.apply(undefined, _toConsumableArray(args));\n\t          }\n\t          if (watcher.runFieldExpressions) {\n\t            runFieldExpressionProperties(field, index);\n\t          }\n\t          return value;\n\t        };\n\t        watchListener.displayName = 'Formly Watch Listener for field for ' + field.key;\n\t      })();\n\t    }\n\t    return watchListener;\n\t  }\n\t\n\t  function modifyArgs(watcher, index) {\n\t    for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t      originalArgs[_key - 2] = arguments[_key];\n\t    }\n\t\n\t    return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t  }\n\t\n\t  function evalCloseToFormlyExpression(expression, val, field, index) {\n\t    var extraLocals = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];\n\t\n\t    extraLocals = _angularFix2['default'].extend(getFormlyFieldLikeLocals(field, index), extraLocals);\n\t    return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n\t  }\n\t\n\t  function getFormlyFieldLikeLocals(field, index) {\n\t    // this makes it closer to what a regular formlyExpression would be\n\t    return {\n\t      model: field.model,\n\t      options: field,\n\t      index: index,\n\t      formState: $scope.options.formState,\n\t      originalModel: $scope.model,\n\t      formOptions: $scope.options,\n\t      formId: $scope.formId\n\t    };\n\t  }\n\t}\n\t\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyForm.$inject = [\"formlyUsability\", \"formlyWarn\", \"$parse\", \"formlyConfig\", \"$interpolate\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyForm;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyForm\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n\t  var currentFormId = 1;\n\t  return {\n\t    restrict: 'AE',\n\t    template: formlyFormGetTemplate,\n\t    replace: true,\n\t    transclude: true,\n\t    scope: {\n\t      fields: '=',\n\t      model: '=',\n\t      form: '=?',\n\t      options: '=?'\n\t    },\n\t    controller: 'FormlyFormController',\n\t    link: formlyFormLink\n\t  };\n\t\n\t  function formlyFormGetTemplate(el, attrs) {\n\t    var rootEl = getRootEl();\n\t    var fieldRootEl = getFieldRootEl();\n\t    var formId = 'formly_' + currentFormId++;\n\t    var parentFormAttributes = '';\n\t    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n\t      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n\t    }\n\t    return '\\n        <' + rootEl + ' class=\"formly\"\\n                 name=\"' + getFormName() + '\"\\n                 role=\"form\" ' + parentFormAttributes + '>\\n          <' + fieldRootEl + ' formly-field\\n               ng-repeat=\"field in fields ' + getTrackBy() + '\"\\n               ' + getHideDirective() + '=\"!field.hide\"\\n               class=\"formly-field\"\\n               options=\"field\"\\n               model=\"field.model || model\"\\n               original-model=\"model\"\\n               fields=\"fields\"\\n               form=\"theFormlyForm\"\\n               form-id=\"' + getFormName() + '\"\\n               form-state=\"options.formState\"\\n               form-options=\"options\"\\n               index=\"$index\">\\n          </' + fieldRootEl + '>\\n          <div ng-transclude class=\"' + getTranscludeClass() + '\"></div>\\n        </' + rootEl + '>\\n      ';\n\t\n\t    function getRootEl() {\n\t      return attrs.rootEl || 'ng-form';\n\t    }\n\t\n\t    function getFieldRootEl() {\n\t      return attrs.fieldRootEl || 'div';\n\t    }\n\t\n\t    function getHideDirective() {\n\t      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n\t    }\n\t\n\t    function getTrackBy() {\n\t      if (!attrs.trackBy) {\n\t        return '';\n\t      } else {\n\t        return 'track by ' + attrs.trackBy;\n\t      }\n\t    }\n\t\n\t    function getFormName() {\n\t      var formName = formId;\n\t      var bindName = attrs.bindName;\n\t      if (bindName) {\n\t        if (_angularFix2['default'].version.minor < 3) {\n\t          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n\t        }\n\t        // we can do a one-time binding here because we know we're in 1.3.x territory\n\t        formName = $interpolate.startSymbol() + '::\\'formly_\\' + ' + bindName + $interpolate.endSymbol();\n\t      }\n\t      return formName;\n\t    }\n\t\n\t    function getTranscludeClass() {\n\t      return attrs.transcludeClass || '';\n\t    }\n\t\n\t    function copyAttributes(attributes) {\n\t      var excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class', 'data-model', 'data-form', 'data-fields', 'data-options', 'data-name'];\n\t      var arrayAttrs = [];\n\t      _angularFix2['default'].forEach(attributes, function (_ref) {\n\t        var nodeName = _ref.nodeName;\n\t        var value = _ref.value;\n\t\n\t        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n\t          arrayAttrs.push(toKebabCase(nodeName) + '=\"' + value + '\"');\n\t        }\n\t      });\n\t      return arrayAttrs.join(' ');\n\t    }\n\t  }\n\t\n\t  function formlyFormLink(scope, el, attrs) {\n\t    setFormController();\n\t    fixChromeAutocomplete();\n\t\n\t    function setFormController() {\n\t      var formId = attrs.name;\n\t      scope.formId = formId;\n\t      scope.theFormlyForm = scope[formId];\n\t      if (attrs.form) {\n\t        var getter = $parse(attrs.form);\n\t        var setter = getter.assign;\n\t        var parentForm = getter(scope.$parent);\n\t        if (parentForm) {\n\t          scope.theFormlyForm = parentForm;\n\t          if (scope[formId]) {\n\t            scope.theFormlyForm.$removeControl(scope[formId]);\n\t          }\n\t\n\t          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n\t          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n\t          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n\t          // this is necessary because it's confusing to have a step between the form you pass in\n\t          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n\t          // to children forms :-( This line was added to solve this issue:\n\t          // https://github.com/formly-js/angular-formly/issues/287\n\t          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n\t          // so I expect it will remain this way for the life of angular 1.x\n\t          el.removeData('$formController');\n\t        } else {\n\t          setter(scope.$parent, scope[formId]);\n\t        }\n\t      }\n\t      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n\t        /* eslint no-console:0 */\n\t        formlyWarn('formly-form-has-no-formcontroller', 'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work', el, scope);\n\t      }\n\t    }\n\t\n\t    /*\n\t     * chrome autocomplete lameness\n\t     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n\t     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n\t     */\n\t    function fixChromeAutocomplete() {\n\t      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n\t      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n\t      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n\t      if (global && !offInstance || onInstance) {\n\t        var input = document.createElement('input');\n\t        input.setAttribute('autocomplete', 'address-level4');\n\t        input.setAttribute('hidden', 'true');\n\t        el[0].appendChild(input);\n\t      }\n\t    }\n\t  }\n\t\n\t  // stateless util functions\n\t  function toKebabCase(string) {\n\t    if (string) {\n\t      return string.replace(/([A-Z])/g, function ($1) {\n\t        return '-' + $1.toLowerCase();\n\t      });\n\t    } else {\n\t      return '';\n\t    }\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _providersFormlyApiCheck = __webpack_require__(11);\n\t\n\tvar _providersFormlyApiCheck2 = _interopRequireDefault(_providersFormlyApiCheck);\n\t\n\tvar _otherDocsBaseUrl = __webpack_require__(3);\n\t\n\tvar _otherDocsBaseUrl2 = _interopRequireDefault(_otherDocsBaseUrl);\n\t\n\tvar _providersFormlyUsability = __webpack_require__(13);\n\t\n\tvar _providersFormlyUsability2 = _interopRequireDefault(_providersFormlyUsability);\n\t\n\tvar _providersFormlyConfig = __webpack_require__(12);\n\t\n\tvar _providersFormlyConfig2 = _interopRequireDefault(_providersFormlyConfig);\n\t\n\tvar _providersFormlyValidationMessages = __webpack_require__(14);\n\t\n\tvar _providersFormlyValidationMessages2 = _interopRequireDefault(_providersFormlyValidationMessages);\n\t\n\tvar _servicesFormlyUtil = __webpack_require__(17);\n\t\n\tvar _servicesFormlyUtil2 = _interopRequireDefault(_servicesFormlyUtil);\n\t\n\tvar _servicesFormlyWarn = __webpack_require__(18);\n\t\n\tvar _servicesFormlyWarn2 = _interopRequireDefault(_servicesFormlyWarn);\n\t\n\tvar _directivesFormlyCustomValidation = __webpack_require__(5);\n\t\n\tvar _directivesFormlyCustomValidation2 = _interopRequireDefault(_directivesFormlyCustomValidation);\n\t\n\tvar _directivesFormlyField = __webpack_require__(6);\n\t\n\tvar _directivesFormlyField2 = _interopRequireDefault(_directivesFormlyField);\n\t\n\tvar _directivesFormlyFocus = __webpack_require__(7);\n\t\n\tvar _directivesFormlyFocus2 = _interopRequireDefault(_directivesFormlyFocus);\n\t\n\tvar _directivesFormlyForm = __webpack_require__(9);\n\t\n\tvar _directivesFormlyForm2 = _interopRequireDefault(_directivesFormlyForm);\n\t\n\tvar _directivesFormlyFormController = __webpack_require__(8);\n\t\n\tvar _directivesFormlyFormController2 = _interopRequireDefault(_directivesFormlyFormController);\n\t\n\tvar _runFormlyNgModelAttrsManipulator = __webpack_require__(16);\n\t\n\tvar _runFormlyNgModelAttrsManipulator2 = _interopRequireDefault(_runFormlyNgModelAttrsManipulator);\n\t\n\tvar _runFormlyCustomTags = __webpack_require__(15);\n\t\n\tvar _runFormlyCustomTags2 = _interopRequireDefault(_runFormlyCustomTags);\n\t\n\tvar ngModuleName = 'formly';\n\t\n\texports['default'] = ngModuleName;\n\t\n\tvar ngModule = _angularFix2['default'].module(ngModuleName, []);\n\t\n\tngModule.constant('formlyApiCheck', _providersFormlyApiCheck2['default']);\n\tngModule.constant('formlyErrorAndWarningsUrlPrefix', _otherDocsBaseUrl2['default']);\n\tngModule.constant('formlyVersion', (\"8.2.1\")); // <-- webpack variable\n\t\n\tngModule.provider('formlyUsability', _providersFormlyUsability2['default']);\n\tngModule.provider('formlyConfig', _providersFormlyConfig2['default']);\n\t\n\tngModule.factory('formlyValidationMessages', _providersFormlyValidationMessages2['default']);\n\tngModule.factory('formlyUtil', _servicesFormlyUtil2['default']);\n\tngModule.factory('formlyWarn', _servicesFormlyWarn2['default']);\n\t\n\tngModule.directive('formlyCustomValidation', _directivesFormlyCustomValidation2['default']);\n\tngModule.directive('formlyField', _directivesFormlyField2['default']);\n\tngModule.directive('formlyFocus', _directivesFormlyFocus2['default']);\n\tngModule.directive('formlyForm', _directivesFormlyForm2['default']);\n\tngModule.controller('FormlyFormController', _directivesFormlyFormController2['default']);\n\t\n\tngModule.run(_runFormlyNgModelAttrsManipulator2['default']);\n\tngModule.run(_runFormlyCustomTags2['default']);\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _apiCheck = __webpack_require__(4);\n\t\n\tvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\t\n\tvar apiCheck = (0, _apiCheck2['default'])({\n\t  output: {\n\t    prefix: 'angular-formly:',\n\t    docsBaseUrl: __webpack_require__(3)\n\t  }\n\t});\n\t\n\tfunction shapeRequiredIfNot(otherProps, propChecker) {\n\t  if (!_angularFix2['default'].isArray(otherProps)) {\n\t    otherProps = [otherProps];\n\t  }\n\t  var type = 'specified if these are not specified: `' + otherProps.join(', ') + '` (otherwise it\\'s optional)';\n\t\n\t  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t    var propExists = obj && obj.hasOwnProperty(propName);\n\t    var otherPropsExist = otherProps.some(function (otherProp) {\n\t      return obj && obj.hasOwnProperty(otherProp);\n\t    });\n\t    if (!otherPropsExist && !propExists) {\n\t      return apiCheck.utils.getError(propName, location, type);\n\t    } else if (propExists) {\n\t      return propChecker(prop, propName, location, obj);\n\t    }\n\t  }\n\t\n\t  shapeRequiredIfNotDefinition.type = type;\n\t  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t}\n\t\n\tvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\tvar specifyWrapperType = apiCheck.typeOrArrayOf(apiCheck.string).nullable;\n\t\n\tvar apiCheckProperty = apiCheck.func;\n\t\n\tvar apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n\t  warn: apiCheck.func,\n\t  'throw': apiCheck.func,\n\t  shape: apiCheck.func\n\t}));\n\t\n\tvar apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\t\n\tvar formlyWrapperType = apiCheck.shape({\n\t  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n\t  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  overwriteOk: apiCheck.bool.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional\n\t}).strict;\n\t\n\tvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\t\n\tvar modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\t\n\tvar templateManipulators = apiCheck.shape({\n\t  preWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n\t  postWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional\n\t}).strict.nullable;\n\t\n\tvar validatorChecker = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\t\n\tvar watcherChecker = apiCheck.typeOrArrayOf(apiCheck.shape({\n\t  expression: formlyExpression.optional,\n\t  listener: formlyExpression.optional,\n\t  runFieldExpressions: apiCheck.bool.optional\n\t}));\n\t\n\tvar fieldOptionsApiShape = {\n\t  $$hashKey: apiCheck.any.optional,\n\t  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  model: modelChecker.optional,\n\t  originalModel: modelChecker.optional,\n\t  className: apiCheck.string.optional,\n\t  id: apiCheck.string.optional,\n\t  name: apiCheck.string.optional,\n\t  expressionProperties: expressionProperties.optional,\n\t  extras: apiCheck.shape({\n\t    validateOnModelChange: apiCheck.bool.optional,\n\t    skipNgModelAttrsManipulator: apiCheck.oneOfType([apiCheck.string, apiCheck.bool]).optional\n\t  }).strict.optional,\n\t  data: apiCheck.object.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  modelOptions: apiCheck.shape({\n\t    updateOn: apiCheck.string.optional,\n\t    debounce: apiCheck.oneOfType([apiCheck.objectOf(apiCheck.number), apiCheck.number]).optional,\n\t    allowInvalid: apiCheck.bool.optional,\n\t    getterSetter: apiCheck.bool.optional,\n\t    timezone: apiCheck.string.optional\n\t  }).optional,\n\t  watcher: watcherChecker.optional,\n\t  validators: validatorChecker.optional,\n\t  asyncValidators: validatorChecker.optional,\n\t  parsers: apiCheck.arrayOf(formlyExpression).optional,\n\t  formatters: apiCheck.arrayOf(formlyExpression).optional,\n\t  noFormControl: apiCheck.bool.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  ngModelElAttrs: apiCheck.objectOf(apiCheck.string).optional,\n\t  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t    statement: apiCheck.shape.ifNot(['value', 'attribute', 'bound', 'boolean'], apiCheck.any).optional,\n\t    value: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    attribute: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    bound: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n\t    boolean: apiCheck.shape.ifNot('statement', apiCheck.any).optional\n\t  }).strict).optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n\t  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  link: apiCheck.func.optional,\n\t  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t  validation: apiCheck.shape({\n\t    show: apiCheck.bool.nullable.optional,\n\t    messages: apiCheck.objectOf(formlyExpression).optional,\n\t    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t  }).optional,\n\t  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n\t  value: apiCheck.func.optional,\n\t  runExpressions: apiCheck.func.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  initialValue: apiCheck.any.optional,\n\t  defaultValue: apiCheck.any.optional\n\t};\n\t\n\tvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\t\n\tvar formOptionsApi = apiCheck.shape({\n\t  formState: apiCheck.object.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  removeChromeAutoComplete: apiCheck.bool.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  manualModelWatcher: apiCheck.oneOfType([apiCheck.bool, apiCheck.func]).optional,\n\t  watchAllExpressions: apiCheck.bool.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  fieldTransform: apiCheck.oneOfType([apiCheck.func, apiCheck.array]).optional,\n\t  data: apiCheck.object.optional\n\t}).strict;\n\t\n\tvar fieldGroup = apiCheck.shape({\n\t  $$hashKey: apiCheck.any.optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  // danger. Nested field groups wont get api-checked...\n\t  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n\t  className: apiCheck.string.optional,\n\t  options: formOptionsApi.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  watcher: watcherChecker.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  data: apiCheck.object.optional,\n\t  model: modelChecker.optional,\n\t  form: apiCheck.object.optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n\t}).strict;\n\t\n\tvar typeOptionsDefaultOptions = _angularFix2['default'].copy(fieldOptionsApiShape);\n\ttypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\t\n\tvar formlyTypeOptions = apiCheck.shape({\n\t  name: apiCheck.string,\n\t  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t  link: apiCheck.func.optional,\n\t  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t  'extends': apiCheck.string.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  data: apiCheck.object.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional,\n\t  overwriteOk: apiCheck.bool.optional\n\t}).strict;\n\t\n\t_angularFix2['default'].extend(apiCheck, {\n\t  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n\t});\n\t\n\texports['default'] = apiCheck;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyErrorAndWarningsUrlPrefix\", \"formlyApiCheck\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _otherUtils = __webpack_require__(2);\n\t\n\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\t\n\texports['default'] = formlyConfig;\n\t\n\t// @ngInject\n\tfunction formlyConfig(formlyUsabilityProvider, formlyErrorAndWarningsUrlPrefix, formlyApiCheck) {\n\t  var _this2 = this;\n\t\n\t  var typeMap = {};\n\t  var templateWrappersMap = {};\n\t  var defaultWrapperName = 'default';\n\t  var _this = this;\n\t  var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t  _angularFix2['default'].extend(this, {\n\t    setType: setType,\n\t    getType: getType,\n\t    getTypes: getTypes,\n\t    getTypeHeritage: getTypeHeritage,\n\t    setWrapper: setWrapper,\n\t    getWrapper: getWrapper,\n\t    getWrapperByType: getWrapperByType,\n\t    removeWrapperByName: removeWrapperByName,\n\t    removeWrappersForType: removeWrappersForType,\n\t    disableWarnings: false,\n\t    extras: {\n\t      disableNgModelAttrsManipulator: false,\n\t      fieldTransform: [],\n\t      ngModelAttrsManipulatorPreferUnbound: false,\n\t      removeChromeAutoComplete: false,\n\t      defaultHideDirective: 'ng-if',\n\t      getFieldId: null\n\t    },\n\t    templateManipulators: {\n\t      preWrapper: [],\n\t      postWrapper: []\n\t    },\n\t    $get: function $get() {\n\t      return _this2;\n\t    }\n\t  });\n\t\n\t  function setType(options) {\n\t    if (_angularFix2['default'].isArray(options)) {\n\t      var _ret = (function () {\n\t        var allTypes = [];\n\t        _angularFix2['default'].forEach(options, function (item) {\n\t          allTypes.push(setType(item));\n\t        });\n\t        return {\n\t          v: allTypes\n\t        };\n\t      })();\n\t\n\t      if (typeof _ret === 'object') return _ret.v;\n\t    } else if (_angularFix2['default'].isObject(options)) {\n\t      checkType(options);\n\t      if (options['extends']) {\n\t        extendTypeOptions(options);\n\t      }\n\t      typeMap[options.name] = options;\n\t      return typeMap[options.name];\n\t    } else {\n\t      throw getError('You must provide an object or array for setType. You provided: ' + JSON.stringify(arguments));\n\t    }\n\t  }\n\t\n\t  function checkType(options) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyTypeOptions, options, {\n\t      prefix: 'formlyConfig.setType',\n\t      url: 'settype-validation-failed'\n\t    });\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, typeMap, options, 'types');\n\t    } else {\n\t      options.overwriteOk = undefined;\n\t    }\n\t  }\n\t\n\t  function extendTypeOptions(options) {\n\t    var extendsType = getType(options['extends'], true, options);\n\t    extendTypeControllerFunction(options, extendsType);\n\t    extendTypeLinkFunction(options, extendsType);\n\t    extendTypeDefaultOptions(options, extendsType);\n\t    _otherUtils2['default'].reverseDeepMerge(options, extendsType);\n\t    extendTemplate(options, extendsType);\n\t  }\n\t\n\t  function extendTemplate(options, extendsType) {\n\t    if (options.template && extendsType.templateUrl) {\n\t      delete options.templateUrl;\n\t    } else if (options.templateUrl && extendsType.template) {\n\t      delete options.template;\n\t    }\n\t  }\n\t\n\t  function extendTypeControllerFunction(options, extendsType) {\n\t    var extendsCtrl = extendsType.controller;\n\t    if (!_angularFix2['default'].isDefined(extendsCtrl)) {\n\t      return;\n\t    }\n\t    var optionsCtrl = options.controller;\n\t    if (_angularFix2['default'].isDefined(optionsCtrl)) {\n\t      options.controller = function ($scope, $controller) {\n\t        $controller(extendsCtrl, { $scope: $scope });\n\t        $controller(optionsCtrl, { $scope: $scope });\n\t      };\n\t      options.controller.$inject = ['$scope', '$controller'];\n\t    } else {\n\t      options.controller = extendsCtrl;\n\t    }\n\t  }\n\t\n\t  function extendTypeLinkFunction(options, extendsType) {\n\t    var extendsFn = extendsType.link;\n\t    if (!_angularFix2['default'].isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.link;\n\t    if (_angularFix2['default'].isDefined(optionsFn)) {\n\t      options.link = function () {\n\t        extendsFn.apply(undefined, arguments);\n\t        optionsFn.apply(undefined, arguments);\n\t      };\n\t    } else {\n\t      options.link = extendsFn;\n\t    }\n\t  }\n\t\n\t  function extendTypeDefaultOptions(options, extendsType) {\n\t    var extendsDO = extendsType.defaultOptions;\n\t    if (!_angularFix2['default'].isDefined(extendsDO)) {\n\t      return;\n\t    }\n\t    var optionsDO = options.defaultOptions || {};\n\t    var optionsDOIsFn = _angularFix2['default'].isFunction(optionsDO);\n\t    var extendsDOIsFn = _angularFix2['default'].isFunction(extendsDO);\n\t    if (extendsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts, scope) {\n\t        var extendsDefaultOptions = extendsDO(opts, scope);\n\t        var mergedDefaultOptions = {};\n\t        _otherUtils2['default'].reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n\t        var extenderOptionsDefaultOptions = optionsDO;\n\t        if (optionsDOIsFn) {\n\t          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions, scope);\n\t        }\n\t        _otherUtils2['default'].reverseDeepMerge(extenderOptionsDefaultOptions, extendsDefaultOptions);\n\t        return extenderOptionsDefaultOptions;\n\t      };\n\t    } else if (optionsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts, scope) {\n\t        var newDefaultOptions = {};\n\t        _otherUtils2['default'].reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n\t        return optionsDO(newDefaultOptions, scope);\n\t      };\n\t    }\n\t  }\n\t\n\t  function getType(name, throwError, errorContext) {\n\t    if (!name) {\n\t      return undefined;\n\t    }\n\t    var type = typeMap[name];\n\t    if (!type && throwError === true) {\n\t      throw getError('There is no type by the name of \"' + name + '\": ' + JSON.stringify(errorContext));\n\t    } else {\n\t      return type;\n\t    }\n\t  }\n\t\n\t  function getTypes() {\n\t    return typeMap;\n\t  }\n\t\n\t  function getTypeHeritage(parent) {\n\t    var heritage = [];\n\t    var type = parent;\n\t    if (_angularFix2['default'].isString(type)) {\n\t      type = getType(parent);\n\t    }\n\t    parent = type['extends'];\n\t    while (parent) {\n\t      type = getType(parent);\n\t      heritage.push(type);\n\t      parent = type['extends'];\n\t    }\n\t    return heritage;\n\t  }\n\t\n\t  function setWrapper(_x, _x2) {\n\t    var _again = true;\n\t\n\t    _function: while (_again) {\n\t      var options = _x,\n\t          name = _x2;\n\t      _again = false;\n\t\n\t      if (_angularFix2['default'].isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (_angularFix2['default'].isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (_angularFix2['default'].isString(options)) {\n\t        _x = {\n\t          template: options,\n\t          name: name\n\t        };\n\t        _x2 = undefined;\n\t        _again = true;\n\t        continue _function;\n\t      }\n\t    }\n\t  }\n\t\n\t  function getOptionsTypes(options) {\n\t    if (_angularFix2['default'].isString(options.types)) {\n\t      return [options.types];\n\t    }\n\t    if (!_angularFix2['default'].isDefined(options.types)) {\n\t      return [];\n\t    } else {\n\t      return options.types;\n\t    }\n\t  }\n\t\n\t  function getOptionsName(options, name) {\n\t    return options.name || name || options.types.join(' ') || defaultWrapperName;\n\t  }\n\t\n\t  function checkWrapperAPI(options) {\n\t    formlyUsabilityProvider.checkWrapper(options);\n\t    if (options.template) {\n\t      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t    }\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n\t    } else {\n\t      delete options.overwriteOk;\n\t    }\n\t    checkWrapperTypes(options);\n\t  }\n\t\n\t  function checkWrapperTypes(options) {\n\t    var shouldThrow = !_angularFix2['default'].isArray(options.types) || !options.types.every(_angularFix2['default'].isString);\n\t    if (shouldThrow) {\n\t      throw getError('Attempted to create a template wrapper with types that is not a string or an array of strings');\n\t    }\n\t  }\n\t\n\t  function checkOverwrite(property, object, newValue, objectName) {\n\t    if (object.hasOwnProperty(property)) {\n\t      warn('overwriting-types-or-wrappers', ['Attempting to overwrite ' + property + ' on ' + objectName + ' which is currently', JSON.stringify(object[property]) + ' with ' + JSON.stringify(newValue), 'To supress this warning, specify the property \"overwriteOk: true\"'].join(' '));\n\t    }\n\t  }\n\t\n\t  function getWrapper(name) {\n\t    return templateWrappersMap[name || defaultWrapperName];\n\t  }\n\t\n\t  function getWrapperByType(type) {\n\t    /* eslint prefer-const:0 */\n\t    var wrappers = [];\n\t    for (var _name in templateWrappersMap) {\n\t      if (templateWrappersMap.hasOwnProperty(_name)) {\n\t        if (templateWrappersMap[_name].types && templateWrappersMap[_name].types.indexOf(type) !== -1) {\n\t          wrappers.push(templateWrappersMap[_name]);\n\t        }\n\t      }\n\t    }\n\t    return wrappers;\n\t  }\n\t\n\t  function removeWrapperByName(name) {\n\t    var wrapper = templateWrappersMap[name];\n\t    delete templateWrappersMap[name];\n\t    return wrapper;\n\t  }\n\t\n\t  function removeWrappersForType(type) {\n\t    var wrappers = getWrapperByType(type);\n\t    if (!wrappers) {\n\t      return undefined;\n\t    }\n\t    if (!_angularFix2['default'].isArray(wrappers)) {\n\t      return removeWrapperByName(wrappers.name);\n\t    } else {\n\t      wrappers.forEach(function (wrapper) {\n\t        return removeWrapperByName(wrapper.name);\n\t      });\n\t      return wrappers;\n\t    }\n\t  }\n\t\n\t  function warn() {\n\t    if (!_this.disableWarnings && console.warn) {\n\t      /* eslint no-console:0 */\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift('Formly Warning:');\n\t      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n\t      console.warn.apply(console, _toConsumableArray(args));\n\t    }\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tformlyUsability.$inject = [\"formlyApiCheck\", \"formlyErrorAndWarningsUrlPrefix\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = formlyUsability;\n\t\n\t// @ngInject\n\tfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n\t  var _this = this;\n\t\n\t  _angularFix2['default'].extend(this, {\n\t    getFormlyError: getFormlyError,\n\t    getFieldError: getFieldError,\n\t    checkWrapper: checkWrapper,\n\t    checkWrapperTemplate: checkWrapperTemplate,\n\t    getErrorMessage: getErrorMessage,\n\t    $get: function $get() {\n\t      return _this;\n\t    }\n\t  });\n\t\n\t  function getFieldError(errorInfoSlug, message, field) {\n\t    if (arguments.length < 3) {\n\t      field = message;\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message) + (' Field definition: ' + _angularFix2['default'].toJson(field)));\n\t  }\n\t\n\t  function getFormlyError(errorInfoSlug, message) {\n\t    if (!message) {\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message));\n\t  }\n\t\n\t  function getErrorMessage(errorInfoSlug, message) {\n\t    var url = '';\n\t    if (errorInfoSlug !== null) {\n\t      url = '' + formlyErrorAndWarningsUrlPrefix + errorInfoSlug;\n\t    }\n\t    return 'Formly Error: ' + message + '. ' + url;\n\t  }\n\t\n\t  function checkWrapper(wrapper) {\n\t    formlyApiCheck['throw'](formlyApiCheck.formlyWrapperType, wrapper, {\n\t      prefix: 'formlyConfig.setWrapper',\n\t      urlSuffix: 'setwrapper-validation-failed'\n\t    });\n\t  }\n\t\n\t  function checkWrapperTemplate(template, additionalInfo) {\n\t    var formlyTransclude = '<formly-transclude></formly-transclude>';\n\t    if (template.indexOf(formlyTransclude) === -1) {\n\t      throw getFormlyError('Template wrapper templates must use \"' + formlyTransclude + '\" somewhere in them. ' + ('This one does not have \"<formly-transclude></formly-transclude>\" in it: ' + template) + '\\n' + ('Additional information: ' + JSON.stringify(additionalInfo)));\n\t    }\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\texports['default'] = formlyValidationMessages;\n\t\n\t// @ngInject\n\tfunction formlyValidationMessages() {\n\t\n\t  var validationMessages = {\n\t    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t    addStringMessage: addStringMessage,\n\t    messages: {}\n\t  };\n\t\n\t  return validationMessages;\n\t\n\t  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t  }\n\t\n\t  function addStringMessage(name, string) {\n\t    validationMessages.messages[name] = function () {\n\t      return string;\n\t    };\n\t  }\n\t\n\t  function templateOptionValue(prop, prefix, suffix, alternate) {\n\t    return function getValidationMessage(viewValue, modelValue, scope) {\n\t      if (typeof scope.options.templateOptions[prop] !== 'undefined') {\n\t        return prefix + ' ' + scope.options.templateOptions[prop] + ' ' + suffix;\n\t      } else {\n\t        return alternate;\n\t      }\n\t    };\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\taddCustomTags.$inject = [\"$document\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\texports['default'] = addCustomTags;\n\t\n\t// @ngInject\n\tfunction addCustomTags($document) {\n\t  // IE8 check ->\n\t  // https://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx\n\t  if ($document && $document.documentMode < 9) {\n\t    (function () {\n\t      var document = $document.get(0);\n\t      // add the custom elements that we need for formly\n\t      var customElements = ['formly-field', 'formly-form'];\n\t      _angularFix2['default'].forEach(customElements, function (el) {\n\t        document.createElement(el);\n\t      });\n\t    })();\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\taddFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\", \"$interpolate\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _angularFix = __webpack_require__(1);\n\t\n\tvar _angularFix2 = _interopRequireDefault(_angularFix);\n\t\n\tvar _otherUtils = __webpack_require__(2);\n\t\n\texports['default'] = addFormlyNgModelAttrsManipulator;\n\t\n\t// @ngInject\n\tfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n\t  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t    return;\n\t  }\n\t  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t\n\t  function ngModelAttrsManipulator(template, options, scope) {\n\t    var node = document.createElement('div');\n\t    var skip = options.extras && options.extras.skipNgModelAttrsManipulator;\n\t    if (skip === true) {\n\t      return template;\n\t    }\n\t    node.innerHTML = template;\n\t\n\t    var modelNodes = getNgModelNodes(node, skip);\n\t    if (!modelNodes || !modelNodes.length) {\n\t      return template;\n\t    }\n\t\n\t    addIfNotPresent(modelNodes, 'id', scope.id);\n\t    addIfNotPresent(modelNodes, 'name', scope.name || scope.id);\n\t\n\t    addValidation();\n\t    alterNgModelAttr();\n\t    addModelOptions();\n\t    addTemplateOptionsAttrs();\n\t    addNgModelElAttrs();\n\t\n\t    return node.innerHTML;\n\t\n\t    function addValidation() {\n\t      if (_angularFix2['default'].isDefined(options.validators) || _angularFix2['default'].isDefined(options.validation.messages)) {\n\t        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n\t      }\n\t    }\n\t\n\t    function alterNgModelAttr() {\n\t      if (isPropertyAccessor(options.key)) {\n\t        addRegardlessOfPresence(modelNodes, 'ng-model', 'model.' + options.key);\n\t      }\n\t    }\n\t\n\t    function addModelOptions() {\n\t      if (_angularFix2['default'].isDefined(options.modelOptions)) {\n\t        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n\t        if (options.modelOptions.getterSetter) {\n\t          addRegardlessOfPresence(modelNodes, 'ng-model', 'options.value');\n\t        }\n\t      }\n\t    }\n\t\n\t    function addTemplateOptionsAttrs() {\n\t      if (!options.templateOptions && !options.expressionProperties) {\n\t        // no need to run these if there are no templateOptions or expressionProperties\n\t        return;\n\t      }\n\t      var to = options.templateOptions || {};\n\t      var ep = options.expressionProperties || {};\n\t\n\t      var ngModelAttributes = getBuiltInAttributes();\n\t\n\t      // extend with the user's specifications winning\n\t      _angularFix2['default'].extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t      // Feel free to make this more simple :-)\n\t      _angularFix2['default'].forEach(ngModelAttributes, function (val, name) {\n\t        /* eslint complexity:[2, 14] */\n\t        var attrVal = undefined,\n\t            attrName = undefined;\n\t        var ref = 'options.templateOptions[\\'' + name + '\\']';\n\t        var toVal = to[name];\n\t        var epVal = getEpValue(ep, name);\n\t\n\t        var inTo = _angularFix2['default'].isDefined(toVal);\n\t        var inEp = _angularFix2['default'].isDefined(epVal);\n\t        if (val.value) {\n\t          // I realize this looks backwards, but it's right, trust me...\n\t          attrName = val.value;\n\t          attrVal = name;\n\t        } else if (val.statement && inTo) {\n\t          attrName = val.statement;\n\t          if (_angularFix2['default'].isString(to[name])) {\n\t            attrVal = '$eval(' + ref + ')';\n\t          } else if (_angularFix2['default'].isFunction(to[name])) {\n\t            attrVal = ref + '(model[options.key], options, this, $event)';\n\t          } else {\n\t            throw new Error('options.templateOptions.' + name + ' must be a string or function: ' + JSON.stringify(options));\n\t          }\n\t        } else if (val.bound && inEp) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        } else if ((val.attribute || val.boolean) && inEp) {\n\t          attrName = val.attribute || val.boolean;\n\t          attrVal = '' + $interpolate.startSymbol() + ref + $interpolate.endSymbol();\n\t        } else if (val.attribute && inTo) {\n\t          attrName = val.attribute;\n\t          attrVal = toVal;\n\t        } else if (val.boolean) {\n\t          if (inTo && !inEp && toVal) {\n\t            attrName = val.boolean;\n\t            attrVal = true;\n\t          } else {\n\t            /* eslint no-empty:0 */\n\t            // empty to illustrate that a boolean will not be added via val.bound\n\t            // if you want it added via val.bound, then put it in expressionProperties\n\t          }\n\t        } else if (val.bound && inTo) {\n\t            attrName = val.bound;\n\t            attrVal = ref;\n\t          }\n\t\n\t        if (_angularFix2['default'].isDefined(attrName) && _angularFix2['default'].isDefined(attrVal)) {\n\t          addIfNotPresent(modelNodes, attrName, attrVal);\n\t        }\n\t      });\n\t    }\n\t\n\t    function addNgModelElAttrs() {\n\t      _angularFix2['default'].forEach(options.ngModelElAttrs, function (val, name) {\n\t        addRegardlessOfPresence(modelNodes, name, val);\n\t      });\n\t    }\n\t  }\n\t\n\t  // Utility functions\n\t  function getNgModelNodes(node, skip) {\n\t    var selectorNot = _angularFix2['default'].isString(skip) ? ':not(' + skip + ')' : '';\n\t    var skipNot = ':not([formly-skip-ng-model-attrs-manipulator])';\n\t    var query = '[ng-model]' + selectorNot + skipNot + ', [data-ng-model]' + selectorNot + skipNot;\n\t    try {\n\t      return node.querySelectorAll(query);\n\t    } catch (e) {\n\t      //this code is needed for IE8, as it does not support the CSS3 ':not' selector\n\t      //it should be removed when IE8 support is dropped\n\t      return getNgModelNodesFallback(node, skip);\n\t    }\n\t  }\n\t\n\t  function getNgModelNodesFallback(node, skip) {\n\t    var allNgModelNodes = node.querySelectorAll('[ng-model], [data-ng-model]');\n\t    var matchingNgModelNodes = [];\n\t\n\t    //make sure this array is compatible with NodeList type by adding an 'item' function\n\t    matchingNgModelNodes.item = function (i) {\n\t      return this[i];\n\t    };\n\t\n\t    for (var i = 0; i < allNgModelNodes.length; i++) {\n\t      var ngModelNode = allNgModelNodes[i];\n\t      if (!ngModelNode.hasAttribute('formly-skip-ng-model-attrs-manipulator') && !(_angularFix2['default'].isString(skip) && nodeMatches(ngModelNode, skip))) {\n\t        matchingNgModelNodes.push(ngModelNode);\n\t      }\n\t    }\n\t\n\t    return matchingNgModelNodes;\n\t  }\n\t\n\t  function nodeMatches(node, selector) {\n\t    var div = document.createElement('div');\n\t    div.innerHTML = node.outerHTML;\n\t    return div.querySelector(selector);\n\t  }\n\t\n\t  function getBuiltInAttributes() {\n\t    var ngModelAttributes = {\n\t      focus: {\n\t        attribute: 'formly-focus'\n\t      }\n\t    };\n\t    var boundOnly = [];\n\t    var bothBooleanAndBound = ['required', 'disabled'];\n\t    var bothAttributeAndBound = ['pattern', 'minlength'];\n\t    var statementOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n\t    var attributeOnly = ['placeholder', 'min', 'max', 'step', 'tabindex', 'type'];\n\t    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n\t      bothAttributeAndBound.push('maxlength');\n\t    } else {\n\t      boundOnly.push('maxlength');\n\t    }\n\t\n\t    _angularFix2['default'].forEach(boundOnly, function (item) {\n\t      ngModelAttributes[item] = { bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(bothBooleanAndBound, function (item) {\n\t      ngModelAttributes[item] = { boolean: item, bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(bothAttributeAndBound, function (item) {\n\t      ngModelAttributes[item] = { attribute: item, bound: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(statementOnly, function (item) {\n\t      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t      ngModelAttributes[propName] = { statement: 'ng-' + item };\n\t    });\n\t\n\t    _angularFix2['default'].forEach(attributeOnly, function (item) {\n\t      ngModelAttributes[item] = { attribute: item };\n\t    });\n\t    return ngModelAttributes;\n\t  }\n\t\n\t  function getEpValue(ep, name) {\n\t    return ep['templateOptions.' + name] || ep['templateOptions[\\'' + name + '\\']'] || ep['templateOptions[\"' + name + '\"]'];\n\t  }\n\t\n\t  function addIfNotPresent(nodes, attr, val) {\n\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t      if (!node.getAttribute(attr)) {\n\t        node.setAttribute(attr, val);\n\t      }\n\t    });\n\t  }\n\t\n\t  function addRegardlessOfPresence(nodes, attr, val) {\n\t    _angularFix2['default'].forEach(nodes, function (node) {\n\t      node.setAttribute(attr, val);\n\t    });\n\t  }\n\t\n\t  function isPropertyAccessor(key) {\n\t    return (0, _otherUtils.contains)(key, '.') || (0, _otherUtils.contains)(key, '[') && (0, _otherUtils.contains)(key, ']');\n\t  }\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _otherUtils = __webpack_require__(2);\n\t\n\tvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\t\n\texports['default'] = formlyUtil;\n\t\n\t// @ngInject\n\tfunction formlyUtil() {\n\t  return _otherUtils2['default'];\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tformlyWarn.$inject = [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\"];\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\t\n\texports['default'] = formlyWarn;\n\t\n\t// @ngInject\n\tfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t  return function warn() {\n\t    if (!formlyConfig.disableWarnings) {\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift('Formly Warning:');\n\t      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n\t      $log.warn.apply($log, _toConsumableArray(args));\n\t    }\n\t  };\n\t}\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** dist/formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 5e78927df9b823f08754\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _indexCommon = require('./index.common');\n\nvar _indexCommon2 = _interopRequireDefault(_indexCommon);\n\nexports['default'] = _indexCommon2['default'];\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./index.js\n **/","import index from './index.common'\nexport default index\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./index.js\n **/","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar angular = require('angular');\n\n/* istanbul ignore next */\nif (!angular.version) {\n  angular = window.angular;\n}\nexports['default'] = angular;\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./angular-fix/index.js\n **/","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nlet angular = require('angular')\n\n/* istanbul ignore next */\nif (!angular.version) {\n  angular = window.angular\n}\nexport default angular\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./angular-fix/index.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = {\n  containsSelector: containsSelector, containsSpecialChar: containsSpecialChar, formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName,\n  arrayify: arrayify, extendFunction: extendFunction, extendArray: extendArray, startsWith: startsWith, contains: contains\n};\n\nfunction containsSelector(string) {\n  return containsSpecialChar(string, '.') || containsSpecialChar(string, '[') && containsSpecialChar(string, ']');\n}\n\nfunction containsSpecialChar(a, b) {\n  if (!a || !a.indexOf) {\n    return false;\n  }\n  return a.indexOf(b) !== -1;\n}\n\nfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n  if (_angularFix2['default'].isFunction(expression)) {\n    return expression($viewValue, $modelValue, scope, extraLocals);\n  } else {\n    return scope.$eval(expression, _angularFix2['default'].extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  if (options.id) {\n    return options.id;\n  }\n  var type = options.type;\n  if (!type && options.template) {\n    type = 'template';\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl';\n  }\n\n  return [formId, type, options.key, index].join('_');\n}\n\nfunction reverseDeepMerge(dest) {\n  _angularFix2['default'].forEach(arguments, function (src, index) {\n    if (!index) {\n      return;\n    }\n    _angularFix2['default'].forEach(src, function (val, prop) {\n      if (!_angularFix2['default'].isDefined(dest[prop])) {\n        dest[prop] = _angularFix2['default'].copy(val);\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val);\n      }\n    });\n  });\n  return dest;\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return _angularFix2['default'].isObject(obj1) && _angularFix2['default'].isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\n// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) {\n    // not a jQuery or jqLite object -> wrap it\n    el = _angularFix2['default'].element(el);\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el;\n  }\n\n  var c = el.children();\n  for (var i = 0; c && i < c.length; i++) {\n    var node = findByNodeName(c[i], nodeName);\n    if (node) {\n      return node;\n    }\n  }\n}\n\nfunction arrayify(obj) {\n  if (obj && !_angularFix2['default'].isArray(obj)) {\n    obj = [obj];\n  } else if (!obj) {\n    obj = [];\n  }\n  return obj;\n}\n\nfunction extendFunction() {\n  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return function extendedFunction() {\n    var args = arguments;\n    fns.forEach(function (fn) {\n      return fn.apply(null, args);\n    });\n  };\n}\n\nfunction extendArray(primary, secondary, property) {\n  if (property) {\n    primary = primary[property];\n    secondary = secondary[property];\n  }\n  if (secondary && primary) {\n    _angularFix2['default'].forEach(secondary, function (item) {\n      if (primary.indexOf(item) === -1) {\n        primary.push(item);\n      }\n    });\n    return primary;\n  } else if (secondary) {\n    return secondary;\n  } else {\n    return primary;\n  }\n}\n\nfunction startsWith(str, search) {\n  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n    return str.length >= search.length && str.substring(0, search.length) === search;\n  } else {\n    return false;\n  }\n}\n\nfunction contains(str, search) {\n  if (_angularFix2['default'].isString(str) && _angularFix2['default'].isString(search)) {\n    return str.length >= search.length && str.indexOf(search) !== -1;\n  } else {\n    return false;\n  }\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./other/utils.js\n **/","import angular from 'angular-fix'\n\nexport default {\n  containsSelector, containsSpecialChar, formlyEval, getFieldId, reverseDeepMerge, findByNodeName,\n  arrayify, extendFunction, extendArray, startsWith, contains,\n}\n\nfunction containsSelector(string) {\n  return containsSpecialChar(string, '.') || (containsSpecialChar(string, '[') && containsSpecialChar(string, ']'))\n}\n\nfunction containsSpecialChar(a, b) {\n  if (!a || !a.indexOf) {\n    return false\n  }\n  return a.indexOf(b) !== -1\n}\n\n\nfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n  if (angular.isFunction(expression)) {\n    return expression($viewValue, $modelValue, scope, extraLocals)\n  } else {\n    return scope.$eval(expression, angular.extend({$viewValue, $modelValue}, extraLocals))\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  if (options.id) {\n    return options.id\n  }\n  let type = options.type\n  if (!type && options.template) {\n    type = 'template'\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl'\n  }\n\n  return [formId, type, options.key, index].join('_')\n}\n\n\nfunction reverseDeepMerge(dest) {\n  angular.forEach(arguments, (src, index) => {\n    if (!index) {\n      return\n    }\n    angular.forEach(src, (val, prop) => {\n      if (!angular.isDefined(dest[prop])) {\n        dest[prop] = angular.copy(val)\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val)\n      }\n    })\n  })\n  return dest\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return angular.isObject(obj1) && angular.isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n}\n\n// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) { // not a jQuery or jqLite object -> wrap it\n    el = angular.element(el)\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el\n  }\n\n  const c = el.children()\n  for (let i = 0; c && i < c.length; i++) {\n    const node = findByNodeName(c[i], nodeName)\n    if (node) {\n      return node\n    }\n  }\n}\n\n\nfunction arrayify(obj) {\n  if (obj && !angular.isArray(obj)) {\n    obj = [obj]\n  } else if (!obj) {\n    obj = []\n  }\n  return obj\n}\n\n\nfunction extendFunction(...fns) {\n  return function extendedFunction() {\n    const args = arguments\n    fns.forEach(fn => fn.apply(null, args))\n  }\n}\n\nfunction extendArray(primary, secondary, property) {\n  if (property) {\n    primary = primary[property]\n    secondary = secondary[property]\n  }\n  if (secondary && primary) {\n    angular.forEach(secondary, function(item) {\n      if (primary.indexOf(item) === -1) {\n        primary.push(item)\n      }\n    })\n    return primary\n  } else if (secondary) {\n    return secondary\n  } else {\n    return primary\n  }\n}\n\nfunction startsWith(str, search) {\n  if (angular.isString(str) && angular.isString(search)) {\n    return str.length >= search.length && str.substring(0, search.length) === search\n  } else {\n    return false\n  }\n}\n\nfunction contains(str, search) {\n  if (angular.isString(str) && angular.isString(search)) {\n    return str.length >= search.length && str.indexOf(search) !== -1\n  } else {\n    return false\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./other/utils.js\n **/","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = \"https://github.com/formly-js/angular-formly/blob/\" + VERSION + \"/other/ERRORS_AND_WARNINGS.md#\";\nmodule.exports = exports[\"default\"];\n\n\n/** WEBPACK FOOTER **\n ** ./other/docsBaseUrl.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = formlyCustomValidation;\n\n// @ngInject\nfunction formlyCustomValidation(formlyUtil) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n      var opts = scope.options;\n      opts.validation.messages = opts.validation.messages || {};\n      _angularFix2['default'].forEach(opts.validation.messages, function (message, key) {\n        opts.validation.messages[key] = function () {\n          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n        };\n      });\n\n      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n      _angularFix2['default'].forEach(opts.validators, _angularFix2['default'].bind(null, addValidatorToPipeline, false));\n      _angularFix2['default'].forEach(opts.asyncValidators, _angularFix2['default'].bind(null, addValidatorToPipeline, true));\n\n      function addValidatorToPipeline(isAsync, validator, name) {\n        setupMessage(validator, name);\n        validator = _angularFix2['default'].isObject(validator) ? validator.expression : validator;\n        if (useNewValidatorsApi) {\n          setupWithValidators(validator, name, isAsync);\n        } else {\n          setupWithParsers(validator, name, isAsync);\n        }\n      }\n\n      function setupMessage(validator, name) {\n        var message = validator.message;\n        if (message) {\n          opts.validation.messages[name] = function () {\n            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n          };\n        }\n      }\n\n      function setupWithValidators(validator, name, isAsync) {\n        var validatorCollection = isAsync ? '$asyncValidators' : '$validators';\n\n        ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n          return formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n        };\n      }\n\n      function setupWithParsers(validator, name, isAsync) {\n        var inFlightValidator = undefined;\n        ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n          var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n          if (isAsync) {\n            ctrl.$pending = ctrl.$pending || {};\n            ctrl.$pending[name] = true;\n            inFlightValidator = isValid;\n            isValid.then(function () {\n              if (inFlightValidator === isValid) {\n                ctrl.$setValidity(name, true);\n              }\n            })['catch'](function () {\n              if (inFlightValidator === isValid) {\n                ctrl.$setValidity(name, false);\n              }\n            })['finally'](function () {\n              var $pending = ctrl.$pending || {};\n              if (Object.keys($pending).length === 1) {\n                delete ctrl.$pending;\n              } else {\n                delete ctrl.$pending[name];\n              }\n            });\n          } else {\n            ctrl.$setValidity(name, isValid);\n          }\n          return viewValue;\n        });\n      }\n    }\n  };\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./directives/formly-custom-validation.js\n **/","import angular from 'angular-fix'\nexport default formlyCustomValidation\n\n// @ngInject\nfunction formlyCustomValidation(formlyUtil) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n      const opts = scope.options\n      opts.validation.messages = opts.validation.messages || {}\n      angular.forEach(opts.validation.messages, (message, key) => {\n        opts.validation.messages[key] = () => {\n          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue)\n        }\n      })\n\n\n      const useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers')\n      angular.forEach(opts.validators, angular.bind(null, addValidatorToPipeline, false))\n      angular.forEach(opts.asyncValidators, angular.bind(null, addValidatorToPipeline, true))\n\n      function addValidatorToPipeline(isAsync, validator, name) {\n        setupMessage(validator, name)\n        validator = angular.isObject(validator) ? validator.expression : validator\n        if (useNewValidatorsApi) {\n          setupWithValidators(validator, name, isAsync)\n        } else {\n          setupWithParsers(validator, name, isAsync)\n        }\n      }\n\n      function setupMessage(validator, name) {\n        const message = validator.message\n        if (message) {\n          opts.validation.messages[name] = () => {\n            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue)\n          }\n        }\n      }\n\n      function setupWithValidators(validator, name, isAsync) {\n        const validatorCollection = isAsync ? '$asyncValidators' : '$validators'\n\n        ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n          return formlyUtil.formlyEval(scope, validator, modelValue, viewValue)\n        }\n      }\n\n      function setupWithParsers(validator, name, isAsync) {\n        let inFlightValidator\n        ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n          const isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue)\n          if (isAsync) {\n            ctrl.$pending = ctrl.$pending || {}\n            ctrl.$pending[name] = true\n            inFlightValidator = isValid\n            isValid.then(() => {\n              if (inFlightValidator === isValid) {\n                ctrl.$setValidity(name, true)\n              }\n            }).catch(() => {\n              if (inFlightValidator === isValid) {\n                ctrl.$setValidity(name, false)\n              }\n            }).finally(() => {\n              const $pending = ctrl.$pending || {}\n              if (Object.keys($pending).length === 1) {\n                delete ctrl.$pending\n              } else {\n                delete ctrl.$pending[name]\n              }\n            })\n          } else {\n            ctrl.$setValidity(name, isValid)\n          }\n          return viewValue\n        })\n      }\n    },\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-custom-validation.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _apiCheck = require('api-check');\n\nvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\nexports['default'] = formlyField;\n\n/**\n * @ngdoc directive\n * @name formlyField\n * @restrict AE\n */\n// @ngInject\nfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n  var arrayify = formlyUtil.arrayify;\n\n  return {\n    restrict: 'AE',\n    transclude: true,\n    require: '?^formlyForm',\n    scope: {\n      options: '=',\n      model: '=',\n      originalModel: '=?',\n      formId: '@', // TODO remove formId in a breaking release\n      index: '=?',\n      fields: '=?',\n      formState: '=?',\n      formOptions: '=?',\n      form: '=?' },\n    // TODO require form in a breaking release\n    controller: FormlyFieldController,\n    link: fieldLink\n  };\n\n  // @ngInject\n  function FormlyFieldController($scope, $timeout, $parse, $controller, formlyValidationMessages) {\n    /* eslint max-statements:[2, 34] */\n    if ($scope.options.fieldGroup) {\n      setupFieldGroup();\n      return;\n    }\n\n    var fieldType = getFieldType($scope.options);\n    simplifyLife($scope.options);\n    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n    extendOptionsWithDefaults($scope.options, $scope.index);\n    checkApi($scope.options);\n    // set field id to link labels and fields\n\n    // initalization\n    setFieldIdAndName();\n    setDefaultValue();\n    setInitialValue();\n    runExpressions();\n    watchExpressions();\n    addValidationMessages($scope.options);\n    invokeControllers($scope, $scope.options, fieldType);\n\n    // function definitions\n    function runExpressions() {\n      // must run on next tick to make sure that the current value is correct.\n      return $timeout(function runExpressionsOnNextTick() {\n        var field = $scope.options;\n        var currentValue = valueGetterSetter();\n        _angularFix2['default'].forEach(field.expressionProperties, function runExpression(expression, prop) {\n          var setter = $parse(prop).assign;\n          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue));\n          promise.then(function setFieldValue(value) {\n            setter(field, value);\n          });\n        });\n      }, 0, false);\n    }\n\n    function watchExpressions() {\n      if ($scope.formOptions.watchAllExpressions) {\n        (function () {\n          var field = $scope.options;\n          var currentValue = valueGetterSetter();\n          _angularFix2['default'].forEach(field.expressionProperties, function watchExpression(expression, prop) {\n            var setter = $parse(prop).assign;\n            $scope.$watch(function expressionPropertyWatcher() {\n              return formlyUtil.formlyEval($scope, expression, currentValue, currentValue);\n            }, function expressionPropertyListener(value) {\n              setter(field, value);\n            }, true);\n          });\n        })();\n      }\n    }\n\n    function valueGetterSetter(newVal) {\n      if (!$scope.model || !$scope.options.key) {\n        return undefined;\n      }\n      if (_angularFix2['default'].isDefined(newVal)) {\n        parseSet($scope.options.key, $scope.model, newVal);\n      }\n      return parseGet($scope.options.key, $scope.model);\n    }\n\n    function shouldNotUseParseKey(key) {\n      return _angularFix2['default'].isNumber(key) || !formlyUtil.containsSelector(key);\n    }\n\n    function parseSet(key, model, newVal) {\n      // If either of these are null/undefined then just return undefined\n      if (!key && key !== 0 || !model) {\n        return;\n      }\n      // If we are working with a number then $parse wont work, default back to the old way for now\n      if (shouldNotUseParseKey(key)) {\n        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n        model[key] = newVal;\n      } else {\n        var setter = $parse($scope.options.key).assign;\n        if (setter) {\n          setter($scope.model, newVal);\n        }\n      }\n    }\n\n    function parseGet(key, model) {\n      // If either of these are null/undefined then just return undefined\n      if (!key && key !== 0 || !model) {\n        return undefined;\n      }\n\n      // If we are working with a number then $parse wont work, default back to the old way for now\n      if (shouldNotUseParseKey(key)) {\n        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n        return model[key];\n      } else {\n        return $parse(key)(model);\n      }\n    }\n\n    function simplifyLife(options) {\n      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n      formlyUtil.reverseDeepMerge(options, {\n        originalModel: options.model,\n        extras: {},\n        data: {},\n        templateOptions: {},\n        validation: {}\n      });\n      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n      $scope.to = $scope.options.templateOptions;\n      $scope.formOptions = $scope.formOptions || {};\n    }\n\n    function setFieldIdAndName() {\n      if (_angularFix2['default'].isFunction(formlyConfig.extras.getFieldId)) {\n        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n      } else {\n        var formName = $scope.form && $scope.form.$name || $scope.formId;\n        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n      }\n      $scope.options.id = $scope.id;\n      $scope.name = $scope.options.name || $scope.options.id;\n      $scope.options.name = $scope.name;\n    }\n\n    function setDefaultValue() {\n      if (_angularFix2['default'].isDefined($scope.options.defaultValue) && !_angularFix2['default'].isDefined(parseGet($scope.options.key, $scope.model))) {\n        parseSet($scope.options.key, $scope.model, $scope.options.defaultValue);\n      }\n    }\n\n    function setInitialValue() {\n      $scope.options.initialValue = $scope.model && parseGet($scope.options.key, $scope.model);\n    }\n\n    function mergeFieldOptionsWithTypeDefaults(options, type) {\n      if (type) {\n        mergeOptions(options, type.defaultOptions);\n      }\n      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n      _angularFix2['default'].forEach(properOrder, function (typeName) {\n        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n      });\n    }\n\n    function mergeOptions(options, extraOptions) {\n      if (extraOptions) {\n        if (_angularFix2['default'].isFunction(extraOptions)) {\n          extraOptions = extraOptions(options, $scope);\n        }\n        formlyUtil.reverseDeepMerge(options, extraOptions);\n      }\n    }\n\n    function extendOptionsWithDefaults(options, index) {\n      var key = options.key || index || 0;\n      _angularFix2['default'].extend(options, {\n        // attach the key in case the formly-field directive is used directly\n        key: key,\n        value: options.value || valueGetterSetter,\n        runExpressions: runExpressions,\n        resetModel: resetModel,\n        updateInitialValue: updateInitialValue\n      });\n    }\n\n    function resetModel() {\n      parseSet($scope.options.key, $scope.model, $scope.options.initialValue);\n      if ($scope.options.formControl) {\n        if (_angularFix2['default'].isArray($scope.options.formControl)) {\n          _angularFix2['default'].forEach($scope.options.formControl, function (formControl) {\n            resetFormControl(formControl, true);\n          });\n        } else {\n          resetFormControl($scope.options.formControl);\n        }\n      }\n      if ($scope.form) {\n        $scope.form.$setUntouched && $scope.form.$setUntouched();\n        $scope.form.$setPristine();\n      }\n    }\n\n    function resetFormControl(formControl, isMultiNgModel) {\n      if (!isMultiNgModel) {\n        formControl.$setViewValue(parseGet($scope.options.key, $scope.model));\n      }\n\n      formControl.$render();\n      formControl.$setUntouched && formControl.$setUntouched();\n      formControl.$setPristine();\n\n      // To prevent breaking change requiring a digest to reset $viewModel\n      if (!$scope.$root.$$phase) {\n        $scope.$digest();\n      }\n    }\n\n    function updateInitialValue() {\n      $scope.options.initialValue = parseGet($scope.options.key, $scope.model);\n    }\n\n    function addValidationMessages(options) {\n      options.validation.messages = options.validation.messages || {};\n      _angularFix2['default'].forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n        if (!options.validation.messages[name]) {\n          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n          };\n        }\n      });\n    }\n\n    function invokeControllers(scope) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n      var type = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n      _angularFix2['default'].forEach([type.controller, options.controller], function (controller) {\n        if (controller) {\n          $controller(controller, { $scope: scope });\n        }\n      });\n    }\n\n    function setupFieldGroup() {\n      $scope.options.options = $scope.options.options || {};\n      $scope.options.options.formState = $scope.formState;\n      $scope.to = $scope.options.templateOptions;\n    }\n  }\n\n  // link function\n  function fieldLink(scope, el, attrs, formlyFormCtrl) {\n    if (scope.options.fieldGroup) {\n      setFieldGroupTemplate();\n      return;\n    }\n\n    // watch the field model (if exists) if there is no parent formly-form directive (that would watch it instead)\n    if (!formlyFormCtrl && scope.options.model) {\n      scope.$watch('options.model', function () {\n        return scope.options.runExpressions();\n      }, true);\n    }\n\n    addAttributes();\n    addClasses();\n\n    var type = getFieldType(scope.options);\n    var args = arguments;\n    var thusly = this;\n    var fieldCount = 0;\n    var fieldManipulators = getManipulators(scope.options, scope.formOptions);\n    getFieldTemplate(scope.options).then(runManipulators(fieldManipulators.preWrapper)).then(transcludeInWrappers(scope.options, scope.formOptions)).then(runManipulators(fieldManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)['catch'](function (error) {\n      formlyWarn('there-was-a-problem-setting-the-template-for-this-field', 'There was a problem setting the template for this field ', scope.options, error);\n    });\n\n    function setFieldGroupTemplate() {\n      checkFieldGroupApi(scope.options);\n      el.addClass('formly-field-group');\n      var extraAttributes = '';\n      if (scope.options.elementAttributes) {\n        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n          return key + '=\"' + scope.options.elementAttributes[key] + '\"';\n        }).join(' ');\n      }\n      var modelValue = 'model';\n      scope.options.form = scope.form;\n      if (scope.options.key) {\n        modelValue = 'model[\\'' + scope.options.key + '\\']';\n      }\n      getTemplate('\\n          <formly-form model=\"' + modelValue + '\"\\n                       fields=\"options.fieldGroup\"\\n                       options=\"options.options\"\\n                       form=\"options.form\"\\n                       class=\"' + scope.options.className + '\"\\n                       ' + extraAttributes + '\\n                       is-field-group>\\n          </formly-form>\\n        ').then(transcludeInWrappers(scope.options, scope.formOptions)).then(setElementTemplate);\n    }\n\n    function addAttributes() {\n      if (scope.options.elementAttributes) {\n        el.attr(scope.options.elementAttributes);\n      }\n    }\n\n    function addClasses() {\n      if (scope.options.className) {\n        el.addClass(scope.options.className);\n      }\n      if (scope.options.type) {\n        el.addClass('formly-field-' + scope.options.type);\n      }\n    }\n\n    function setElementTemplate(templateString) {\n      el.html(asHtml(templateString));\n      $compile(el.contents())(scope);\n      return templateString;\n    }\n\n    function watchFormControl(templateString) {\n      var stopWatchingShowError = _angularFix2['default'].noop;\n      if (scope.options.noFormControl) {\n        return;\n      }\n      var templateEl = _angularFix2['default'].element('<div>' + templateString + '</div>');\n      var ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\n      if (ngModelNodes.length) {\n        _angularFix2['default'].forEach(ngModelNodes, function (ngModelNode) {\n          fieldCount++;\n          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n        });\n      }\n\n      function watchFieldNameOrExistence(name) {\n        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n        var nameExpression = nameExpressionRegex.exec(name);\n        if (nameExpression) {\n          name = $interpolate(name)(scope);\n        }\n        watchFieldExistence(name);\n      }\n\n      function watchFieldExistence(name) {\n        scope.$watch('form[\"' + name + '\"]', function formControlChange(formControl) {\n          if (formControl) {\n            if (fieldCount > 1) {\n              if (!scope.options.formControl) {\n                scope.options.formControl = [];\n              }\n              scope.options.formControl.push(formControl);\n            } else {\n              scope.options.formControl = formControl;\n            }\n            scope.fc = scope.options.formControl; // shortcut for template authors\n            stopWatchingShowError();\n            addShowMessagesWatcher();\n            addParsers();\n            addFormatters();\n          }\n        });\n      }\n\n      function addShowMessagesWatcher() {\n        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n          var options = scope.options;\n          var formControls = arrayify(scope.fc);\n          if (!formControls.some(function (fc) {\n            return fc.$invalid;\n          })) {\n            return false;\n          } else if (typeof options.validation.show === 'boolean') {\n            return options.validation.show;\n          } else if (customExpression) {\n            return formControls.some(function (fc) {\n              return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n            });\n          } else {\n            return formControls.some(function (fc) {\n              var noTouchedButDirty = _angularFix2['default'].isUndefined(fc.$touched) && fc.$dirty;\n              return fc.$touched || noTouchedButDirty;\n            });\n          }\n        }, function onShowValidationChange(show) {\n          scope.options.validation.errorExistsAndShouldBeVisible = show;\n          scope.showError = show; // shortcut for template authors\n        });\n      }\n\n      function addParsers() {\n        setParsersOrFormatters('parsers');\n      }\n\n      function addFormatters() {\n        setParsersOrFormatters('formatters');\n        var ctrl = scope.fc;\n        var formWasPristine = scope.form.$pristine;\n        if (scope.options.formatters) {\n          (function () {\n            var value = ctrl.$modelValue;\n            ctrl.$formatters.forEach(function (formatter) {\n              value = formatter(value);\n            });\n\n            ctrl.$setViewValue(value);\n            ctrl.$render();\n            ctrl.$setPristine();\n            if (formWasPristine) {\n              scope.form.$setPristine();\n            }\n          })();\n        }\n      }\n\n      function setParsersOrFormatters(which) {\n        var originalThingProp = 'originalParser';\n        if (which === 'formatters') {\n          originalThingProp = 'originalFormatter';\n        }\n\n        // init with type's parsers\n        var things = getThingsFromType(type);\n\n        // get optionsTypes things\n        things = formlyUtil.extendArray(things, getThingsFromOptionsTypes(scope.options.optionsTypes));\n\n        // get field's things\n        things = formlyUtil.extendArray(things, scope.options[which]);\n\n        // convert things into formlyExpression things\n        _angularFix2['default'].forEach(things, function (thing, index) {\n          things[index] = getFormlyExpressionThing(thing);\n        });\n\n        var ngModelCtrls = scope.fc;\n        if (!_angularFix2['default'].isArray(ngModelCtrls)) {\n          ngModelCtrls = [ngModelCtrls];\n        }\n\n        _angularFix2['default'].forEach(ngModelCtrls, function (ngModelCtrl) {\n          var _ngModelCtrl;\n\n          ngModelCtrl['$' + which] = (_ngModelCtrl = ngModelCtrl['$' + which]).concat.apply(_ngModelCtrl, _toConsumableArray(things));\n        });\n\n        function getThingsFromType(theType) {\n          if (!theType) {\n            return [];\n          }\n          if (_angularFix2['default'].isString(theType)) {\n            theType = formlyConfig.getType(theType, true, scope.options);\n          }\n          var typeThings = [];\n\n          // get things from parent\n          if (theType['extends']) {\n            typeThings = formlyUtil.extendArray(typeThings, getThingsFromType(theType['extends']));\n          }\n\n          // get own type's things\n          typeThings = formlyUtil.extendArray(typeThings, getDefaultOptionsProperty(theType, which, []));\n\n          // get things from optionsTypes\n          typeThings = formlyUtil.extendArray(typeThings, getThingsFromOptionsTypes(getDefaultOptionsOptionsTypes(theType)));\n\n          return typeThings;\n        }\n\n        function getThingsFromOptionsTypes() {\n          var optionsTypes = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n          var optionsTypesThings = [];\n          _angularFix2['default'].forEach(_angularFix2['default'].copy(arrayify(optionsTypes)).reverse(), function (optionsTypeName) {\n            optionsTypesThings = formlyUtil.extendArray(optionsTypesThings, getThingsFromType(optionsTypeName));\n          });\n          return optionsTypesThings;\n        }\n\n        function getFormlyExpressionThing(thing) {\n          formlyExpressionParserOrFormatterFunction[originalThingProp] = thing;\n          return formlyExpressionParserOrFormatterFunction;\n\n          function formlyExpressionParserOrFormatterFunction($viewValue) {\n            var $modelValue = scope.options.value();\n            return formlyUtil.formlyEval(scope, thing, $modelValue, $viewValue);\n          }\n        }\n      }\n    }\n\n    function callLinkFunctions() {\n      if (type && type.link) {\n        type.link.apply(thusly, args);\n      }\n      if (scope.options.link) {\n        scope.options.link.apply(thusly, args);\n      }\n    }\n\n    function runManipulators(manipulators) {\n      return function runManipulatorsOnTemplate(templateToManipulate) {\n        var chain = $q.when(templateToManipulate);\n        _angularFix2['default'].forEach(manipulators, function (manipulator) {\n          chain = chain.then(function (template) {\n            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n              return _angularFix2['default'].isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n            });\n          });\n        });\n        return chain;\n      };\n    }\n  }\n\n  // sort-of stateless util functions\n  function asHtml(el) {\n    var wrapper = _angularFix2['default'].element('<a></a>');\n    return wrapper.append(el).html();\n  }\n\n  function getFieldType(options) {\n    return options.type && formlyConfig.getType(options.type);\n  }\n\n  function getManipulators(options, formOptions) {\n    var preWrapper = [];\n    var postWrapper = [];\n    addManipulators(options.templateManipulators);\n    addManipulators(formOptions.templateManipulators);\n    addManipulators(formlyConfig.templateManipulators);\n    return { preWrapper: preWrapper, postWrapper: postWrapper };\n\n    function addManipulators(manipulators) {\n      /* eslint-disable */ // it doesn't understand this :-(\n\n      var _ref = manipulators || {};\n\n      var _ref$preWrapper = _ref.preWrapper;\n      var pre = _ref$preWrapper === undefined ? [] : _ref$preWrapper;\n      var _ref$postWrapper = _ref.postWrapper;\n      var post = _ref$postWrapper === undefined ? [] : _ref$postWrapper;\n\n      preWrapper = preWrapper.concat(pre);\n      postWrapper = postWrapper.concat(post);\n      /* eslint-enable */\n    }\n  }\n\n  function getFieldTemplate(options) {\n    function fromOptionsOrType(key, fieldType) {\n      if (_angularFix2['default'].isDefined(options[key])) {\n        return options[key];\n      } else if (fieldType && _angularFix2['default'].isDefined(fieldType[key])) {\n        return fieldType[key];\n      }\n    }\n\n    var type = formlyConfig.getType(options.type, true, options);\n    var template = fromOptionsOrType('template', type);\n    var templateUrl = fromOptionsOrType('templateUrl', type);\n    if (_angularFix2['default'].isUndefined(template) && !templateUrl) {\n      throw formlyUsability.getFieldError('type-type-has-no-template', 'Type \\'' + options.type + '\\' has no template. On element:', options);\n    }\n\n    return getTemplate(templateUrl || template, _angularFix2['default'].isUndefined(template), options);\n  }\n\n  function getTemplate(template, isUrl, options) {\n    var templatePromise = undefined;\n    if (_angularFix2['default'].isFunction(template)) {\n      templatePromise = $q.when(template(options));\n    } else {\n      templatePromise = $q.when(template);\n    }\n\n    if (!isUrl) {\n      return templatePromise;\n    } else {\n      var _ret3 = (function () {\n        var httpOptions = { cache: $templateCache };\n        return {\n          v: templatePromise.then(function (url) {\n            return $http.get(url, httpOptions);\n          }).then(function (response) {\n            return response.data;\n          })['catch'](function handleErrorGettingATemplate(error) {\n            formlyWarn('problem-loading-template-for-templateurl', 'Problem loading template for ' + template, error);\n          })\n        };\n      })();\n\n      if (typeof _ret3 === 'object') return _ret3.v;\n    }\n  }\n\n  function transcludeInWrappers(options, formOptions) {\n    var wrapper = getWrapperOption(options, formOptions);\n\n    return function transcludeTemplate(template) {\n      if (!wrapper.length) {\n        return $q.when(template);\n      }\n\n      wrapper.forEach(function (aWrapper) {\n        formlyUsability.checkWrapper(aWrapper, options);\n        runApiCheck(aWrapper, options);\n      });\n      var promises = wrapper.map(function (w) {\n        return getTemplate(w.template || w.templateUrl, !w.template);\n      });\n      return $q.all(promises).then(function (wrappersTemplates) {\n        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n        });\n        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n        var totalWrapper = wrappersTemplates.shift();\n        wrappersTemplates.forEach(function (wrapperTemplate) {\n          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n        });\n        return doTransclusion(totalWrapper, template);\n      });\n    };\n  }\n\n  function doTransclusion(wrapper, template) {\n    var superWrapper = _angularFix2['default'].element('<a></a>'); // this allows people not have to have a single root in wrappers\n    superWrapper.append(wrapper);\n    var transcludeEl = superWrapper.find('formly-transclude');\n    if (!transcludeEl.length) {\n      // try it using our custom find function\n      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n    }\n    transcludeEl.replaceWith(template);\n    return superWrapper.html();\n  }\n\n  function getWrapperOption(options, formOptions) {\n    /* eslint complexity:[2, 6] */\n    var wrapper = options.wrapper;\n    // explicit null means no wrapper\n    if (wrapper === null) {\n      return [];\n    }\n\n    // nothing specified means use the default wrapper for the type\n    if (!wrapper) {\n      // get all wrappers that specify they apply to this type\n      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n    } else {\n      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n    }\n\n    // get all wrappers for that the type specified that it uses.\n    var type = formlyConfig.getType(options.type, true, options);\n    if (type && type.wrapper) {\n      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(typeWrappers);\n    }\n\n    // add form wrappers\n    if (formOptions.wrapper) {\n      var formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(formWrappers);\n    }\n\n    // add the default wrapper last\n    var defaultWrapper = formlyConfig.getWrapper();\n    if (defaultWrapper) {\n      wrapper.push(defaultWrapper);\n    }\n    return wrapper;\n  }\n\n  function checkApi(options) {\n    formlyApiCheck['throw'](formlyApiCheck.formlyFieldOptions, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n    // validate with the type\n    var type = options.type && formlyConfig.getType(options.type);\n    if (type) {\n      runApiCheck(type, options, true);\n    }\n    if (options.expressionProperties && options.expressionProperties.hide) {\n      formlyWarn('dont-use-expressionproperties.hide-use-hideexpression-instead', 'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead', options);\n    }\n  }\n\n  function checkFieldGroupApi(options) {\n    formlyApiCheck['throw'](formlyApiCheck.fieldGroup, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n  }\n\n  function runApiCheck(_ref2, options, forType) {\n    var apiCheck = _ref2.apiCheck;\n    var apiCheckInstance = _ref2.apiCheckInstance;\n    var apiCheckFunction = _ref2.apiCheckFunction;\n    var apiCheckOptions = _ref2.apiCheckOptions;\n\n    runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options);\n    if (forType && options.type) {\n      _angularFix2['default'].forEach(formlyConfig.getTypeHeritage(options.type), function (type) {\n        runApiCheckForType(type.apiCheck, type.apiCheckInstance, type.apiCheckFunction, type.apiCheckOptions, options);\n      });\n    }\n  }\n\n  function runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options) {\n    /* eslint complexity:[2, 9] */\n    if (!apiCheck) {\n      return;\n    }\n    var instance = apiCheckInstance || formlyConfig.extras.apiCheckInstance || formlyApiCheck;\n    if (instance.config.disabled || _apiCheck2['default'].globalConfig.disabled) {\n      return;\n    }\n    var fn = apiCheckFunction || 'warn';\n    // this is the new API\n    var checkerObjects = apiCheck(instance);\n    _angularFix2['default'].forEach(checkerObjects, function (shape, name) {\n      var checker = instance.shape(shape);\n      var checkOptions = _angularFix2['default'].extend({\n        prefix: 'formly-field type ' + options.type + ' for property ' + name,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n      }, apiCheckOptions);\n      instance[fn](checker, options[name], checkOptions);\n    });\n  }\n}\n\n// Stateless util functions\nfunction getDefaultOptionsOptionsTypes(type) {\n  return getDefaultOptionsProperty(type, 'optionsTypes', []);\n}\n\nfunction getDefaultOptionsProperty(type, prop, defaultValue) {\n  return type.defaultOptions && type.defaultOptions[prop] || defaultValue;\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./directives/formly-field.js\n **/","import angular from 'angular-fix'\nimport apiCheckFactory from 'api-check'\n\nexport default formlyField\n\n/**\n * @ngdoc directive\n * @name formlyField\n * @restrict AE\n */\n// @ngInject\nfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig,\n                     formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n  const {arrayify} = formlyUtil\n\n  return {\n    restrict: 'AE',\n    transclude: true,\n    require: '?^formlyForm',\n    scope: {\n      options: '=',\n      model: '=',\n      originalModel: '=?',\n      formId: '@', // TODO remove formId in a breaking release\n      index: '=?',\n      fields: '=?',\n      formState: '=?',\n      formOptions: '=?',\n      form: '=?', // TODO require form in a breaking release\n    },\n    controller: FormlyFieldController,\n    link: fieldLink,\n  }\n\n\n  // @ngInject\n  function FormlyFieldController($scope, $timeout, $parse, $controller, formlyValidationMessages) {\n    /* eslint max-statements:[2, 34] */\n    if ($scope.options.fieldGroup) {\n      setupFieldGroup()\n      return\n    }\n\n    const fieldType = getFieldType($scope.options)\n    simplifyLife($scope.options)\n    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType)\n    extendOptionsWithDefaults($scope.options, $scope.index)\n    checkApi($scope.options)\n    // set field id to link labels and fields\n\n    // initalization\n    setFieldIdAndName()\n    setDefaultValue()\n    setInitialValue()\n    runExpressions()\n    watchExpressions()\n    addValidationMessages($scope.options)\n    invokeControllers($scope, $scope.options, fieldType)\n\n    // function definitions\n    function runExpressions() {\n      // must run on next tick to make sure that the current value is correct.\n      return $timeout(function runExpressionsOnNextTick() {\n        const field = $scope.options\n        const currentValue = valueGetterSetter()\n        angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n          const setter = $parse(prop).assign\n          const promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue))\n          promise.then(function setFieldValue(value) {\n            setter(field, value)\n          })\n        })\n      }, 0, false)\n    }\n\n    function watchExpressions() {\n      if ($scope.formOptions.watchAllExpressions) {\n        const field = $scope.options\n        const currentValue = valueGetterSetter()\n        angular.forEach(field.expressionProperties, function watchExpression(expression, prop) {\n          const setter = $parse(prop).assign\n          $scope.$watch(function expressionPropertyWatcher() {\n            return formlyUtil.formlyEval($scope, expression, currentValue, currentValue)\n          }, function expressionPropertyListener(value) {\n            setter(field, value)\n          }, true)\n        })\n      }\n    }\n\n    function valueGetterSetter(newVal) {\n      if (!$scope.model || !$scope.options.key) {\n        return undefined\n      }\n      if (angular.isDefined(newVal)) {\n        parseSet($scope.options.key, $scope.model, newVal)\n      }\n      return parseGet($scope.options.key, $scope.model)\n    }\n\n    function shouldNotUseParseKey(key) {\n      return angular.isNumber(key) || !formlyUtil.containsSelector(key)\n    }\n\n    function parseSet(key, model, newVal) {\n      // If either of these are null/undefined then just return undefined\n      if ((!key && key !== 0) || !model) {\n        return\n      }\n      // If we are working with a number then $parse wont work, default back to the old way for now\n      if (shouldNotUseParseKey(key)) {\n        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n        model[key] = newVal\n      } else {\n        const setter = $parse($scope.options.key).assign\n        if (setter) {\n          setter($scope.model, newVal)\n        }\n      }\n    }\n\n    function parseGet(key, model) {\n      // If either of these are null/undefined then just return undefined\n      if ((!key && key !== 0) || !model) {\n        return undefined\n      }\n\n      // If we are working with a number then $parse wont work, default back to the old way for now\n      if (shouldNotUseParseKey(key)) {\n        // TODO: Fix this so we can get several levels instead of just one with properties that are numeric\n        return model[key]\n      } else {\n        return $parse(key)(model)\n      }\n    }\n\n    function simplifyLife(options) {\n      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n      formlyUtil.reverseDeepMerge(options, {\n        originalModel: options.model,\n        extras: {},\n        data: {},\n        templateOptions: {},\n        validation: {},\n      })\n      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n      $scope.to = $scope.options.templateOptions\n      $scope.formOptions = $scope.formOptions || {}\n    }\n\n    function setFieldIdAndName() {\n      if (angular.isFunction(formlyConfig.extras.getFieldId)) {\n        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope)\n      } else {\n        const formName = ($scope.form && $scope.form.$name) || $scope.formId\n        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index)\n      }\n      $scope.options.id = $scope.id\n      $scope.name = $scope.options.name || $scope.options.id\n      $scope.options.name = $scope.name\n    }\n\n    function setDefaultValue() {\n      if (angular.isDefined($scope.options.defaultValue) &&\n          !angular.isDefined(parseGet($scope.options.key, $scope.model))) {\n        parseSet($scope.options.key, $scope.model, $scope.options.defaultValue)\n      }\n    }\n\n    function setInitialValue() {\n      $scope.options.initialValue = $scope.model && parseGet($scope.options.key, $scope.model)\n    }\n\n    function mergeFieldOptionsWithTypeDefaults(options, type) {\n      if (type) {\n        mergeOptions(options, type.defaultOptions)\n      }\n      const properOrder = arrayify(options.optionsTypes).reverse() // so the right things are overridden\n      angular.forEach(properOrder, typeName => {\n        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions)\n      })\n    }\n\n    function mergeOptions(options, extraOptions) {\n      if (extraOptions) {\n        if (angular.isFunction(extraOptions)) {\n          extraOptions = extraOptions(options, $scope)\n        }\n        formlyUtil.reverseDeepMerge(options, extraOptions)\n      }\n    }\n\n    function extendOptionsWithDefaults(options, index) {\n      const key = options.key || index || 0\n      angular.extend(options, {\n        // attach the key in case the formly-field directive is used directly\n        key,\n        value: options.value || valueGetterSetter,\n        runExpressions,\n        resetModel,\n        updateInitialValue,\n      })\n    }\n\n    function resetModel() {\n      parseSet($scope.options.key, $scope.model, $scope.options.initialValue)\n      if ($scope.options.formControl) {\n        if (angular.isArray($scope.options.formControl)) {\n          angular.forEach($scope.options.formControl, function(formControl) {\n            resetFormControl(formControl, true)\n          })\n        } else {\n          resetFormControl($scope.options.formControl)\n        }\n      }\n      if ($scope.form) {\n        $scope.form.$setUntouched && $scope.form.$setUntouched()\n        $scope.form.$setPristine()\n      }\n    }\n\n    function resetFormControl(formControl, isMultiNgModel) {\n      if (!isMultiNgModel) {\n        formControl.$setViewValue(parseGet($scope.options.key, $scope.model))\n      }\n\n      formControl.$render()\n      formControl.$setUntouched && formControl.$setUntouched()\n      formControl.$setPristine()\n\n      // To prevent breaking change requiring a digest to reset $viewModel\n      if (!$scope.$root.$$phase) {\n        $scope.$digest()\n      }\n    }\n\n    function updateInitialValue() {\n      $scope.options.initialValue = parseGet($scope.options.key, $scope.model)\n    }\n\n    function addValidationMessages(options) {\n      options.validation.messages = options.validation.messages || {}\n      angular.forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n        if (!options.validation.messages[name]) {\n          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue)\n          }\n        }\n      })\n    }\n\n    function invokeControllers(scope, options = {}, type = {}) {\n      angular.forEach([type.controller, options.controller], controller => {\n        if (controller) {\n          $controller(controller, {$scope: scope})\n        }\n      })\n    }\n\n    function setupFieldGroup() {\n      $scope.options.options = $scope.options.options || {}\n      $scope.options.options.formState = $scope.formState\n      $scope.to = $scope.options.templateOptions\n    }\n  }\n\n\n  // link function\n  function fieldLink(scope, el, attrs, formlyFormCtrl) {\n    if (scope.options.fieldGroup) {\n      setFieldGroupTemplate()\n      return\n    }\n\n    // watch the field model (if exists) if there is no parent formly-form directive (that would watch it instead)\n    if (!formlyFormCtrl && scope.options.model) {\n      scope.$watch('options.model', () => scope.options.runExpressions(), true)\n    }\n\n    addAttributes()\n    addClasses()\n\n    const type = getFieldType(scope.options)\n    const args = arguments\n    const thusly = this\n    let fieldCount = 0\n    const fieldManipulators = getManipulators(scope.options, scope.formOptions)\n    getFieldTemplate(scope.options)\n      .then(runManipulators(fieldManipulators.preWrapper))\n      .then(transcludeInWrappers(scope.options, scope.formOptions))\n      .then(runManipulators(fieldManipulators.postWrapper))\n      .then(setElementTemplate)\n      .then(watchFormControl)\n      .then(callLinkFunctions)\n      .catch(error => {\n        formlyWarn(\n          'there-was-a-problem-setting-the-template-for-this-field',\n          'There was a problem setting the template for this field ',\n          scope.options,\n          error\n        )\n      })\n\n    function setFieldGroupTemplate() {\n      checkFieldGroupApi(scope.options)\n      el.addClass('formly-field-group')\n      let extraAttributes = ''\n      if (scope.options.elementAttributes) {\n        extraAttributes = Object.keys(scope.options.elementAttributes).map(key => {\n          return `${key}=\"${scope.options.elementAttributes[key]}\"`\n        }).join(' ')\n      }\n      let modelValue = 'model'\n      scope.options.form = scope.form\n      if (scope.options.key) {\n        modelValue = `model['${scope.options.key}']`\n      }\n      getTemplate(`\n          <formly-form model=\"${modelValue}\"\n                       fields=\"options.fieldGroup\"\n                       options=\"options.options\"\n                       form=\"options.form\"\n                       class=\"${scope.options.className}\"\n                       ${extraAttributes}\n                       is-field-group>\n          </formly-form>\n        `)\n        .then(transcludeInWrappers(scope.options, scope.formOptions))\n        .then(setElementTemplate)\n    }\n\n    function addAttributes() {\n      if (scope.options.elementAttributes) {\n        el.attr(scope.options.elementAttributes)\n      }\n    }\n\n    function addClasses() {\n      if (scope.options.className) {\n        el.addClass(scope.options.className)\n      }\n      if (scope.options.type) {\n        el.addClass(`formly-field-${scope.options.type}`)\n      }\n    }\n\n    function setElementTemplate(templateString) {\n      el.html(asHtml(templateString))\n      $compile(el.contents())(scope)\n      return templateString\n    }\n\n    function watchFormControl(templateString) {\n      let stopWatchingShowError = angular.noop\n      if (scope.options.noFormControl) {\n        return\n      }\n      const templateEl = angular.element(`<div>${templateString}</div>`)\n      const ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]')\n\n\n      if (ngModelNodes.length) {\n        angular.forEach(ngModelNodes, function(ngModelNode) {\n          fieldCount++\n          watchFieldNameOrExistence(ngModelNode.getAttribute('name'))\n        })\n      }\n\n      function watchFieldNameOrExistence(name) {\n        const nameExpressionRegex = /\\{\\{(.*?)}}/\n        const nameExpression = nameExpressionRegex.exec(name)\n        if (nameExpression) {\n          name = $interpolate(name)(scope)\n        }\n        watchFieldExistence(name)\n      }\n\n      function watchFieldExistence(name) {\n        scope.$watch(`form[\"${name}\"]`, function formControlChange(formControl) {\n          if (formControl) {\n            if (fieldCount > 1) {\n              if (!scope.options.formControl) {\n                scope.options.formControl = []\n              }\n              scope.options.formControl.push(formControl)\n            } else {\n              scope.options.formControl = formControl\n            }\n            scope.fc = scope.options.formControl // shortcut for template authors\n            stopWatchingShowError()\n            addShowMessagesWatcher()\n            addParsers()\n            addFormatters()\n          }\n        })\n      }\n\n      function addShowMessagesWatcher() {\n        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n          const customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression\n          const options = scope.options\n          const formControls = arrayify(scope.fc)\n          if (!formControls.some(fc => fc.$invalid)) {\n            return false\n          } else if (typeof options.validation.show === 'boolean') {\n            return options.validation.show\n          } else if (customExpression) {\n            return formControls.some(fc =>\n              formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue))\n          } else {\n            return formControls.some(fc => {\n              const noTouchedButDirty = (angular.isUndefined(fc.$touched) && fc.$dirty)\n              return (fc.$touched || noTouchedButDirty)\n            })\n          }\n        }, function onShowValidationChange(show) {\n          scope.options.validation.errorExistsAndShouldBeVisible = show\n          scope.showError = show // shortcut for template authors\n        })\n      }\n\n      function addParsers() {\n        setParsersOrFormatters('parsers')\n      }\n\n      function addFormatters() {\n        setParsersOrFormatters('formatters')\n        const ctrl = scope.fc\n        const formWasPristine = scope.form.$pristine\n        if (scope.options.formatters) {\n          let value = ctrl.$modelValue\n          ctrl.$formatters.forEach((formatter) => {\n            value = formatter(value)\n          })\n\n          ctrl.$setViewValue(value)\n          ctrl.$render()\n          ctrl.$setPristine()\n          if (formWasPristine) {\n            scope.form.$setPristine()\n          }\n        }\n      }\n\n      function setParsersOrFormatters(which) {\n        let originalThingProp = 'originalParser'\n        if (which === 'formatters') {\n          originalThingProp = 'originalFormatter'\n        }\n\n        // init with type's parsers\n        let things = getThingsFromType(type)\n\n        // get optionsTypes things\n        things = formlyUtil.extendArray(things, getThingsFromOptionsTypes(scope.options.optionsTypes))\n\n        // get field's things\n        things = formlyUtil.extendArray(things, scope.options[which])\n\n        // convert things into formlyExpression things\n        angular.forEach(things, (thing, index) => {\n          things[index] = getFormlyExpressionThing(thing)\n        })\n\n        let ngModelCtrls = scope.fc\n        if (!angular.isArray(ngModelCtrls)) {\n          ngModelCtrls = [ngModelCtrls]\n        }\n\n        angular.forEach(ngModelCtrls, ngModelCtrl => {\n          ngModelCtrl['$' + which] = ngModelCtrl['$' + which].concat(...things)\n        })\n\n        function getThingsFromType(theType) {\n          if (!theType) {\n            return []\n          }\n          if (angular.isString(theType)) {\n            theType = formlyConfig.getType(theType, true, scope.options)\n          }\n          let typeThings = []\n\n          // get things from parent\n          if (theType.extends) {\n            typeThings = formlyUtil.extendArray(typeThings, getThingsFromType(theType.extends))\n          }\n\n          // get own type's things\n          typeThings = formlyUtil.extendArray(typeThings, getDefaultOptionsProperty(theType, which, []))\n\n          // get things from optionsTypes\n          typeThings = formlyUtil.extendArray(\n            typeThings,\n            getThingsFromOptionsTypes(getDefaultOptionsOptionsTypes(theType))\n          )\n\n          return typeThings\n        }\n\n        function getThingsFromOptionsTypes(optionsTypes = []) {\n          let optionsTypesThings = []\n          angular.forEach(angular.copy(arrayify(optionsTypes)).reverse(), optionsTypeName => {\n            optionsTypesThings = formlyUtil.extendArray(optionsTypesThings, getThingsFromType(optionsTypeName))\n          })\n          return optionsTypesThings\n        }\n\n        function getFormlyExpressionThing(thing) {\n          formlyExpressionParserOrFormatterFunction[originalThingProp] = thing\n          return formlyExpressionParserOrFormatterFunction\n\n          function formlyExpressionParserOrFormatterFunction($viewValue) {\n            const $modelValue = scope.options.value()\n            return formlyUtil.formlyEval(scope, thing, $modelValue, $viewValue)\n          }\n        }\n\n      }\n    }\n\n    function callLinkFunctions() {\n      if (type && type.link) {\n        type.link.apply(thusly, args)\n      }\n      if (scope.options.link) {\n        scope.options.link.apply(thusly, args)\n      }\n    }\n\n\n    function runManipulators(manipulators) {\n      return function runManipulatorsOnTemplate(templateToManipulate) {\n        let chain = $q.when(templateToManipulate)\n        angular.forEach(manipulators, manipulator => {\n          chain = chain.then(template => {\n            return $q.when(manipulator(template, scope.options, scope)).then(newTemplate => {\n              return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate)\n            })\n          })\n        })\n        return chain\n      }\n    }\n  }\n\n  // sort-of stateless util functions\n  function asHtml(el) {\n    const wrapper = angular.element('<a></a>')\n    return wrapper.append(el).html()\n  }\n\n  function getFieldType(options) {\n    return options.type && formlyConfig.getType(options.type)\n  }\n\n  function getManipulators(options, formOptions) {\n    let preWrapper = []\n    let postWrapper = []\n    addManipulators(options.templateManipulators)\n    addManipulators(formOptions.templateManipulators)\n    addManipulators(formlyConfig.templateManipulators)\n    return {preWrapper, postWrapper}\n\n    function addManipulators(manipulators) {\n      /* eslint-disable */ // it doesn't understand this :-(\n      const {preWrapper:pre = [], postWrapper:post = []} = (manipulators || {});\n      preWrapper = preWrapper.concat(pre);\n      postWrapper = postWrapper.concat(post);\n      /* eslint-enable */\n    }\n  }\n\n  function getFieldTemplate(options) {\n    function fromOptionsOrType(key, fieldType) {\n      if (angular.isDefined(options[key])) {\n        return options[key]\n      } else if (fieldType && angular.isDefined(fieldType[key])) {\n        return fieldType[key]\n      }\n    }\n\n    const type = formlyConfig.getType(options.type, true, options)\n    const template = fromOptionsOrType('template', type)\n    const templateUrl = fromOptionsOrType('templateUrl', type)\n    if (angular.isUndefined(template) && !templateUrl) {\n      throw formlyUsability.getFieldError(\n        'type-type-has-no-template',\n        `Type '${options.type}' has no template. On element:`, options\n      )\n    }\n\n    return getTemplate(templateUrl || template, angular.isUndefined(template), options)\n  }\n\n\n  function getTemplate(template, isUrl, options) {\n    let templatePromise\n    if (angular.isFunction(template)) {\n      templatePromise = $q.when(template(options))\n    } else {\n      templatePromise = $q.when(template)\n    }\n\n    if (!isUrl) {\n      return templatePromise\n    } else {\n      const httpOptions = {cache: $templateCache}\n      return templatePromise\n        .then((url) => $http.get(url, httpOptions))\n        .then((response) => response.data)\n        .catch(function handleErrorGettingATemplate(error) {\n          formlyWarn(\n            'problem-loading-template-for-templateurl',\n            'Problem loading template for ' + template,\n            error\n          )\n        })\n    }\n  }\n\n  function transcludeInWrappers(options, formOptions) {\n    const wrapper = getWrapperOption(options, formOptions)\n\n    return function transcludeTemplate(template) {\n      if (!wrapper.length) {\n        return $q.when(template)\n      }\n\n      wrapper.forEach((aWrapper) => {\n        formlyUsability.checkWrapper(aWrapper, options)\n        runApiCheck(aWrapper, options)\n      })\n      const promises = wrapper.map(w => getTemplate(w.template || w.templateUrl, !w.template))\n      return $q.all(promises).then(wrappersTemplates => {\n        wrappersTemplates.forEach((wrapperTemplate, index) => {\n          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index])\n        })\n        wrappersTemplates.reverse() // wrapper 0 is wrapped in wrapper 1 and so on...\n        let totalWrapper = wrappersTemplates.shift()\n        wrappersTemplates.forEach(wrapperTemplate => {\n          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate)\n        })\n        return doTransclusion(totalWrapper, template)\n      })\n    }\n  }\n\n  function doTransclusion(wrapper, template) {\n    const superWrapper = angular.element('<a></a>') // this allows people not have to have a single root in wrappers\n    superWrapper.append(wrapper)\n    let transcludeEl = superWrapper.find('formly-transclude')\n    if (!transcludeEl.length) {\n      // try it using our custom find function\n      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude')\n    }\n    transcludeEl.replaceWith(template)\n    return superWrapper.html()\n  }\n\n  function getWrapperOption(options, formOptions) {\n    /* eslint complexity:[2, 6] */\n    let wrapper = options.wrapper\n    // explicit null means no wrapper\n    if (wrapper === null) {\n      return []\n    }\n\n    // nothing specified means use the default wrapper for the type\n    if (!wrapper) {\n      // get all wrappers that specify they apply to this type\n      wrapper = arrayify(formlyConfig.getWrapperByType(options.type))\n    } else {\n      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper)\n    }\n\n    // get all wrappers for that the type specified that it uses.\n    const type = formlyConfig.getType(options.type, true, options)\n    if (type && type.wrapper) {\n      const typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper)\n      wrapper = wrapper.concat(typeWrappers)\n    }\n\n    // add form wrappers\n    if (formOptions.wrapper) {\n      const formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper)\n      wrapper = wrapper.concat(formWrappers)\n    }\n\n    // add the default wrapper last\n    const defaultWrapper = formlyConfig.getWrapper()\n    if (defaultWrapper) {\n      wrapper.push(defaultWrapper)\n    }\n    return wrapper\n  }\n\n  function checkApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyFieldOptions, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed',\n    })\n    // validate with the type\n    const type = options.type && formlyConfig.getType(options.type)\n    if (type) {\n      runApiCheck(type, options, true)\n    }\n    if (options.expressionProperties && options.expressionProperties.hide) {\n      formlyWarn(\n        'dont-use-expressionproperties.hide-use-hideexpression-instead',\n        'You have specified `hide` in `expressionProperties`. Use `hideExpression` instead',\n        options\n      )\n    }\n  }\n\n  function checkFieldGroupApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.fieldGroup, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed',\n    })\n  }\n\n  function runApiCheck({apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions}, options, forType) {\n    runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options)\n    if (forType && options.type) {\n      angular.forEach(formlyConfig.getTypeHeritage(options.type), function(type) {\n        runApiCheckForType(type.apiCheck, type.apiCheckInstance, type.apiCheckFunction, type.apiCheckOptions, options)\n      })\n    }\n  }\n\n  function runApiCheckForType(apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions, options) {\n    /* eslint complexity:[2, 9] */\n    if (!apiCheck) {\n      return\n    }\n    const instance = apiCheckInstance || formlyConfig.extras.apiCheckInstance || formlyApiCheck\n    if (instance.config.disabled || apiCheckFactory.globalConfig.disabled) {\n      return\n    }\n    const fn = apiCheckFunction || 'warn'\n    // this is the new API\n    const checkerObjects = apiCheck(instance)\n    angular.forEach(checkerObjects, (shape, name) => {\n      const checker = instance.shape(shape)\n      const checkOptions = angular.extend({\n        prefix: `formly-field type ${options.type} for property ${name}`,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed',\n      }, apiCheckOptions)\n      instance[fn](checker, options[name], checkOptions)\n    })\n  }\n\n\n}\n\n\n// Stateless util functions\nfunction getDefaultOptionsOptionsTypes(type) {\n  return getDefaultOptionsProperty(type, 'optionsTypes', [])\n}\n\nfunction getDefaultOptionsProperty(type, prop, defaultValue) {\n  return type.defaultOptions && type.defaultOptions[prop] || defaultValue\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-field.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = formlyFocus;\n\n// @ngInject\nfunction formlyFocus($timeout, $document) {\n  return {\n    restrict: 'A',\n    link: function formlyFocusLink(scope, element, attrs) {\n      var previousEl = null;\n      var el = element[0];\n      var doc = $document[0];\n      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n        /* eslint no-bitwise:0 */ // I know what I'm doing. I promise...\n        if (value === 'true') {\n          $timeout(function setElementFocus() {\n            previousEl = doc.activeElement;\n            el.focus();\n          }, ~ ~attrs.focusWait);\n        } else if (value === 'false') {\n          if (doc.activeElement === el) {\n            el.blur();\n            if (attrs.hasOwnProperty('refocus') && previousEl) {\n              previousEl.focus();\n            }\n          }\n        }\n      });\n    }\n  };\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./directives/formly-focus.js\n **/","export default formlyFocus\n\n// @ngInject\nfunction formlyFocus($timeout, $document) {\n  return {\n    restrict: 'A',\n    link: function formlyFocusLink(scope, element, attrs) {\n      let previousEl = null\n      const el = element[0]\n      const doc = $document[0]\n      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n        /* eslint no-bitwise:0 */ // I know what I'm doing. I promise...\n        if (value === 'true') {\n          $timeout(function setElementFocus() {\n            previousEl = doc.activeElement\n            el.focus()\n          }, ~~attrs.focusWait)\n        } else if (value === 'false') {\n          if (doc.activeElement === el) {\n            el.blur()\n            if (attrs.hasOwnProperty('refocus') && previousEl) {\n              previousEl.focus()\n            }\n          }\n        }\n      })\n    },\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-focus.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _slice = Array.prototype.slice;\nexports['default'] = FormlyFormController;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nfunction isFieldGroup(field) {\n  return field && !!field.fieldGroup;\n}\n\n// @ngInject\n\nfunction FormlyFormController(formlyUsability, formlyWarn, formlyConfig, $parse, $scope, formlyApiCheck, formlyUtil) {\n\n  setupOptions();\n  $scope.model = $scope.model || {};\n  setupFields();\n\n  // watch the model and evaluate watch expressions that depend on it.\n  if (!$scope.options.manualModelWatcher) {\n    $scope.$watch('model', onModelOrFormStateChange, true);\n  } else if (_angularFix2['default'].isFunction($scope.options.manualModelWatcher)) {\n    $scope.$watch($scope.options.manualModelWatcher, onModelOrFormStateChange, true);\n  }\n\n  if ($scope.options.formState) {\n    $scope.$watch('options.formState', onModelOrFormStateChange, true);\n  }\n\n  function onModelOrFormStateChange() {\n    _angularFix2['default'].forEach($scope.fields, runFieldExpressionProperties);\n  }\n\n  function validateFormControl(formControl, promise) {\n    var validate = formControl.$validate;\n    if (promise) {\n      promise.then(validate);\n    } else {\n      validate();\n    }\n  }\n\n  function runFieldExpressionProperties(field, index) {\n    var model = field.model || $scope.model;\n    var promise = field.runExpressions && field.runExpressions();\n    if (field.hideExpression) {\n      // can't use hide with expressionProperties reliably\n      var val = model[field.key];\n      field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index, { model: model });\n    }\n    if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n      if (_angularFix2['default'].isArray(field.formControl)) {\n        _angularFix2['default'].forEach(field.formControl, function (formControl) {\n          validateFormControl(formControl, promise);\n        });\n      } else {\n        validateFormControl(field.formControl, promise);\n      }\n    }\n  }\n\n  function setupFields() {\n    $scope.fields = $scope.fields || [];\n\n    checkDeprecatedOptions($scope.options);\n\n    var fieldTransforms = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform;\n\n    if (!_angularFix2['default'].isArray(fieldTransforms)) {\n      fieldTransforms = [fieldTransforms];\n    }\n\n    _angularFix2['default'].forEach(fieldTransforms, function transformFields(fieldTransform) {\n      if (fieldTransform) {\n        $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form);\n        if (!$scope.fields) {\n          throw formlyUsability.getFormlyError('fieldTransform must return an array of fields');\n        }\n      }\n    });\n\n    setupModels();\n\n    if ($scope.options.watchAllExpressions) {\n      _angularFix2['default'].forEach($scope.fields, setupHideExpressionWatcher);\n    }\n\n    _angularFix2['default'].forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n    _angularFix2['default'].forEach($scope.fields, setupWatchers); // setup watchers for all fields\n  }\n\n  function checkDeprecatedOptions(options) {\n    if (formlyConfig.extras.fieldTransform && _angularFix2['default'].isFunction(formlyConfig.extras.fieldTransform)) {\n      formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for formlyConfig.extras: ' + formlyConfig.extras.fieldTransform.name, formlyConfig.extras);\n    } else if (options.fieldTransform && _angularFix2['default'].isFunction(options.fieldTransform)) {\n      formlyWarn('fieldtransform-as-a-function-deprecated', 'fieldTransform as a function has been deprecated.', 'Attempted for form', options);\n    }\n  }\n\n  function setupOptions() {\n    formlyApiCheck['throw']([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: 'formly-form options check' });\n    $scope.options = $scope.options || {};\n    $scope.options.formState = $scope.options.formState || {};\n\n    _angularFix2['default'].extend($scope.options, {\n      updateInitialValue: updateInitialValue,\n      resetModel: resetModel\n    });\n  }\n\n  function updateInitialValue() {\n    _angularFix2['default'].forEach($scope.fields, function (field) {\n      if (isFieldGroup(field) && field.options) {\n        field.options.updateInitialValue();\n      } else {\n        field.updateInitialValue();\n      }\n    });\n  }\n\n  function resetModel() {\n    _angularFix2['default'].forEach($scope.fields, function (field) {\n      if (isFieldGroup(field) && field.options) {\n        field.options.resetModel();\n      } else if (field.resetModel) {\n        field.resetModel();\n      }\n    });\n  }\n\n  function setupModels() {\n    // a set of field models that are already watched (the $scope.model will have its own watcher)\n    var watchedModels = [$scope.model];\n    // we will not set up automatic model watchers if manual mode is set\n    var manualModelWatcher = $scope.options.manualModelWatcher;\n\n    if ($scope.options.formState) {\n      // $scope.options.formState will have its own watcher\n      watchedModels.push($scope.options.formState);\n    }\n\n    _angularFix2['default'].forEach($scope.fields, function (field) {\n      var isNewModel = initModel(field);\n\n      if (field.model && isNewModel && watchedModels.indexOf(field.model) === -1 && !manualModelWatcher) {\n        $scope.$watch(function () {\n          return field.model;\n        }, onModelOrFormStateChange, true);\n        watchedModels.push(field.model);\n      }\n    });\n  }\n\n  function setupHideExpressionWatcher(field, index) {\n    if (field.hideExpression) {\n      (function () {\n        // can't use hide with expressionProperties reliably\n        var model = field.model || $scope.model;\n        $scope.$watch(function hideExpressionWatcher() {\n          var val = model[field.key];\n          return evalCloseToFormlyExpression(field.hideExpression, val, field, index, { model: model });\n        }, function (hide) {\n          return field.hide = hide;\n        }, true);\n      })();\n    }\n  }\n\n  function initModel(field) {\n    var isNewModel = true;\n\n    if (_angularFix2['default'].isString(field.model)) {\n      (function () {\n        var expression = field.model;\n\n        isNewModel = !referencesCurrentlyWatchedModel(expression);\n\n        field.model = resolveStringModel(expression);\n\n        $scope.$watch(function () {\n          return resolveStringModel(expression);\n        }, function (model) {\n          return field.model = model;\n        });\n      })();\n    }\n\n    return isNewModel;\n\n    function resolveStringModel(expression) {\n      var index = $scope.fields.indexOf(field);\n      var model = evalCloseToFormlyExpression(expression, undefined, field, index, { model: $scope.model });\n\n      if (!model) {\n        throw formlyUsability.getFieldError('field-model-must-be-initialized', 'Field model must be initialized. When specifying a model as a string for a field, the result of the' + ' expression must have been initialized ahead of time.', field);\n      }\n\n      return model;\n    }\n  }\n\n  function referencesCurrentlyWatchedModel(expression) {\n    return ['model', 'formState'].some(function (item) {\n      return formlyUtil.startsWith(expression, item + '.') || formlyUtil.startsWith(expression, item + '[');\n    });\n  }\n\n  function attachKey(field, index) {\n    if (!isFieldGroup(field)) {\n      field.key = field.key || index || 0;\n    }\n  }\n\n  function setupWatchers(field, index) {\n    if (!_angularFix2['default'].isDefined(field.watcher)) {\n      return;\n    }\n    var watchers = field.watcher;\n    if (!_angularFix2['default'].isArray(watchers)) {\n      watchers = [watchers];\n    }\n    _angularFix2['default'].forEach(watchers, function setupWatcher(watcher) {\n      if (!_angularFix2['default'].isDefined(watcher.listener) && !watcher.runFieldExpressions) {\n        throw formlyUsability.getFieldError('all-field-watchers-must-have-a-listener', 'All field watchers must have a listener', field);\n      }\n      var watchExpression = getWatchExpression(watcher, field, index);\n      var watchListener = getWatchListener(watcher, field, index);\n\n      var type = watcher.type || '$watch';\n      watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n    });\n  }\n\n  function getWatchExpression(watcher, field, index) {\n    var watchExpression = undefined;\n    if (!_angularFix2['default'].isUndefined(watcher.expression)) {\n      watchExpression = watcher.expression;\n    } else if (field.key) {\n      watchExpression = 'model[\\'' + field.key.toString().split('.').join('\\'][\\'') + '\\']';\n    }\n    if (_angularFix2['default'].isFunction(watchExpression)) {\n      (function () {\n        // wrap the field's watch expression so we can call it with the field as the first arg\n        // and the stop function as the last arg as a helper\n        var originalExpression = watchExpression;\n        watchExpression = function formlyWatchExpression() {\n          var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n          return originalExpression.apply(undefined, _toConsumableArray(args));\n        };\n        watchExpression.displayName = 'Formly Watch Expression for field for ' + field.key;\n      })();\n    } else if (field.model) {\n      watchExpression = $parse(watchExpression).bind(null, $scope, { model: field.model });\n    }\n    return watchExpression;\n  }\n\n  function getWatchListener(watcher, field, index) {\n    var watchListener = watcher.listener;\n    if (_angularFix2['default'].isFunction(watchListener) || watcher.runFieldExpressions) {\n      (function () {\n        // wrap the field's watch listener so we can call it with the field as the first arg\n        // and the stop function as the last arg as a helper\n        var originalListener = watchListener;\n        watchListener = function formlyWatchListener() {\n          var value = undefined;\n          if (originalListener) {\n            var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n            value = originalListener.apply(undefined, _toConsumableArray(args));\n          }\n          if (watcher.runFieldExpressions) {\n            runFieldExpressionProperties(field, index);\n          }\n          return value;\n        };\n        watchListener.displayName = 'Formly Watch Listener for field for ' + field.key;\n      })();\n    }\n    return watchListener;\n  }\n\n  function modifyArgs(watcher, index) {\n    for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      originalArgs[_key - 2] = arguments[_key];\n    }\n\n    return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n  }\n\n  function evalCloseToFormlyExpression(expression, val, field, index) {\n    var extraLocals = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];\n\n    extraLocals = _angularFix2['default'].extend(getFormlyFieldLikeLocals(field, index), extraLocals);\n    return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n  }\n\n  function getFormlyFieldLikeLocals(field, index) {\n    // this makes it closer to what a regular formlyExpression would be\n    return {\n      model: field.model,\n      options: field,\n      index: index,\n      formState: $scope.options.formState,\n      originalModel: $scope.model,\n      formOptions: $scope.options,\n      formId: $scope.formId\n    };\n  }\n}\n\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./directives/formly-form.controller.js\n **/","import angular from 'angular-fix'\n\nfunction isFieldGroup(field) {\n  return field && !!field.fieldGroup\n}\n\n// @ngInject\nexport default function FormlyFormController(\n  formlyUsability, formlyWarn, formlyConfig, $parse, $scope, formlyApiCheck, formlyUtil) {\n\n  setupOptions()\n  $scope.model = $scope.model || {}\n  setupFields()\n\n  // watch the model and evaluate watch expressions that depend on it.\n  if (!$scope.options.manualModelWatcher) {\n    $scope.$watch('model', onModelOrFormStateChange, true)\n  } else if (angular.isFunction($scope.options.manualModelWatcher)) {\n    $scope.$watch($scope.options.manualModelWatcher, onModelOrFormStateChange, true)\n  }\n\n  if ($scope.options.formState) {\n    $scope.$watch('options.formState', onModelOrFormStateChange, true)\n  }\n\n  function onModelOrFormStateChange() {\n    angular.forEach($scope.fields, runFieldExpressionProperties)\n  }\n\n  function validateFormControl(formControl, promise) {\n    const validate = formControl.$validate\n    if (promise) {\n      promise.then(validate)\n    } else {\n      validate()\n    }\n  }\n\n  function runFieldExpressionProperties(field, index) {\n    const model = field.model || $scope.model\n    const promise = field.runExpressions && field.runExpressions()\n    if (field.hideExpression) { // can't use hide with expressionProperties reliably\n      const val = model[field.key]\n      field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index, {model})\n    }\n    if (field.extras && field.extras.validateOnModelChange && field.formControl) {\n      if (angular.isArray(field.formControl)) {\n        angular.forEach(field.formControl, function(formControl) {\n          validateFormControl(formControl, promise)\n        })\n      } else {\n        validateFormControl(field.formControl, promise)\n      }\n    }\n  }\n\n  function setupFields() {\n    $scope.fields = $scope.fields || []\n\n    checkDeprecatedOptions($scope.options)\n\n    let fieldTransforms = $scope.options.fieldTransform || formlyConfig.extras.fieldTransform\n\n    if (!angular.isArray(fieldTransforms)) {\n      fieldTransforms = [fieldTransforms]\n    }\n\n    angular.forEach(fieldTransforms, function transformFields(fieldTransform) {\n      if (fieldTransform) {\n        $scope.fields = fieldTransform($scope.fields, $scope.model, $scope.options, $scope.form)\n        if (!$scope.fields) {\n          throw formlyUsability.getFormlyError('fieldTransform must return an array of fields')\n        }\n      }\n    })\n\n    setupModels()\n\n    if ($scope.options.watchAllExpressions) {\n      angular.forEach($scope.fields, setupHideExpressionWatcher)\n    }\n\n    angular.forEach($scope.fields, attachKey) // attaches a key based on the index if a key isn't specified\n    angular.forEach($scope.fields, setupWatchers) // setup watchers for all fields\n  }\n\n  function checkDeprecatedOptions(options) {\n    if (formlyConfig.extras.fieldTransform && angular.isFunction(formlyConfig.extras.fieldTransform)) {\n      formlyWarn(\n        'fieldtransform-as-a-function-deprecated',\n        'fieldTransform as a function has been deprecated.',\n        `Attempted for formlyConfig.extras: ${formlyConfig.extras.fieldTransform.name}`,\n        formlyConfig.extras\n      )\n    } else if (options.fieldTransform && angular.isFunction(options.fieldTransform)) {\n      formlyWarn(\n        'fieldtransform-as-a-function-deprecated',\n        'fieldTransform as a function has been deprecated.',\n        `Attempted for form`,\n        options\n      )\n    }\n  }\n\n  function setupOptions() {\n    formlyApiCheck.throw(\n      [formlyApiCheck.formOptionsApi.optional], [$scope.options], {prefix: 'formly-form options check'}\n    )\n    $scope.options = $scope.options || {}\n    $scope.options.formState = $scope.options.formState || {}\n\n    angular.extend($scope.options, {\n      updateInitialValue,\n      resetModel,\n    })\n\n  }\n\n  function updateInitialValue() {\n    angular.forEach($scope.fields, field => {\n      if (isFieldGroup(field) && field.options) {\n        field.options.updateInitialValue()\n      } else {\n        field.updateInitialValue()\n      }\n    })\n  }\n\n  function resetModel() {\n    angular.forEach($scope.fields, field => {\n      if (isFieldGroup(field) && field.options) {\n        field.options.resetModel()\n      } else if (field.resetModel) {\n        field.resetModel()\n      }\n    })\n  }\n\n  function setupModels() {\n    // a set of field models that are already watched (the $scope.model will have its own watcher)\n    const watchedModels = [$scope.model]\n    // we will not set up automatic model watchers if manual mode is set\n    const manualModelWatcher = $scope.options.manualModelWatcher\n\n    if ($scope.options.formState) {\n      // $scope.options.formState will have its own watcher\n      watchedModels.push($scope.options.formState)\n    }\n\n    angular.forEach($scope.fields, (field) => {\n      const isNewModel = initModel(field)\n\n      if (field.model && isNewModel && watchedModels.indexOf(field.model) === -1 && !manualModelWatcher) {\n        $scope.$watch(() => field.model, onModelOrFormStateChange, true)\n        watchedModels.push(field.model)\n      }\n    })\n  }\n\n  function setupHideExpressionWatcher(field, index) {\n    if (field.hideExpression) { // can't use hide with expressionProperties reliably\n      const model = field.model || $scope.model\n      $scope.$watch(function hideExpressionWatcher() {\n        const val = model[field.key]\n        return evalCloseToFormlyExpression(field.hideExpression, val, field, index, {model})\n      }, (hide) => field.hide = hide, true)\n    }\n  }\n\n  function initModel(field) {\n    let isNewModel = true\n\n    if (angular.isString(field.model)) {\n      const expression = field.model\n\n      isNewModel = !referencesCurrentlyWatchedModel(expression)\n\n      field.model = resolveStringModel(expression)\n\n      $scope.$watch(() => resolveStringModel(expression), (model) => field.model = model)\n    }\n\n    return isNewModel\n\n    function resolveStringModel(expression) {\n      const index = $scope.fields.indexOf(field)\n      const model = evalCloseToFormlyExpression(expression, undefined, field, index, {model: $scope.model})\n\n      if (!model) {\n        throw formlyUsability.getFieldError(\n          'field-model-must-be-initialized',\n          'Field model must be initialized. When specifying a model as a string for a field, the result of the' +\n            ' expression must have been initialized ahead of time.',\n          field)\n      }\n\n      return model\n    }\n  }\n\n  function referencesCurrentlyWatchedModel(expression) {\n    return ['model', 'formState'].some(item => {\n      return formlyUtil.startsWith(expression, `${item}.`) || formlyUtil.startsWith(expression, `${item}[`)\n    })\n  }\n\n  function attachKey(field, index) {\n    if (!isFieldGroup(field)) {\n      field.key = field.key || index || 0\n    }\n  }\n\n  function setupWatchers(field, index) {\n    if (!angular.isDefined(field.watcher)) {\n      return\n    }\n    let watchers = field.watcher\n    if (!angular.isArray(watchers)) {\n      watchers = [watchers]\n    }\n    angular.forEach(watchers, function setupWatcher(watcher) {\n      if (!angular.isDefined(watcher.listener) && !watcher.runFieldExpressions) {\n        throw formlyUsability.getFieldError(\n          'all-field-watchers-must-have-a-listener',\n          'All field watchers must have a listener', field\n        )\n      }\n      const watchExpression = getWatchExpression(watcher, field, index)\n      const watchListener = getWatchListener(watcher, field, index)\n\n      const type = watcher.type || '$watch'\n      watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep)\n    })\n  }\n\n  function getWatchExpression(watcher, field, index) {\n    let watchExpression\n    if (!angular.isUndefined(watcher.expression)) {\n      watchExpression = watcher.expression\n    } else if (field.key) {\n      watchExpression = 'model[\\'' + field.key.toString().split('.').join('\\'][\\'') + '\\']'\n    }\n    if (angular.isFunction(watchExpression)) {\n      // wrap the field's watch expression so we can call it with the field as the first arg\n      // and the stop function as the last arg as a helper\n      const originalExpression = watchExpression\n      watchExpression = function formlyWatchExpression() {\n        const args = modifyArgs(watcher, index, ...arguments)\n        return originalExpression(...args)\n      }\n      watchExpression.displayName = `Formly Watch Expression for field for ${field.key}`\n    } else if (field.model) {\n      watchExpression = $parse(watchExpression).bind(null, $scope, {model: field.model})\n    }\n    return watchExpression\n  }\n\n  function getWatchListener(watcher, field, index) {\n    let watchListener = watcher.listener\n    if (angular.isFunction(watchListener) || watcher.runFieldExpressions) {\n      // wrap the field's watch listener so we can call it with the field as the first arg\n      // and the stop function as the last arg as a helper\n      const originalListener = watchListener\n      watchListener = function formlyWatchListener() {\n        let value\n        if (originalListener) {\n          const args = modifyArgs(watcher, index, ...arguments)\n          value = originalListener(...args)\n        }\n        if (watcher.runFieldExpressions) {\n          runFieldExpressionProperties(field, index)\n        }\n        return value\n      }\n      watchListener.displayName = `Formly Watch Listener for field for ${field.key}`\n    }\n    return watchListener\n  }\n\n  function modifyArgs(watcher, index, ...originalArgs) {\n    return [$scope.fields[index], ...originalArgs, watcher.stopWatching]\n  }\n\n  function evalCloseToFormlyExpression(expression, val, field, index, extraLocals = {}) {\n    extraLocals = angular.extend(getFormlyFieldLikeLocals(field, index), extraLocals)\n    return formlyUtil.formlyEval($scope, expression, val, val, extraLocals)\n  }\n\n  function getFormlyFieldLikeLocals(field, index) {\n    // this makes it closer to what a regular formlyExpression would be\n    return {\n      model: field.model,\n      options: field,\n      index,\n      formState: $scope.options.formState,\n      originalModel: $scope.model,\n      formOptions: $scope.options,\n      formId: $scope.formId,\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-form.controller.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = formlyForm;\n\n/**\n * @ngdoc directive\n * @name formlyForm\n * @restrict AE\n */\n// @ngInject\nfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n  var currentFormId = 1;\n  return {\n    restrict: 'AE',\n    template: formlyFormGetTemplate,\n    replace: true,\n    transclude: true,\n    scope: {\n      fields: '=',\n      model: '=',\n      form: '=?',\n      options: '=?'\n    },\n    controller: 'FormlyFormController',\n    link: formlyFormLink\n  };\n\n  function formlyFormGetTemplate(el, attrs) {\n    var rootEl = getRootEl();\n    var fieldRootEl = getFieldRootEl();\n    var formId = 'formly_' + currentFormId++;\n    var parentFormAttributes = '';\n    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n    }\n    return '\\n        <' + rootEl + ' class=\"formly\"\\n                 name=\"' + getFormName() + '\"\\n                 role=\"form\" ' + parentFormAttributes + '>\\n          <' + fieldRootEl + ' formly-field\\n               ng-repeat=\"field in fields ' + getTrackBy() + '\"\\n               ' + getHideDirective() + '=\"!field.hide\"\\n               class=\"formly-field\"\\n               options=\"field\"\\n               model=\"field.model || model\"\\n               original-model=\"model\"\\n               fields=\"fields\"\\n               form=\"theFormlyForm\"\\n               form-id=\"' + getFormName() + '\"\\n               form-state=\"options.formState\"\\n               form-options=\"options\"\\n               index=\"$index\">\\n          </' + fieldRootEl + '>\\n          <div ng-transclude class=\"' + getTranscludeClass() + '\"></div>\\n        </' + rootEl + '>\\n      ';\n\n    function getRootEl() {\n      return attrs.rootEl || 'ng-form';\n    }\n\n    function getFieldRootEl() {\n      return attrs.fieldRootEl || 'div';\n    }\n\n    function getHideDirective() {\n      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n    }\n\n    function getTrackBy() {\n      if (!attrs.trackBy) {\n        return '';\n      } else {\n        return 'track by ' + attrs.trackBy;\n      }\n    }\n\n    function getFormName() {\n      var formName = formId;\n      var bindName = attrs.bindName;\n      if (bindName) {\n        if (_angularFix2['default'].version.minor < 3) {\n          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n        }\n        // we can do a one-time binding here because we know we're in 1.3.x territory\n        formName = $interpolate.startSymbol() + '::\\'formly_\\' + ' + bindName + $interpolate.endSymbol();\n      }\n      return formName;\n    }\n\n    function getTranscludeClass() {\n      return attrs.transcludeClass || '';\n    }\n\n    function copyAttributes(attributes) {\n      var excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class', 'data-model', 'data-form', 'data-fields', 'data-options', 'data-name'];\n      var arrayAttrs = [];\n      _angularFix2['default'].forEach(attributes, function (_ref) {\n        var nodeName = _ref.nodeName;\n        var value = _ref.value;\n\n        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n          arrayAttrs.push(toKebabCase(nodeName) + '=\"' + value + '\"');\n        }\n      });\n      return arrayAttrs.join(' ');\n    }\n  }\n\n  function formlyFormLink(scope, el, attrs) {\n    setFormController();\n    fixChromeAutocomplete();\n\n    function setFormController() {\n      var formId = attrs.name;\n      scope.formId = formId;\n      scope.theFormlyForm = scope[formId];\n      if (attrs.form) {\n        var getter = $parse(attrs.form);\n        var setter = getter.assign;\n        var parentForm = getter(scope.$parent);\n        if (parentForm) {\n          scope.theFormlyForm = parentForm;\n          if (scope[formId]) {\n            scope.theFormlyForm.$removeControl(scope[formId]);\n          }\n\n          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n          // this is necessary because it's confusing to have a step between the form you pass in\n          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n          // to children forms :-( This line was added to solve this issue:\n          // https://github.com/formly-js/angular-formly/issues/287\n          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n          // so I expect it will remain this way for the life of angular 1.x\n          el.removeData('$formController');\n        } else {\n          setter(scope.$parent, scope[formId]);\n        }\n      }\n      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n        /* eslint no-console:0 */\n        formlyWarn('formly-form-has-no-formcontroller', 'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work', el, scope);\n      }\n    }\n\n    /*\n     * chrome autocomplete lameness\n     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n     */\n    function fixChromeAutocomplete() {\n      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n      if (global && !offInstance || onInstance) {\n        var input = document.createElement('input');\n        input.setAttribute('autocomplete', 'address-level4');\n        input.setAttribute('hidden', 'true');\n        el[0].appendChild(input);\n      }\n    }\n  }\n\n  // stateless util functions\n  function toKebabCase(string) {\n    if (string) {\n      return string.replace(/([A-Z])/g, function ($1) {\n        return '-' + $1.toLowerCase();\n      });\n    } else {\n      return '';\n    }\n  }\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./directives/formly-form.js\n **/","import angular from 'angular-fix'\n\nexport default formlyForm\n\n/**\n * @ngdoc directive\n * @name formlyForm\n * @restrict AE\n */\n// @ngInject\nfunction formlyForm(formlyUsability, formlyWarn, $parse, formlyConfig, $interpolate) {\n  let currentFormId = 1\n  return {\n    restrict: 'AE',\n    template: formlyFormGetTemplate,\n    replace: true,\n    transclude: true,\n    scope: {\n      fields: '=',\n      model: '=',\n      form: '=?',\n      options: '=?',\n    },\n    controller: 'FormlyFormController',\n    link: formlyFormLink,\n  }\n\n  function formlyFormGetTemplate(el, attrs) {\n    const rootEl = getRootEl()\n    const fieldRootEl = getFieldRootEl()\n    const formId = `formly_${currentFormId++}`\n    let parentFormAttributes = ''\n    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes)\n    }\n    return `\n        <${rootEl} class=\"formly\"\n                 name=\"${getFormName()}\"\n                 role=\"form\" ${parentFormAttributes}>\n          <${fieldRootEl} formly-field\n               ng-repeat=\"field in fields ${getTrackBy()}\"\n               ${getHideDirective()}=\"!field.hide\"\n               class=\"formly-field\"\n               options=\"field\"\n               model=\"field.model || model\"\n               original-model=\"model\"\n               fields=\"fields\"\n               form=\"theFormlyForm\"\n               form-id=\"${getFormName()}\"\n               form-state=\"options.formState\"\n               form-options=\"options\"\n               index=\"$index\">\n          </${fieldRootEl}>\n          <div ng-transclude class=\"${getTranscludeClass()}\"></div>\n        </${rootEl}>\n      `\n\n    function getRootEl() {\n      return attrs.rootEl || 'ng-form'\n    }\n\n    function getFieldRootEl() {\n      return attrs.fieldRootEl || 'div'\n    }\n\n    function getHideDirective() {\n      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if'\n    }\n\n    function getTrackBy() {\n      if (!attrs.trackBy) {\n        return ''\n      } else {\n        return `track by ${attrs.trackBy}`\n      }\n    }\n\n    function getFormName() {\n      let formName = formId\n      const bindName = attrs.bindName\n      if (bindName) {\n        if (angular.version.minor < 3) {\n          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3')\n        }\n        // we can do a one-time binding here because we know we're in 1.3.x territory\n        formName = `${$interpolate.startSymbol()}::'formly_' + ${bindName}${$interpolate.endSymbol()}`\n      }\n      return formName\n    }\n\n    function getTranscludeClass() {\n      return attrs.transcludeClass || ''\n    }\n\n    function copyAttributes(attributes) {\n      const excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class',\n        'data-model', 'data-form', 'data-fields', 'data-options', 'data-name']\n      const arrayAttrs = []\n      angular.forEach(attributes, ({nodeName, value}) => {\n        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n          arrayAttrs.push(`${toKebabCase(nodeName)}=\"${value}\"`)\n        }\n      })\n      return arrayAttrs.join(' ')\n    }\n  }\n\n  function formlyFormLink(scope, el, attrs) {\n    setFormController()\n    fixChromeAutocomplete()\n\n    function setFormController() {\n      const formId = attrs.name\n      scope.formId = formId\n      scope.theFormlyForm = scope[formId]\n      if (attrs.form) {\n        const getter = $parse(attrs.form)\n        const setter = getter.assign\n        const parentForm = getter(scope.$parent)\n        if (parentForm) {\n          scope.theFormlyForm = parentForm\n          if (scope[formId]) {\n            scope.theFormlyForm.$removeControl(scope[formId])\n          }\n\n          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n          // this is necessary because it's confusing to have a step between the form you pass in\n          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n          // to children forms :-( This line was added to solve this issue:\n          // https://github.com/formly-js/angular-formly/issues/287\n          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n          // so I expect it will remain this way for the life of angular 1.x\n          el.removeData('$formController')\n        } else {\n          setter(scope.$parent, scope[formId])\n        }\n      }\n      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n        /* eslint no-console:0 */\n        formlyWarn(\n          'formly-form-has-no-formcontroller',\n          'Your formly-form does not have a `form` property. Many functions of the form (like validation) may not work',\n          el,\n          scope\n        )\n      }\n    }\n\n    /*\n     * chrome autocomplete lameness\n     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n     */\n    function fixChromeAutocomplete() {\n      const global = formlyConfig.extras.removeChromeAutoComplete === true\n      const offInstance = scope.options && scope.options.removeChromeAutoComplete === false\n      const onInstance = scope.options && scope.options.removeChromeAutoComplete === true\n      if ((global && !offInstance) || onInstance) {\n        const input = document.createElement('input')\n        input.setAttribute('autocomplete', 'address-level4')\n        input.setAttribute('hidden', 'true')\n        el[0].appendChild(input)\n      }\n\n    }\n  }\n\n\n  // stateless util functions\n  function toKebabCase(string) {\n    if (string) {\n      return string.replace(/([A-Z])/g, $1 => '-' + $1.toLowerCase())\n    } else {\n      return ''\n    }\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./directives/formly-form.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _providersFormlyApiCheck = require('./providers/formlyApiCheck');\n\nvar _providersFormlyApiCheck2 = _interopRequireDefault(_providersFormlyApiCheck);\n\nvar _otherDocsBaseUrl = require('./other/docsBaseUrl');\n\nvar _otherDocsBaseUrl2 = _interopRequireDefault(_otherDocsBaseUrl);\n\nvar _providersFormlyUsability = require('./providers/formlyUsability');\n\nvar _providersFormlyUsability2 = _interopRequireDefault(_providersFormlyUsability);\n\nvar _providersFormlyConfig = require('./providers/formlyConfig');\n\nvar _providersFormlyConfig2 = _interopRequireDefault(_providersFormlyConfig);\n\nvar _providersFormlyValidationMessages = require('./providers/formlyValidationMessages');\n\nvar _providersFormlyValidationMessages2 = _interopRequireDefault(_providersFormlyValidationMessages);\n\nvar _servicesFormlyUtil = require('./services/formlyUtil');\n\nvar _servicesFormlyUtil2 = _interopRequireDefault(_servicesFormlyUtil);\n\nvar _servicesFormlyWarn = require('./services/formlyWarn');\n\nvar _servicesFormlyWarn2 = _interopRequireDefault(_servicesFormlyWarn);\n\nvar _directivesFormlyCustomValidation = require('./directives/formly-custom-validation');\n\nvar _directivesFormlyCustomValidation2 = _interopRequireDefault(_directivesFormlyCustomValidation);\n\nvar _directivesFormlyField = require('./directives/formly-field');\n\nvar _directivesFormlyField2 = _interopRequireDefault(_directivesFormlyField);\n\nvar _directivesFormlyFocus = require('./directives/formly-focus');\n\nvar _directivesFormlyFocus2 = _interopRequireDefault(_directivesFormlyFocus);\n\nvar _directivesFormlyForm = require('./directives/formly-form');\n\nvar _directivesFormlyForm2 = _interopRequireDefault(_directivesFormlyForm);\n\nvar _directivesFormlyFormController = require('./directives/formly-form.controller');\n\nvar _directivesFormlyFormController2 = _interopRequireDefault(_directivesFormlyFormController);\n\nvar _runFormlyNgModelAttrsManipulator = require('./run/formlyNgModelAttrsManipulator');\n\nvar _runFormlyNgModelAttrsManipulator2 = _interopRequireDefault(_runFormlyNgModelAttrsManipulator);\n\nvar _runFormlyCustomTags = require('./run/formlyCustomTags');\n\nvar _runFormlyCustomTags2 = _interopRequireDefault(_runFormlyCustomTags);\n\nvar ngModuleName = 'formly';\n\nexports['default'] = ngModuleName;\n\nvar ngModule = _angularFix2['default'].module(ngModuleName, []);\n\nngModule.constant('formlyApiCheck', _providersFormlyApiCheck2['default']);\nngModule.constant('formlyErrorAndWarningsUrlPrefix', _otherDocsBaseUrl2['default']);\nngModule.constant('formlyVersion', VERSION); // <-- webpack variable\n\nngModule.provider('formlyUsability', _providersFormlyUsability2['default']);\nngModule.provider('formlyConfig', _providersFormlyConfig2['default']);\n\nngModule.factory('formlyValidationMessages', _providersFormlyValidationMessages2['default']);\nngModule.factory('formlyUtil', _servicesFormlyUtil2['default']);\nngModule.factory('formlyWarn', _servicesFormlyWarn2['default']);\n\nngModule.directive('formlyCustomValidation', _directivesFormlyCustomValidation2['default']);\nngModule.directive('formlyField', _directivesFormlyField2['default']);\nngModule.directive('formlyFocus', _directivesFormlyFocus2['default']);\nngModule.directive('formlyForm', _directivesFormlyForm2['default']);\nngModule.controller('FormlyFormController', _directivesFormlyFormController2['default']);\n\nngModule.run(_runFormlyNgModelAttrsManipulator2['default']);\nngModule.run(_runFormlyCustomTags2['default']);\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./index.common.js\n **/","import angular from 'angular-fix'\n\nimport formlyApiCheck from './providers/formlyApiCheck'\nimport formlyErrorAndWarningsUrlPrefix from './other/docsBaseUrl'\nimport formlyUsability from './providers/formlyUsability'\nimport formlyConfig from './providers/formlyConfig'\nimport formlyValidationMessages from './providers/formlyValidationMessages'\nimport formlyUtil from './services/formlyUtil'\nimport formlyWarn from './services/formlyWarn'\n\nimport formlyCustomValidation from './directives/formly-custom-validation'\nimport formlyField from './directives/formly-field'\nimport formlyFocus from './directives/formly-focus'\nimport formlyForm from './directives/formly-form'\nimport FormlyFormController from './directives/formly-form.controller'\n\nimport formlyNgModelAttrsManipulator from './run/formlyNgModelAttrsManipulator'\nimport formlyCustomTags from './run/formlyCustomTags'\n\nconst ngModuleName = 'formly'\n\nexport default ngModuleName\n\nconst ngModule = angular.module(ngModuleName, [])\n\nngModule.constant('formlyApiCheck', formlyApiCheck)\nngModule.constant('formlyErrorAndWarningsUrlPrefix', formlyErrorAndWarningsUrlPrefix)\nngModule.constant('formlyVersion', VERSION) // <-- webpack variable\n\nngModule.provider('formlyUsability', formlyUsability)\nngModule.provider('formlyConfig', formlyConfig)\n\nngModule.factory('formlyValidationMessages', formlyValidationMessages)\nngModule.factory('formlyUtil', formlyUtil)\nngModule.factory('formlyWarn', formlyWarn)\n\nngModule.directive('formlyCustomValidation', formlyCustomValidation)\nngModule.directive('formlyField', formlyField)\nngModule.directive('formlyFocus', formlyFocus)\nngModule.directive('formlyForm', formlyForm)\nngModule.controller('FormlyFormController', FormlyFormController)\n\nngModule.run(formlyNgModelAttrsManipulator)\nngModule.run(formlyCustomTags)\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./index.common.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _apiCheck = require('api-check');\n\nvar _apiCheck2 = _interopRequireDefault(_apiCheck);\n\nvar apiCheck = (0, _apiCheck2['default'])({\n  output: {\n    prefix: 'angular-formly:',\n    docsBaseUrl: require('../other/docsBaseUrl')\n  }\n});\n\nfunction shapeRequiredIfNot(otherProps, propChecker) {\n  if (!_angularFix2['default'].isArray(otherProps)) {\n    otherProps = [otherProps];\n  }\n  var type = 'specified if these are not specified: `' + otherProps.join(', ') + '` (otherwise it\\'s optional)';\n\n  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n    var propExists = obj && obj.hasOwnProperty(propName);\n    var otherPropsExist = otherProps.some(function (otherProp) {\n      return obj && obj.hasOwnProperty(otherProp);\n    });\n    if (!otherPropsExist && !propExists) {\n      return apiCheck.utils.getError(propName, location, type);\n    } else if (propExists) {\n      return propChecker(prop, propName, location, obj);\n    }\n  }\n\n  shapeRequiredIfNotDefinition.type = type;\n  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n}\n\nvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\nvar specifyWrapperType = apiCheck.typeOrArrayOf(apiCheck.string).nullable;\n\nvar apiCheckProperty = apiCheck.func;\n\nvar apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n  warn: apiCheck.func,\n  'throw': apiCheck.func,\n  shape: apiCheck.func\n}));\n\nvar apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\nvar formlyWrapperType = apiCheck.shape({\n  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  overwriteOk: apiCheck.bool.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional\n}).strict;\n\nvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n  expression: formlyExpression,\n  message: formlyExpression.optional\n}).strict]));\n\nvar modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\nvar templateManipulators = apiCheck.shape({\n  preWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n  postWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional\n}).strict.nullable;\n\nvar validatorChecker = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n  expression: formlyExpression,\n  message: formlyExpression.optional\n}).strict]));\n\nvar watcherChecker = apiCheck.typeOrArrayOf(apiCheck.shape({\n  expression: formlyExpression.optional,\n  listener: formlyExpression.optional,\n  runFieldExpressions: apiCheck.bool.optional\n}));\n\nvar fieldOptionsApiShape = {\n  $$hashKey: apiCheck.any.optional,\n  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n  template: apiCheck.shape.ifNot(['type', 'templateUrl'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot(['type', 'template'], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  model: modelChecker.optional,\n  originalModel: modelChecker.optional,\n  className: apiCheck.string.optional,\n  id: apiCheck.string.optional,\n  name: apiCheck.string.optional,\n  expressionProperties: expressionProperties.optional,\n  extras: apiCheck.shape({\n    validateOnModelChange: apiCheck.bool.optional,\n    skipNgModelAttrsManipulator: apiCheck.oneOfType([apiCheck.string, apiCheck.bool]).optional\n  }).strict.optional,\n  data: apiCheck.object.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  modelOptions: apiCheck.shape({\n    updateOn: apiCheck.string.optional,\n    debounce: apiCheck.oneOfType([apiCheck.objectOf(apiCheck.number), apiCheck.number]).optional,\n    allowInvalid: apiCheck.bool.optional,\n    getterSetter: apiCheck.bool.optional,\n    timezone: apiCheck.string.optional\n  }).optional,\n  watcher: watcherChecker.optional,\n  validators: validatorChecker.optional,\n  asyncValidators: validatorChecker.optional,\n  parsers: apiCheck.arrayOf(formlyExpression).optional,\n  formatters: apiCheck.arrayOf(formlyExpression).optional,\n  noFormControl: apiCheck.bool.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  ngModelElAttrs: apiCheck.objectOf(apiCheck.string).optional,\n  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n    statement: apiCheck.shape.ifNot(['value', 'attribute', 'bound', 'boolean'], apiCheck.any).optional,\n    value: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    attribute: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    bound: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    boolean: apiCheck.shape.ifNot('statement', apiCheck.any).optional\n  }).strict).optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  link: apiCheck.func.optional,\n  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n  validation: apiCheck.shape({\n    show: apiCheck.bool.nullable.optional,\n    messages: apiCheck.objectOf(formlyExpression).optional,\n    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n  }).optional,\n  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n  value: apiCheck.func.optional,\n  runExpressions: apiCheck.func.optional,\n  templateManipulators: templateManipulators.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  initialValue: apiCheck.any.optional,\n  defaultValue: apiCheck.any.optional\n};\n\nvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\nvar formOptionsApi = apiCheck.shape({\n  formState: apiCheck.object.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  removeChromeAutoComplete: apiCheck.bool.optional,\n  templateManipulators: templateManipulators.optional,\n  manualModelWatcher: apiCheck.oneOfType([apiCheck.bool, apiCheck.func]).optional,\n  watchAllExpressions: apiCheck.bool.optional,\n  wrapper: specifyWrapperType.optional,\n  fieldTransform: apiCheck.oneOfType([apiCheck.func, apiCheck.array]).optional,\n  data: apiCheck.object.optional\n}).strict;\n\nvar fieldGroup = apiCheck.shape({\n  $$hashKey: apiCheck.any.optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  // danger. Nested field groups wont get api-checked...\n  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n  className: apiCheck.string.optional,\n  options: formOptionsApi.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  watcher: watcherChecker.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  data: apiCheck.object.optional,\n  model: modelChecker.optional,\n  form: apiCheck.object.optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n}).strict;\n\nvar typeOptionsDefaultOptions = _angularFix2['default'].copy(fieldOptionsApiShape);\ntypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\nvar formlyTypeOptions = apiCheck.shape({\n  name: apiCheck.string,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n  link: apiCheck.func.optional,\n  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n  'extends': apiCheck.string.optional,\n  wrapper: specifyWrapperType.optional,\n  data: apiCheck.object.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n  overwriteOk: apiCheck.bool.optional\n}).strict;\n\n_angularFix2['default'].extend(apiCheck, {\n  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n});\n\nexports['default'] = apiCheck;\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./providers/formlyApiCheck.js\n **/","import angular from 'angular-fix'\nimport apiCheckFactory from 'api-check'\n\nconst apiCheck = apiCheckFactory({\n  output: {\n    prefix: 'angular-formly:',\n    docsBaseUrl: require('../other/docsBaseUrl'),\n  },\n})\n\nfunction shapeRequiredIfNot(otherProps, propChecker) {\n  if (!angular.isArray(otherProps)) {\n    otherProps = [otherProps]\n  }\n  const type = `specified if these are not specified: \\`${otherProps.join(', ')}\\` (otherwise it's optional)`\n\n  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n    const propExists = obj && obj.hasOwnProperty(propName)\n    const otherPropsExist = otherProps.some(function(otherProp) {\n      return obj && obj.hasOwnProperty(otherProp)\n    })\n    if (!otherPropsExist && !propExists) {\n      return apiCheck.utils.getError(propName, location, type)\n    } else if (propExists) {\n      return propChecker(prop, propName, location, obj)\n    }\n  }\n\n  shapeRequiredIfNotDefinition.type = type\n  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition)\n}\n\nconst formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func])\nconst specifyWrapperType = apiCheck.typeOrArrayOf(apiCheck.string).nullable\n\nconst apiCheckProperty = apiCheck.func\n\nconst apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n  warn: apiCheck.func,\n  throw: apiCheck.func,\n  shape: apiCheck.func,\n}))\n\nconst apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']))\n\nconst formlyWrapperType = apiCheck.shape({\n  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  overwriteOk: apiCheck.bool.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n}).strict\n\nconst expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([\n  formlyExpression,\n  apiCheck.shape({\n    expression: formlyExpression,\n    message: formlyExpression.optional,\n  }).strict,\n]))\n\nconst modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object])\n\nconst templateManipulators = apiCheck.shape({\n  preWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n  postWrapper: apiCheck.arrayOf(apiCheck.func).nullable.optional,\n}).strict.nullable\n\nconst validatorChecker = apiCheck.objectOf(apiCheck.oneOfType([\n  formlyExpression, apiCheck.shape({\n    expression: formlyExpression,\n    message: formlyExpression.optional,\n  }).strict,\n]))\n\nconst watcherChecker = apiCheck.typeOrArrayOf(\n  apiCheck.shape({\n    expression: formlyExpression.optional,\n    listener: formlyExpression.optional,\n    runFieldExpressions: apiCheck.bool.optional,\n  })\n)\n\nconst fieldOptionsApiShape = {\n  $$hashKey: apiCheck.any.optional,\n  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n  template: apiCheck.shape.ifNot(\n    ['type', 'templateUrl'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  templateUrl: apiCheck.shape.ifNot(\n    ['type', 'template'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  model: modelChecker.optional,\n  originalModel: modelChecker.optional,\n  className: apiCheck.string.optional,\n  id: apiCheck.string.optional,\n  name: apiCheck.string.optional,\n  expressionProperties: expressionProperties.optional,\n  extras: apiCheck.shape({\n    validateOnModelChange: apiCheck.bool.optional,\n    skipNgModelAttrsManipulator: apiCheck.oneOfType([\n      apiCheck.string, apiCheck.bool,\n    ]).optional,\n  }).strict.optional,\n  data: apiCheck.object.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  modelOptions: apiCheck.shape({\n    updateOn: apiCheck.string.optional,\n    debounce: apiCheck.oneOfType([\n      apiCheck.objectOf(apiCheck.number), apiCheck.number,\n    ]).optional,\n    allowInvalid: apiCheck.bool.optional,\n    getterSetter: apiCheck.bool.optional,\n    timezone: apiCheck.string.optional,\n  }).optional,\n  watcher: watcherChecker.optional,\n  validators: validatorChecker.optional,\n  asyncValidators: validatorChecker.optional,\n  parsers: apiCheck.arrayOf(formlyExpression).optional,\n  formatters: apiCheck.arrayOf(formlyExpression).optional,\n  noFormControl: apiCheck.bool.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  ngModelElAttrs: apiCheck.objectOf(apiCheck.string).optional,\n  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n    statement: apiCheck.shape.ifNot(['value', 'attribute', 'bound', 'boolean'], apiCheck.any).optional,\n    value: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    attribute: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    bound: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n    boolean: apiCheck.shape.ifNot('statement', apiCheck.any).optional,\n  }).strict).optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  link: apiCheck.func.optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.string, apiCheck.func, apiCheck.array,\n  ]).optional,\n  validation: apiCheck.shape({\n    show: apiCheck.bool.nullable.optional,\n    messages: apiCheck.objectOf(formlyExpression).optional,\n    errorExistsAndShouldBeVisible: apiCheck.bool.optional,\n  }).optional,\n  formControl: apiCheck.typeOrArrayOf(apiCheck.object).optional,\n  value: apiCheck.func.optional,\n  runExpressions: apiCheck.func.optional,\n  templateManipulators: templateManipulators.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  initialValue: apiCheck.any.optional,\n  defaultValue: apiCheck.any.optional,\n}\n\n\nconst formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict\n\nconst formOptionsApi = apiCheck.shape({\n  formState: apiCheck.object.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  removeChromeAutoComplete: apiCheck.bool.optional,\n  templateManipulators: templateManipulators.optional,\n  manualModelWatcher: apiCheck.oneOfType([apiCheck.bool, apiCheck.func]).optional,\n  watchAllExpressions: apiCheck.bool.optional,\n  wrapper: specifyWrapperType.optional,\n  fieldTransform: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.array,\n  ]).optional,\n  data: apiCheck.object.optional,\n}).strict\n\n\nconst fieldGroup = apiCheck.shape({\n  $$hashKey: apiCheck.any.optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  // danger. Nested field groups wont get api-checked...\n  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n  className: apiCheck.string.optional,\n  options: formOptionsApi.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  watcher: watcherChecker.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  data: apiCheck.object.optional,\n  model: modelChecker.optional,\n  form: apiCheck.object.optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n}).strict\n\nconst typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape)\ntypeOptionsDefaultOptions.key = apiCheck.string.optional\n\nconst formlyTypeOptions = apiCheck.shape({\n  name: apiCheck.string,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.string, apiCheck.array,\n  ]).optional,\n  link: apiCheck.func.optional,\n  defaultOptions: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions),\n  ]).optional,\n  extends: apiCheck.string.optional,\n  wrapper: specifyWrapperType.optional,\n  data: apiCheck.object.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n  overwriteOk: apiCheck.bool.optional,\n}).strict\n\nangular.extend(apiCheck, {\n  formlyTypeOptions, formlyFieldOptions, formlyExpression, formlyWrapperType, fieldGroup, formOptionsApi,\n})\n\nexport default apiCheck\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./providers/formlyApiCheck.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _otherUtils = require('../other/utils');\n\nvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\nexports['default'] = formlyConfig;\n\n// @ngInject\nfunction formlyConfig(formlyUsabilityProvider, formlyErrorAndWarningsUrlPrefix, formlyApiCheck) {\n  var _this2 = this;\n\n  var typeMap = {};\n  var templateWrappersMap = {};\n  var defaultWrapperName = 'default';\n  var _this = this;\n  var getError = formlyUsabilityProvider.getFormlyError;\n\n  _angularFix2['default'].extend(this, {\n    setType: setType,\n    getType: getType,\n    getTypes: getTypes,\n    getTypeHeritage: getTypeHeritage,\n    setWrapper: setWrapper,\n    getWrapper: getWrapper,\n    getWrapperByType: getWrapperByType,\n    removeWrapperByName: removeWrapperByName,\n    removeWrappersForType: removeWrappersForType,\n    disableWarnings: false,\n    extras: {\n      disableNgModelAttrsManipulator: false,\n      fieldTransform: [],\n      ngModelAttrsManipulatorPreferUnbound: false,\n      removeChromeAutoComplete: false,\n      defaultHideDirective: 'ng-if',\n      getFieldId: null\n    },\n    templateManipulators: {\n      preWrapper: [],\n      postWrapper: []\n    },\n    $get: function $get() {\n      return _this2;\n    }\n  });\n\n  function setType(options) {\n    if (_angularFix2['default'].isArray(options)) {\n      var _ret = (function () {\n        var allTypes = [];\n        _angularFix2['default'].forEach(options, function (item) {\n          allTypes.push(setType(item));\n        });\n        return {\n          v: allTypes\n        };\n      })();\n\n      if (typeof _ret === 'object') return _ret.v;\n    } else if (_angularFix2['default'].isObject(options)) {\n      checkType(options);\n      if (options['extends']) {\n        extendTypeOptions(options);\n      }\n      typeMap[options.name] = options;\n      return typeMap[options.name];\n    } else {\n      throw getError('You must provide an object or array for setType. You provided: ' + JSON.stringify(arguments));\n    }\n  }\n\n  function checkType(options) {\n    formlyApiCheck['throw'](formlyApiCheck.formlyTypeOptions, options, {\n      prefix: 'formlyConfig.setType',\n      url: 'settype-validation-failed'\n    });\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, typeMap, options, 'types');\n    } else {\n      options.overwriteOk = undefined;\n    }\n  }\n\n  function extendTypeOptions(options) {\n    var extendsType = getType(options['extends'], true, options);\n    extendTypeControllerFunction(options, extendsType);\n    extendTypeLinkFunction(options, extendsType);\n    extendTypeDefaultOptions(options, extendsType);\n    _otherUtils2['default'].reverseDeepMerge(options, extendsType);\n    extendTemplate(options, extendsType);\n  }\n\n  function extendTemplate(options, extendsType) {\n    if (options.template && extendsType.templateUrl) {\n      delete options.templateUrl;\n    } else if (options.templateUrl && extendsType.template) {\n      delete options.template;\n    }\n  }\n\n  function extendTypeControllerFunction(options, extendsType) {\n    var extendsCtrl = extendsType.controller;\n    if (!_angularFix2['default'].isDefined(extendsCtrl)) {\n      return;\n    }\n    var optionsCtrl = options.controller;\n    if (_angularFix2['default'].isDefined(optionsCtrl)) {\n      options.controller = function ($scope, $controller) {\n        $controller(extendsCtrl, { $scope: $scope });\n        $controller(optionsCtrl, { $scope: $scope });\n      };\n      options.controller.$inject = ['$scope', '$controller'];\n    } else {\n      options.controller = extendsCtrl;\n    }\n  }\n\n  function extendTypeLinkFunction(options, extendsType) {\n    var extendsFn = extendsType.link;\n    if (!_angularFix2['default'].isDefined(extendsFn)) {\n      return;\n    }\n    var optionsFn = options.link;\n    if (_angularFix2['default'].isDefined(optionsFn)) {\n      options.link = function () {\n        extendsFn.apply(undefined, arguments);\n        optionsFn.apply(undefined, arguments);\n      };\n    } else {\n      options.link = extendsFn;\n    }\n  }\n\n  function extendTypeDefaultOptions(options, extendsType) {\n    var extendsDO = extendsType.defaultOptions;\n    if (!_angularFix2['default'].isDefined(extendsDO)) {\n      return;\n    }\n    var optionsDO = options.defaultOptions || {};\n    var optionsDOIsFn = _angularFix2['default'].isFunction(optionsDO);\n    var extendsDOIsFn = _angularFix2['default'].isFunction(extendsDO);\n    if (extendsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts, scope) {\n        var extendsDefaultOptions = extendsDO(opts, scope);\n        var mergedDefaultOptions = {};\n        _otherUtils2['default'].reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n        var extenderOptionsDefaultOptions = optionsDO;\n        if (optionsDOIsFn) {\n          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions, scope);\n        }\n        _otherUtils2['default'].reverseDeepMerge(extenderOptionsDefaultOptions, extendsDefaultOptions);\n        return extenderOptionsDefaultOptions;\n      };\n    } else if (optionsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts, scope) {\n        var newDefaultOptions = {};\n        _otherUtils2['default'].reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n        return optionsDO(newDefaultOptions, scope);\n      };\n    }\n  }\n\n  function getType(name, throwError, errorContext) {\n    if (!name) {\n      return undefined;\n    }\n    var type = typeMap[name];\n    if (!type && throwError === true) {\n      throw getError('There is no type by the name of \"' + name + '\": ' + JSON.stringify(errorContext));\n    } else {\n      return type;\n    }\n  }\n\n  function getTypes() {\n    return typeMap;\n  }\n\n  function getTypeHeritage(parent) {\n    var heritage = [];\n    var type = parent;\n    if (_angularFix2['default'].isString(type)) {\n      type = getType(parent);\n    }\n    parent = type['extends'];\n    while (parent) {\n      type = getType(parent);\n      heritage.push(type);\n      parent = type['extends'];\n    }\n    return heritage;\n  }\n\n  function setWrapper(_x, _x2) {\n    var _again = true;\n\n    _function: while (_again) {\n      var options = _x,\n          name = _x2;\n      _again = false;\n\n      if (_angularFix2['default'].isArray(options)) {\n        return options.map(function (wrapperOptions) {\n          return setWrapper(wrapperOptions);\n        });\n      } else if (_angularFix2['default'].isObject(options)) {\n        options.types = getOptionsTypes(options);\n        options.name = getOptionsName(options, name);\n        checkWrapperAPI(options);\n        templateWrappersMap[options.name] = options;\n        return options;\n      } else if (_angularFix2['default'].isString(options)) {\n        _x = {\n          template: options,\n          name: name\n        };\n        _x2 = undefined;\n        _again = true;\n        continue _function;\n      }\n    }\n  }\n\n  function getOptionsTypes(options) {\n    if (_angularFix2['default'].isString(options.types)) {\n      return [options.types];\n    }\n    if (!_angularFix2['default'].isDefined(options.types)) {\n      return [];\n    } else {\n      return options.types;\n    }\n  }\n\n  function getOptionsName(options, name) {\n    return options.name || name || options.types.join(' ') || defaultWrapperName;\n  }\n\n  function checkWrapperAPI(options) {\n    formlyUsabilityProvider.checkWrapper(options);\n    if (options.template) {\n      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n    }\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n    } else {\n      delete options.overwriteOk;\n    }\n    checkWrapperTypes(options);\n  }\n\n  function checkWrapperTypes(options) {\n    var shouldThrow = !_angularFix2['default'].isArray(options.types) || !options.types.every(_angularFix2['default'].isString);\n    if (shouldThrow) {\n      throw getError('Attempted to create a template wrapper with types that is not a string or an array of strings');\n    }\n  }\n\n  function checkOverwrite(property, object, newValue, objectName) {\n    if (object.hasOwnProperty(property)) {\n      warn('overwriting-types-or-wrappers', ['Attempting to overwrite ' + property + ' on ' + objectName + ' which is currently', JSON.stringify(object[property]) + ' with ' + JSON.stringify(newValue), 'To supress this warning, specify the property \"overwriteOk: true\"'].join(' '));\n    }\n  }\n\n  function getWrapper(name) {\n    return templateWrappersMap[name || defaultWrapperName];\n  }\n\n  function getWrapperByType(type) {\n    /* eslint prefer-const:0 */\n    var wrappers = [];\n    for (var _name in templateWrappersMap) {\n      if (templateWrappersMap.hasOwnProperty(_name)) {\n        if (templateWrappersMap[_name].types && templateWrappersMap[_name].types.indexOf(type) !== -1) {\n          wrappers.push(templateWrappersMap[_name]);\n        }\n      }\n    }\n    return wrappers;\n  }\n\n  function removeWrapperByName(name) {\n    var wrapper = templateWrappersMap[name];\n    delete templateWrappersMap[name];\n    return wrapper;\n  }\n\n  function removeWrappersForType(type) {\n    var wrappers = getWrapperByType(type);\n    if (!wrappers) {\n      return undefined;\n    }\n    if (!_angularFix2['default'].isArray(wrappers)) {\n      return removeWrapperByName(wrappers.name);\n    } else {\n      wrappers.forEach(function (wrapper) {\n        return removeWrapperByName(wrapper.name);\n      });\n      return wrappers;\n    }\n  }\n\n  function warn() {\n    if (!_this.disableWarnings && console.warn) {\n      /* eslint no-console:0 */\n      var args = Array.prototype.slice.call(arguments);\n      var warnInfoSlug = args.shift();\n      args.unshift('Formly Warning:');\n      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n      console.warn.apply(console, _toConsumableArray(args));\n    }\n  }\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./providers/formlyConfig.js\n **/","import angular from 'angular-fix'\nimport utils from '../other/utils'\n\nexport default formlyConfig\n\n// @ngInject\nfunction formlyConfig(formlyUsabilityProvider, formlyErrorAndWarningsUrlPrefix, formlyApiCheck) {\n\n  const typeMap = {}\n  const templateWrappersMap = {}\n  const defaultWrapperName = 'default'\n  const _this = this\n  const getError = formlyUsabilityProvider.getFormlyError\n\n  angular.extend(this, {\n    setType,\n    getType,\n    getTypes,\n    getTypeHeritage,\n    setWrapper,\n    getWrapper,\n    getWrapperByType,\n    removeWrapperByName,\n    removeWrappersForType,\n    disableWarnings: false,\n    extras: {\n      disableNgModelAttrsManipulator: false,\n      fieldTransform: [],\n      ngModelAttrsManipulatorPreferUnbound: false,\n      removeChromeAutoComplete: false,\n      defaultHideDirective: 'ng-if',\n      getFieldId: null,\n    },\n    templateManipulators: {\n      preWrapper: [],\n      postWrapper: [],\n    },\n    $get: () => this,\n  })\n\n  function setType(options) {\n    if (angular.isArray(options)) {\n      const allTypes = []\n      angular.forEach(options, item => {\n        allTypes.push(setType(item))\n      })\n      return allTypes\n    } else if (angular.isObject(options)) {\n      checkType(options)\n      if (options.extends) {\n        extendTypeOptions(options)\n      }\n      typeMap[options.name] = options\n      return typeMap[options.name]\n    } else {\n      throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`)\n    }\n  }\n\n  function checkType(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyTypeOptions, options, {\n      prefix: 'formlyConfig.setType',\n      url: 'settype-validation-failed',\n    })\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, typeMap, options, 'types')\n    } else {\n      options.overwriteOk = undefined\n    }\n  }\n\n  function extendTypeOptions(options) {\n    const extendsType = getType(options.extends, true, options)\n    extendTypeControllerFunction(options, extendsType)\n    extendTypeLinkFunction(options, extendsType)\n    extendTypeDefaultOptions(options, extendsType)\n    utils.reverseDeepMerge(options, extendsType)\n    extendTemplate(options, extendsType)\n  }\n\n  function extendTemplate(options, extendsType) {\n    if (options.template && extendsType.templateUrl) {\n      delete options.templateUrl\n    } else if (options.templateUrl && extendsType.template) {\n      delete options.template\n    }\n  }\n\n  function extendTypeControllerFunction(options, extendsType) {\n    const extendsCtrl = extendsType.controller\n    if (!angular.isDefined(extendsCtrl)) {\n      return\n    }\n    const optionsCtrl = options.controller\n    if (angular.isDefined(optionsCtrl)) {\n      options.controller = function($scope, $controller) {\n        $controller(extendsCtrl, {$scope})\n        $controller(optionsCtrl, {$scope})\n      }\n      options.controller.$inject = ['$scope', '$controller']\n    } else {\n      options.controller = extendsCtrl\n    }\n  }\n\n  function extendTypeLinkFunction(options, extendsType) {\n    const extendsFn = extendsType.link\n    if (!angular.isDefined(extendsFn)) {\n      return\n    }\n    const optionsFn = options.link\n    if (angular.isDefined(optionsFn)) {\n      options.link = function() {\n        extendsFn(...arguments)\n        optionsFn(...arguments)\n      }\n    } else {\n      options.link = extendsFn\n    }\n  }\n\n  function extendTypeDefaultOptions(options, extendsType) {\n    const extendsDO = extendsType.defaultOptions\n    if (!angular.isDefined(extendsDO)) {\n      return\n    }\n    const optionsDO = options.defaultOptions || {}\n    const optionsDOIsFn = angular.isFunction(optionsDO)\n    const extendsDOIsFn = angular.isFunction(extendsDO)\n    if (extendsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts, scope) {\n        const extendsDefaultOptions = extendsDO(opts, scope)\n        const mergedDefaultOptions = {}\n        utils.reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions)\n        let extenderOptionsDefaultOptions = optionsDO\n        if (optionsDOIsFn) {\n          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions, scope)\n        }\n        utils.reverseDeepMerge(extenderOptionsDefaultOptions, extendsDefaultOptions)\n        return extenderOptionsDefaultOptions\n      }\n    } else if (optionsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts, scope) {\n        const newDefaultOptions = {}\n        utils.reverseDeepMerge(newDefaultOptions, opts, extendsDO)\n        return optionsDO(newDefaultOptions, scope)\n      }\n    }\n  }\n\n  function getType(name, throwError, errorContext) {\n    if (!name) {\n      return undefined\n    }\n    const type = typeMap[name]\n    if (!type && throwError === true) {\n      throw getError(\n        `There is no type by the name of \"${name}\": ${JSON.stringify(errorContext)}`\n      )\n    } else {\n      return type\n    }\n  }\n\n  function getTypes() {\n    return typeMap\n  }\n\n  function getTypeHeritage(parent) {\n    const heritage = []\n    let type = parent\n    if (angular.isString(type)) {\n      type = getType(parent)\n    }\n    parent = type.extends\n    while (parent) {\n      type = getType(parent)\n      heritage.push(type)\n      parent = type.extends\n    }\n    return heritage\n  }\n\n\n  function setWrapper(options, name) {\n    if (angular.isArray(options)) {\n      return options.map(wrapperOptions => setWrapper(wrapperOptions))\n    } else if (angular.isObject(options)) {\n      options.types = getOptionsTypes(options)\n      options.name = getOptionsName(options, name)\n      checkWrapperAPI(options)\n      templateWrappersMap[options.name] = options\n      return options\n    } else if (angular.isString(options)) {\n      return setWrapper({\n        template: options,\n        name,\n      })\n    }\n  }\n\n  function getOptionsTypes(options) {\n    if (angular.isString(options.types)) {\n      return [options.types]\n    }\n    if (!angular.isDefined(options.types)) {\n      return []\n    } else {\n      return options.types\n    }\n  }\n\n  function getOptionsName(options, name) {\n    return options.name || name || options.types.join(' ') || defaultWrapperName\n  }\n\n  function checkWrapperAPI(options) {\n    formlyUsabilityProvider.checkWrapper(options)\n    if (options.template) {\n      formlyUsabilityProvider.checkWrapperTemplate(options.template, options)\n    }\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers')\n    } else {\n      delete options.overwriteOk\n    }\n    checkWrapperTypes(options)\n  }\n\n  function checkWrapperTypes(options) {\n    const shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString)\n    if (shouldThrow) {\n      throw getError(`Attempted to create a template wrapper with types that is not a string or an array of strings`)\n    }\n  }\n\n  function checkOverwrite(property, object, newValue, objectName) {\n    if (object.hasOwnProperty(property)) {\n      warn('overwriting-types-or-wrappers', [\n        `Attempting to overwrite ${property} on ${objectName} which is currently`,\n        `${JSON.stringify(object[property])} with ${JSON.stringify(newValue)}`,\n        `To supress this warning, specify the property \"overwriteOk: true\"`,\n      ].join(' '))\n    }\n  }\n\n  function getWrapper(name) {\n    return templateWrappersMap[name || defaultWrapperName]\n  }\n\n  function getWrapperByType(type) {\n    /* eslint prefer-const:0 */\n    const wrappers = []\n    for (let name in templateWrappersMap) {\n      if (templateWrappersMap.hasOwnProperty(name)) {\n        if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n          wrappers.push(templateWrappersMap[name])\n        }\n      }\n    }\n    return wrappers\n  }\n\n  function removeWrapperByName(name) {\n    const wrapper = templateWrappersMap[name]\n    delete templateWrappersMap[name]\n    return wrapper\n  }\n\n  function removeWrappersForType(type) {\n    const wrappers = getWrapperByType(type)\n    if (!wrappers) {\n      return undefined\n    }\n    if (!angular.isArray(wrappers)) {\n      return removeWrapperByName(wrappers.name)\n    } else {\n      wrappers.forEach((wrapper) => removeWrapperByName(wrapper.name))\n      return wrappers\n    }\n  }\n\n\n  function warn() {\n    if (!_this.disableWarnings && console.warn) {\n      /* eslint no-console:0 */\n      const args = Array.prototype.slice.call(arguments)\n      const warnInfoSlug = args.shift()\n      args.unshift('Formly Warning:')\n      args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`)\n      console.warn(...args)\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./providers/formlyConfig.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = formlyUsability;\n\n// @ngInject\nfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n  var _this = this;\n\n  _angularFix2['default'].extend(this, {\n    getFormlyError: getFormlyError,\n    getFieldError: getFieldError,\n    checkWrapper: checkWrapper,\n    checkWrapperTemplate: checkWrapperTemplate,\n    getErrorMessage: getErrorMessage,\n    $get: function $get() {\n      return _this;\n    }\n  });\n\n  function getFieldError(errorInfoSlug, message, field) {\n    if (arguments.length < 3) {\n      field = message;\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message) + (' Field definition: ' + _angularFix2['default'].toJson(field)));\n  }\n\n  function getFormlyError(errorInfoSlug, message) {\n    if (!message) {\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message));\n  }\n\n  function getErrorMessage(errorInfoSlug, message) {\n    var url = '';\n    if (errorInfoSlug !== null) {\n      url = '' + formlyErrorAndWarningsUrlPrefix + errorInfoSlug;\n    }\n    return 'Formly Error: ' + message + '. ' + url;\n  }\n\n  function checkWrapper(wrapper) {\n    formlyApiCheck['throw'](formlyApiCheck.formlyWrapperType, wrapper, {\n      prefix: 'formlyConfig.setWrapper',\n      urlSuffix: 'setwrapper-validation-failed'\n    });\n  }\n\n  function checkWrapperTemplate(template, additionalInfo) {\n    var formlyTransclude = '<formly-transclude></formly-transclude>';\n    if (template.indexOf(formlyTransclude) === -1) {\n      throw getFormlyError('Template wrapper templates must use \"' + formlyTransclude + '\" somewhere in them. ' + ('This one does not have \"<formly-transclude></formly-transclude>\" in it: ' + template) + '\\n' + ('Additional information: ' + JSON.stringify(additionalInfo)));\n    }\n  }\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./providers/formlyUsability.js\n **/","import angular from 'angular-fix'\n\nexport default formlyUsability\n\n// @ngInject\nfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n  angular.extend(this, {\n    getFormlyError,\n    getFieldError,\n    checkWrapper,\n    checkWrapperTemplate,\n    getErrorMessage,\n    $get: () => this,\n  })\n\n  function getFieldError(errorInfoSlug, message, field) {\n    if (arguments.length < 3) {\n      field = message\n      message = errorInfoSlug\n      errorInfoSlug = null\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message) + ` Field definition: ${angular.toJson(field)}`)\n  }\n\n  function getFormlyError(errorInfoSlug, message) {\n    if (!message) {\n      message = errorInfoSlug\n      errorInfoSlug = null\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message))\n  }\n\n  function getErrorMessage(errorInfoSlug, message) {\n    let url = ''\n    if (errorInfoSlug !== null) {\n      url = `${formlyErrorAndWarningsUrlPrefix}${errorInfoSlug}`\n    }\n    return `Formly Error: ${message}. ${url}`\n  }\n\n  function checkWrapper(wrapper) {\n    formlyApiCheck.throw(formlyApiCheck.formlyWrapperType, wrapper, {\n      prefix: 'formlyConfig.setWrapper',\n      urlSuffix: 'setwrapper-validation-failed',\n    })\n  }\n\n  function checkWrapperTemplate(template, additionalInfo) {\n    const formlyTransclude = '<formly-transclude></formly-transclude>'\n    if (template.indexOf(formlyTransclude) === -1) {\n      throw getFormlyError(\n        `Template wrapper templates must use \"${formlyTransclude}\" somewhere in them. ` +\n        `This one does not have \"<formly-transclude></formly-transclude>\" in it: ${template}` + '\\n' +\n        `Additional information: ${JSON.stringify(additionalInfo)}`\n      )\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./providers/formlyUsability.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = formlyValidationMessages;\n\n// @ngInject\nfunction formlyValidationMessages() {\n\n  var validationMessages = {\n    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n    addStringMessage: addStringMessage,\n    messages: {}\n  };\n\n  return validationMessages;\n\n  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n  }\n\n  function addStringMessage(name, string) {\n    validationMessages.messages[name] = function () {\n      return string;\n    };\n  }\n\n  function templateOptionValue(prop, prefix, suffix, alternate) {\n    return function getValidationMessage(viewValue, modelValue, scope) {\n      if (typeof scope.options.templateOptions[prop] !== 'undefined') {\n        return prefix + ' ' + scope.options.templateOptions[prop] + ' ' + suffix;\n      } else {\n        return alternate;\n      }\n    };\n  }\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./providers/formlyValidationMessages.js\n **/","export default formlyValidationMessages\n\n\n// @ngInject\nfunction formlyValidationMessages() {\n\n  const validationMessages = {\n    addTemplateOptionValueMessage,\n    addStringMessage,\n    messages: {},\n  }\n\n  return validationMessages\n\n  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate)\n  }\n\n  function addStringMessage(name, string) {\n    validationMessages.messages[name] = () => string\n  }\n\n\n  function templateOptionValue(prop, prefix, suffix, alternate) {\n    return function getValidationMessage(viewValue, modelValue, scope) {\n      if (typeof scope.options.templateOptions[prop] !== 'undefined') {\n        return `${prefix} ${scope.options.templateOptions[prop]} ${suffix}`\n      } else {\n        return alternate\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./providers/formlyValidationMessages.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nexports['default'] = addCustomTags;\n\n// @ngInject\nfunction addCustomTags($document) {\n  // IE8 check ->\n  // https://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx\n  if ($document && $document.documentMode < 9) {\n    (function () {\n      var document = $document.get(0);\n      // add the custom elements that we need for formly\n      var customElements = ['formly-field', 'formly-form'];\n      _angularFix2['default'].forEach(customElements, function (el) {\n        document.createElement(el);\n      });\n    })();\n  }\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./run/formlyCustomTags.js\n **/","import angular from 'angular-fix'\nexport default addCustomTags\n\n// @ngInject\nfunction addCustomTags($document) {\n  // IE8 check ->\n  // https://msdn.microsoft.com/en-us/library/cc196988(v=vs.85).aspx\n  if ($document && $document.documentMode < 9) {\n    const document = $document.get(0)\n    // add the custom elements that we need for formly\n    const customElements = [\n      'formly-field', 'formly-form',\n    ]\n    angular.forEach(customElements, el => {\n      document.createElement(el)\n    })\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./run/formlyCustomTags.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _angularFix = require('angular-fix');\n\nvar _angularFix2 = _interopRequireDefault(_angularFix);\n\nvar _otherUtils = require('../other/utils');\n\nexports['default'] = addFormlyNgModelAttrsManipulator;\n\n// @ngInject\nfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n    return;\n  }\n  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    var node = document.createElement('div');\n    var skip = options.extras && options.extras.skipNgModelAttrsManipulator;\n    if (skip === true) {\n      return template;\n    }\n    node.innerHTML = template;\n\n    var modelNodes = getNgModelNodes(node, skip);\n    if (!modelNodes || !modelNodes.length) {\n      return template;\n    }\n\n    addIfNotPresent(modelNodes, 'id', scope.id);\n    addIfNotPresent(modelNodes, 'name', scope.name || scope.id);\n\n    addValidation();\n    alterNgModelAttr();\n    addModelOptions();\n    addTemplateOptionsAttrs();\n    addNgModelElAttrs();\n\n    return node.innerHTML;\n\n    function addValidation() {\n      if (_angularFix2['default'].isDefined(options.validators) || _angularFix2['default'].isDefined(options.validation.messages)) {\n        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n      }\n    }\n\n    function alterNgModelAttr() {\n      if (isPropertyAccessor(options.key)) {\n        addRegardlessOfPresence(modelNodes, 'ng-model', 'model.' + options.key);\n      }\n    }\n\n    function addModelOptions() {\n      if (_angularFix2['default'].isDefined(options.modelOptions)) {\n        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n        if (options.modelOptions.getterSetter) {\n          addRegardlessOfPresence(modelNodes, 'ng-model', 'options.value');\n        }\n      }\n    }\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return;\n      }\n      var to = options.templateOptions || {};\n      var ep = options.expressionProperties || {};\n\n      var ngModelAttributes = getBuiltInAttributes();\n\n      // extend with the user's specifications winning\n      _angularFix2['default'].extend(ngModelAttributes, options.ngModelAttrs);\n\n      // Feel free to make this more simple :-)\n      _angularFix2['default'].forEach(ngModelAttributes, function (val, name) {\n        /* eslint complexity:[2, 14] */\n        var attrVal = undefined,\n            attrName = undefined;\n        var ref = 'options.templateOptions[\\'' + name + '\\']';\n        var toVal = to[name];\n        var epVal = getEpValue(ep, name);\n\n        var inTo = _angularFix2['default'].isDefined(toVal);\n        var inEp = _angularFix2['default'].isDefined(epVal);\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value;\n          attrVal = name;\n        } else if (val.statement && inTo) {\n          attrName = val.statement;\n          if (_angularFix2['default'].isString(to[name])) {\n            attrVal = '$eval(' + ref + ')';\n          } else if (_angularFix2['default'].isFunction(to[name])) {\n            attrVal = ref + '(model[options.key], options, this, $event)';\n          } else {\n            throw new Error('options.templateOptions.' + name + ' must be a string or function: ' + JSON.stringify(options));\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound;\n          attrVal = ref;\n        } else if ((val.attribute || val.boolean) && inEp) {\n          attrName = val.attribute || val.boolean;\n          attrVal = '' + $interpolate.startSymbol() + ref + $interpolate.endSymbol();\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute;\n          attrVal = toVal;\n        } else if (val.boolean) {\n          if (inTo && !inEp && toVal) {\n            attrName = val.boolean;\n            attrVal = true;\n          } else {\n            /* eslint no-empty:0 */\n            // empty to illustrate that a boolean will not be added via val.bound\n            // if you want it added via val.bound, then put it in expressionProperties\n          }\n        } else if (val.bound && inTo) {\n            attrName = val.bound;\n            attrVal = ref;\n          }\n\n        if (_angularFix2['default'].isDefined(attrName) && _angularFix2['default'].isDefined(attrVal)) {\n          addIfNotPresent(modelNodes, attrName, attrVal);\n        }\n      });\n    }\n\n    function addNgModelElAttrs() {\n      _angularFix2['default'].forEach(options.ngModelElAttrs, function (val, name) {\n        addRegardlessOfPresence(modelNodes, name, val);\n      });\n    }\n  }\n\n  // Utility functions\n  function getNgModelNodes(node, skip) {\n    var selectorNot = _angularFix2['default'].isString(skip) ? ':not(' + skip + ')' : '';\n    var skipNot = ':not([formly-skip-ng-model-attrs-manipulator])';\n    var query = '[ng-model]' + selectorNot + skipNot + ', [data-ng-model]' + selectorNot + skipNot;\n    try {\n      return node.querySelectorAll(query);\n    } catch (e) {\n      //this code is needed for IE8, as it does not support the CSS3 ':not' selector\n      //it should be removed when IE8 support is dropped\n      return getNgModelNodesFallback(node, skip);\n    }\n  }\n\n  function getNgModelNodesFallback(node, skip) {\n    var allNgModelNodes = node.querySelectorAll('[ng-model], [data-ng-model]');\n    var matchingNgModelNodes = [];\n\n    //make sure this array is compatible with NodeList type by adding an 'item' function\n    matchingNgModelNodes.item = function (i) {\n      return this[i];\n    };\n\n    for (var i = 0; i < allNgModelNodes.length; i++) {\n      var ngModelNode = allNgModelNodes[i];\n      if (!ngModelNode.hasAttribute('formly-skip-ng-model-attrs-manipulator') && !(_angularFix2['default'].isString(skip) && nodeMatches(ngModelNode, skip))) {\n        matchingNgModelNodes.push(ngModelNode);\n      }\n    }\n\n    return matchingNgModelNodes;\n  }\n\n  function nodeMatches(node, selector) {\n    var div = document.createElement('div');\n    div.innerHTML = node.outerHTML;\n    return div.querySelector(selector);\n  }\n\n  function getBuiltInAttributes() {\n    var ngModelAttributes = {\n      focus: {\n        attribute: 'formly-focus'\n      }\n    };\n    var boundOnly = [];\n    var bothBooleanAndBound = ['required', 'disabled'];\n    var bothAttributeAndBound = ['pattern', 'minlength'];\n    var statementOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n    var attributeOnly = ['placeholder', 'min', 'max', 'step', 'tabindex', 'type'];\n    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n      bothAttributeAndBound.push('maxlength');\n    } else {\n      boundOnly.push('maxlength');\n    }\n\n    _angularFix2['default'].forEach(boundOnly, function (item) {\n      ngModelAttributes[item] = { bound: 'ng-' + item };\n    });\n\n    _angularFix2['default'].forEach(bothBooleanAndBound, function (item) {\n      ngModelAttributes[item] = { boolean: item, bound: 'ng-' + item };\n    });\n\n    _angularFix2['default'].forEach(bothAttributeAndBound, function (item) {\n      ngModelAttributes[item] = { attribute: item, bound: 'ng-' + item };\n    });\n\n    _angularFix2['default'].forEach(statementOnly, function (item) {\n      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n      ngModelAttributes[propName] = { statement: 'ng-' + item };\n    });\n\n    _angularFix2['default'].forEach(attributeOnly, function (item) {\n      ngModelAttributes[item] = { attribute: item };\n    });\n    return ngModelAttributes;\n  }\n\n  function getEpValue(ep, name) {\n    return ep['templateOptions.' + name] || ep['templateOptions[\\'' + name + '\\']'] || ep['templateOptions[\"' + name + '\"]'];\n  }\n\n  function addIfNotPresent(nodes, attr, val) {\n    _angularFix2['default'].forEach(nodes, function (node) {\n      if (!node.getAttribute(attr)) {\n        node.setAttribute(attr, val);\n      }\n    });\n  }\n\n  function addRegardlessOfPresence(nodes, attr, val) {\n    _angularFix2['default'].forEach(nodes, function (node) {\n      node.setAttribute(attr, val);\n    });\n  }\n\n  function isPropertyAccessor(key) {\n    return (0, _otherUtils.contains)(key, '.') || (0, _otherUtils.contains)(key, '[') && (0, _otherUtils.contains)(key, ']');\n  }\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./run/formlyNgModelAttrsManipulator.js\n **/","import angular from 'angular-fix'\nimport {contains} from '../other/utils'\n\nexport default addFormlyNgModelAttrsManipulator\n\n// @ngInject\nfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n    return\n  }\n  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator)\n\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    const node = document.createElement('div')\n    const skip = options.extras && options.extras.skipNgModelAttrsManipulator\n    if (skip === true) {\n      return template\n    }\n    node.innerHTML = template\n\n    const modelNodes = getNgModelNodes(node, skip)\n    if (!modelNodes || !modelNodes.length) {\n      return template\n    }\n\n    addIfNotPresent(modelNodes, 'id', scope.id)\n    addIfNotPresent(modelNodes, 'name', scope.name || scope.id)\n\n    addValidation()\n    alterNgModelAttr()\n    addModelOptions()\n    addTemplateOptionsAttrs()\n    addNgModelElAttrs()\n\n\n    return node.innerHTML\n\n\n    function addValidation() {\n      if (angular.isDefined(options.validators) || angular.isDefined(options.validation.messages)) {\n        addIfNotPresent(modelNodes, 'formly-custom-validation', '')\n      }\n    }\n\n    function alterNgModelAttr() {\n      if (isPropertyAccessor(options.key)) {\n        addRegardlessOfPresence(modelNodes, 'ng-model', 'model.' + options.key)\n      }\n    }\n\n    function addModelOptions() {\n      if (angular.isDefined(options.modelOptions)) {\n        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions')\n        if (options.modelOptions.getterSetter) {\n          addRegardlessOfPresence(modelNodes, 'ng-model', 'options.value')\n        }\n      }\n    }\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return\n      }\n      const to = options.templateOptions || {}\n      const ep = options.expressionProperties || {}\n\n      const ngModelAttributes = getBuiltInAttributes()\n\n      // extend with the user's specifications winning\n      angular.extend(ngModelAttributes, options.ngModelAttrs)\n\n      // Feel free to make this more simple :-)\n      angular.forEach(ngModelAttributes, (val, name) => {\n        /* eslint complexity:[2, 14] */\n        let attrVal, attrName\n        const ref = `options.templateOptions['${name}']`\n        const toVal = to[name]\n        const epVal = getEpValue(ep, name)\n\n        const inTo = angular.isDefined(toVal)\n        const inEp = angular.isDefined(epVal)\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value\n          attrVal = name\n        } else if (val.statement && inTo) {\n          attrName = val.statement\n          if (angular.isString(to[name])) {\n            attrVal = `$eval(${ref})`\n          } else if (angular.isFunction(to[name])) {\n            attrVal = `${ref}(model[options.key], options, this, $event)`\n          } else {\n            throw new Error(\n              `options.templateOptions.${name} must be a string or function: ${JSON.stringify(options)}`\n            )\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound\n          attrVal = ref\n        } else if ((val.attribute || val.boolean) && inEp) {\n          attrName = val.attribute || val.boolean\n          attrVal = `${$interpolate.startSymbol()}${ref}${$interpolate.endSymbol()}`\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute\n          attrVal = toVal\n        } else if (val.boolean) {\n          if (inTo && !inEp && toVal) {\n            attrName = val.boolean\n            attrVal = true\n          } else {\n            /* eslint no-empty:0 */\n            // empty to illustrate that a boolean will not be added via val.bound\n            // if you want it added via val.bound, then put it in expressionProperties\n          }\n        } else if (val.bound && inTo) {\n          attrName = val.bound\n          attrVal = ref\n        }\n\n        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n          addIfNotPresent(modelNodes, attrName, attrVal)\n        }\n      })\n    }\n\n    function addNgModelElAttrs() {\n      angular.forEach(options.ngModelElAttrs, (val, name) => {\n        addRegardlessOfPresence(modelNodes, name, val)\n      })\n    }\n  }\n\n  // Utility functions\n  function getNgModelNodes(node, skip) {\n    const selectorNot = angular.isString(skip) ? `:not(${skip})` : ''\n    const skipNot = ':not([formly-skip-ng-model-attrs-manipulator])'\n    const query = `[ng-model]${selectorNot}${skipNot}, [data-ng-model]${selectorNot}${skipNot}`\n    try {\n      return node.querySelectorAll(query)\n    } catch (e) {\n      //this code is needed for IE8, as it does not support the CSS3 ':not' selector\n      //it should be removed when IE8 support is dropped\n      return getNgModelNodesFallback(node, skip)\n    }\n  }\n\n  function getNgModelNodesFallback(node, skip) {\n    const allNgModelNodes = node.querySelectorAll('[ng-model], [data-ng-model]')\n    const matchingNgModelNodes = []\n\n    //make sure this array is compatible with NodeList type by adding an 'item' function\n    matchingNgModelNodes.item = function(i) {\n      return this[i]\n    }\n\n    for (let i = 0; i < allNgModelNodes.length; i++) {\n      const ngModelNode = allNgModelNodes[i]\n      if (!ngModelNode.hasAttribute('formly-skip-ng-model-attrs-manipulator') &&\n        !(angular.isString(skip) && nodeMatches(ngModelNode, skip))) {\n        matchingNgModelNodes.push(ngModelNode)\n      }\n    }\n\n    return matchingNgModelNodes\n  }\n\n  function nodeMatches(node, selector) {\n    const div = document.createElement('div')\n    div.innerHTML = node.outerHTML\n    return div.querySelector(selector)\n  }\n\n  function getBuiltInAttributes() {\n    const ngModelAttributes = {\n      focus: {\n        attribute: 'formly-focus',\n      },\n    }\n    const boundOnly = []\n    const bothBooleanAndBound = ['required', 'disabled']\n    const bothAttributeAndBound = ['pattern', 'minlength']\n    const statementOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur']\n    const attributeOnly = ['placeholder', 'min', 'max', 'step', 'tabindex', 'type']\n    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n      bothAttributeAndBound.push('maxlength')\n    } else {\n      boundOnly.push('maxlength')\n    }\n\n    angular.forEach(boundOnly, item => {\n      ngModelAttributes[item] = {bound: 'ng-' + item}\n    })\n\n    angular.forEach(bothBooleanAndBound, item => {\n      ngModelAttributes[item] = {boolean: item, bound: 'ng-' + item}\n    })\n\n    angular.forEach(bothAttributeAndBound, item => {\n      ngModelAttributes[item] = {attribute: item, bound: 'ng-' + item}\n    })\n\n    angular.forEach(statementOnly, item => {\n      const propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1)\n      ngModelAttributes[propName] = {statement: 'ng-' + item}\n    })\n\n    angular.forEach(attributeOnly, item => {\n      ngModelAttributes[item] = {attribute: item}\n    })\n    return ngModelAttributes\n  }\n\n  function getEpValue(ep, name) {\n    return ep['templateOptions.' + name] ||\n      ep[`templateOptions['${name}']`] ||\n      ep[`templateOptions[\"${name}\"]`]\n  }\n\n  function addIfNotPresent(nodes, attr, val) {\n    angular.forEach(nodes, node => {\n      if (!node.getAttribute(attr)) {\n        node.setAttribute(attr, val)\n      }\n    })\n  }\n\n  function addRegardlessOfPresence(nodes, attr, val) {\n    angular.forEach(nodes, node => {\n      node.setAttribute(attr, val)\n    })\n  }\n\n  function isPropertyAccessor(key) {\n    return contains(key, '.') || (contains(key, '[') && contains(key, ']'))\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./run/formlyNgModelAttrsManipulator.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _otherUtils = require('../other/utils');\n\nvar _otherUtils2 = _interopRequireDefault(_otherUtils);\n\nexports['default'] = formlyUtil;\n\n// @ngInject\nfunction formlyUtil() {\n  return _otherUtils2['default'];\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./services/formlyUtil.js\n **/","import utils from '../other/utils'\n\nexport default formlyUtil\n\n// @ngInject\nfunction formlyUtil() {\n  return utils\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./services/formlyUtil.js\n **/","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nexports['default'] = formlyWarn;\n\n// @ngInject\nfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n  return function warn() {\n    if (!formlyConfig.disableWarnings) {\n      var args = Array.prototype.slice.call(arguments);\n      var warnInfoSlug = args.shift();\n      args.unshift('Formly Warning:');\n      args.push('' + formlyErrorAndWarningsUrlPrefix + warnInfoSlug);\n      $log.warn.apply($log, _toConsumableArray(args));\n    }\n  };\n}\nmodule.exports = exports['default'];\n\n\n/** WEBPACK FOOTER **\n ** ./services/formlyWarn.js\n **/","export default formlyWarn\n\n// @ngInject\nfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n  return function warn() {\n    if (!formlyConfig.disableWarnings) {\n      const args = Array.prototype.slice.call(arguments)\n      const warnInfoSlug = args.shift()\n      args.unshift('Formly Warning:')\n      args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`)\n      $log.warn(...args)\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader?configFile=./other/src.eslintrc!./services/formlyWarn.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_19__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 19\n ** module chunks = 0\n **/"],"sourceRoot":""}
